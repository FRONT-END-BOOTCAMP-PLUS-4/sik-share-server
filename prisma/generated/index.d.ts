
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Neighborhood
 * 
 */
export type Neighborhood = $Result.DefaultSelection<Prisma.$NeighborhoodPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model GroupBuy
 * 
 */
export type GroupBuy = $Result.DefaultSelection<Prisma.$GroupBuyPayload>
/**
 * Model GroupBuyParticipant
 * 
 */
export type GroupBuyParticipant = $Result.DefaultSelection<Prisma.$GroupBuyParticipantPayload>
/**
 * Model GroupBuyImage
 * 
 */
export type GroupBuyImage = $Result.DefaultSelection<Prisma.$GroupBuyImagePayload>
/**
 * Model Share
 * 
 */
export type Share = $Result.DefaultSelection<Prisma.$SharePayload>
/**
 * Model ShareImage
 * 
 */
export type ShareImage = $Result.DefaultSelection<Prisma.$ShareImagePayload>
/**
 * Model ShareItem
 * 
 */
export type ShareItem = $Result.DefaultSelection<Prisma.$ShareItemPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model ReviewShortReview
 * 
 */
export type ReviewShortReview = $Result.DefaultSelection<Prisma.$ReviewShortReviewPayload>
/**
 * Model ShortReviewOption
 * 
 */
export type ShortReviewOption = $Result.DefaultSelection<Prisma.$ShortReviewOptionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model GroupBuyChat
 * 
 */
export type GroupBuyChat = $Result.DefaultSelection<Prisma.$GroupBuyChatPayload>
/**
 * Model GroupBuyChatMessage
 * 
 */
export type GroupBuyChatMessage = $Result.DefaultSelection<Prisma.$GroupBuyChatMessagePayload>
/**
 * Model GroupBuyChatParticipant
 * 
 */
export type GroupBuyChatParticipant = $Result.DefaultSelection<Prisma.$GroupBuyChatParticipantPayload>
/**
 * Model ShareChat
 * 
 */
export type ShareChat = $Result.DefaultSelection<Prisma.$ShareChatPayload>
/**
 * Model ShareChatMessage
 * 
 */
export type ShareChatMessage = $Result.DefaultSelection<Prisma.$ShareChatMessagePayload>
/**
 * Model ShareChatParticipant
 * 
 */
export type ShareChatParticipant = $Result.DefaultSelection<Prisma.$ShareChatParticipantPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Neighborhoods
 * const neighborhoods = await prisma.neighborhood.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Neighborhoods
   * const neighborhoods = await prisma.neighborhood.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.neighborhood`: Exposes CRUD operations for the **Neighborhood** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Neighborhoods
    * const neighborhoods = await prisma.neighborhood.findMany()
    * ```
    */
  get neighborhood(): Prisma.NeighborhoodDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupBuy`: Exposes CRUD operations for the **GroupBuy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupBuys
    * const groupBuys = await prisma.groupBuy.findMany()
    * ```
    */
  get groupBuy(): Prisma.GroupBuyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupBuyParticipant`: Exposes CRUD operations for the **GroupBuyParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupBuyParticipants
    * const groupBuyParticipants = await prisma.groupBuyParticipant.findMany()
    * ```
    */
  get groupBuyParticipant(): Prisma.GroupBuyParticipantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupBuyImage`: Exposes CRUD operations for the **GroupBuyImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupBuyImages
    * const groupBuyImages = await prisma.groupBuyImage.findMany()
    * ```
    */
  get groupBuyImage(): Prisma.GroupBuyImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.share`: Exposes CRUD operations for the **Share** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shares
    * const shares = await prisma.share.findMany()
    * ```
    */
  get share(): Prisma.ShareDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shareImage`: Exposes CRUD operations for the **ShareImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareImages
    * const shareImages = await prisma.shareImage.findMany()
    * ```
    */
  get shareImage(): Prisma.ShareImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shareItem`: Exposes CRUD operations for the **ShareItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareItems
    * const shareItems = await prisma.shareItem.findMany()
    * ```
    */
  get shareItem(): Prisma.ShareItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reviewShortReview`: Exposes CRUD operations for the **ReviewShortReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReviewShortReviews
    * const reviewShortReviews = await prisma.reviewShortReview.findMany()
    * ```
    */
  get reviewShortReview(): Prisma.ReviewShortReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shortReviewOption`: Exposes CRUD operations for the **ShortReviewOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShortReviewOptions
    * const shortReviewOptions = await prisma.shortReviewOption.findMany()
    * ```
    */
  get shortReviewOption(): Prisma.ShortReviewOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupBuyChat`: Exposes CRUD operations for the **GroupBuyChat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupBuyChats
    * const groupBuyChats = await prisma.groupBuyChat.findMany()
    * ```
    */
  get groupBuyChat(): Prisma.GroupBuyChatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupBuyChatMessage`: Exposes CRUD operations for the **GroupBuyChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupBuyChatMessages
    * const groupBuyChatMessages = await prisma.groupBuyChatMessage.findMany()
    * ```
    */
  get groupBuyChatMessage(): Prisma.GroupBuyChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.groupBuyChatParticipant`: Exposes CRUD operations for the **GroupBuyChatParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupBuyChatParticipants
    * const groupBuyChatParticipants = await prisma.groupBuyChatParticipant.findMany()
    * ```
    */
  get groupBuyChatParticipant(): Prisma.GroupBuyChatParticipantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shareChat`: Exposes CRUD operations for the **ShareChat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareChats
    * const shareChats = await prisma.shareChat.findMany()
    * ```
    */
  get shareChat(): Prisma.ShareChatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shareChatMessage`: Exposes CRUD operations for the **ShareChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareChatMessages
    * const shareChatMessages = await prisma.shareChatMessage.findMany()
    * ```
    */
  get shareChatMessage(): Prisma.ShareChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.shareChatParticipant`: Exposes CRUD operations for the **ShareChatParticipant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareChatParticipants
    * const shareChatParticipants = await prisma.shareChatParticipant.findMany()
    * ```
    */
  get shareChatParticipant(): Prisma.ShareChatParticipantDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Neighborhood: 'Neighborhood',
    User: 'User',
    GroupBuy: 'GroupBuy',
    GroupBuyParticipant: 'GroupBuyParticipant',
    GroupBuyImage: 'GroupBuyImage',
    Share: 'Share',
    ShareImage: 'ShareImage',
    ShareItem: 'ShareItem',
    Review: 'Review',
    ReviewShortReview: 'ReviewShortReview',
    ShortReviewOption: 'ShortReviewOption',
    Notification: 'Notification',
    GroupBuyChat: 'GroupBuyChat',
    GroupBuyChatMessage: 'GroupBuyChatMessage',
    GroupBuyChatParticipant: 'GroupBuyChatParticipant',
    ShareChat: 'ShareChat',
    ShareChatMessage: 'ShareChatMessage',
    ShareChatParticipant: 'ShareChatParticipant'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "neighborhood" | "user" | "groupBuy" | "groupBuyParticipant" | "groupBuyImage" | "share" | "shareImage" | "shareItem" | "review" | "reviewShortReview" | "shortReviewOption" | "notification" | "groupBuyChat" | "groupBuyChatMessage" | "groupBuyChatParticipant" | "shareChat" | "shareChatMessage" | "shareChatParticipant"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Neighborhood: {
        payload: Prisma.$NeighborhoodPayload<ExtArgs>
        fields: Prisma.NeighborhoodFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NeighborhoodFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NeighborhoodFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>
          }
          findFirst: {
            args: Prisma.NeighborhoodFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NeighborhoodFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>
          }
          findMany: {
            args: Prisma.NeighborhoodFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>[]
          }
          create: {
            args: Prisma.NeighborhoodCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>
          }
          createMany: {
            args: Prisma.NeighborhoodCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NeighborhoodCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>[]
          }
          delete: {
            args: Prisma.NeighborhoodDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>
          }
          update: {
            args: Prisma.NeighborhoodUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>
          }
          deleteMany: {
            args: Prisma.NeighborhoodDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NeighborhoodUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NeighborhoodUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>[]
          }
          upsert: {
            args: Prisma.NeighborhoodUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NeighborhoodPayload>
          }
          aggregate: {
            args: Prisma.NeighborhoodAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNeighborhood>
          }
          groupBy: {
            args: Prisma.NeighborhoodGroupByArgs<ExtArgs>
            result: $Utils.Optional<NeighborhoodGroupByOutputType>[]
          }
          count: {
            args: Prisma.NeighborhoodCountArgs<ExtArgs>
            result: $Utils.Optional<NeighborhoodCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      GroupBuy: {
        payload: Prisma.$GroupBuyPayload<ExtArgs>
        fields: Prisma.GroupBuyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupBuyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupBuyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>
          }
          findFirst: {
            args: Prisma.GroupBuyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupBuyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>
          }
          findMany: {
            args: Prisma.GroupBuyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>[]
          }
          create: {
            args: Prisma.GroupBuyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>
          }
          createMany: {
            args: Prisma.GroupBuyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupBuyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>[]
          }
          delete: {
            args: Prisma.GroupBuyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>
          }
          update: {
            args: Prisma.GroupBuyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>
          }
          deleteMany: {
            args: Prisma.GroupBuyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupBuyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupBuyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>[]
          }
          upsert: {
            args: Prisma.GroupBuyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyPayload>
          }
          aggregate: {
            args: Prisma.GroupBuyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupBuy>
          }
          groupBy: {
            args: Prisma.GroupBuyGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupBuyCountArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyCountAggregateOutputType> | number
          }
        }
      }
      GroupBuyParticipant: {
        payload: Prisma.$GroupBuyParticipantPayload<ExtArgs>
        fields: Prisma.GroupBuyParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupBuyParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupBuyParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>
          }
          findFirst: {
            args: Prisma.GroupBuyParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupBuyParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>
          }
          findMany: {
            args: Prisma.GroupBuyParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>[]
          }
          create: {
            args: Prisma.GroupBuyParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>
          }
          createMany: {
            args: Prisma.GroupBuyParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupBuyParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>[]
          }
          delete: {
            args: Prisma.GroupBuyParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>
          }
          update: {
            args: Prisma.GroupBuyParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>
          }
          deleteMany: {
            args: Prisma.GroupBuyParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupBuyParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupBuyParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>[]
          }
          upsert: {
            args: Prisma.GroupBuyParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyParticipantPayload>
          }
          aggregate: {
            args: Prisma.GroupBuyParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupBuyParticipant>
          }
          groupBy: {
            args: Prisma.GroupBuyParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupBuyParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyParticipantCountAggregateOutputType> | number
          }
        }
      }
      GroupBuyImage: {
        payload: Prisma.$GroupBuyImagePayload<ExtArgs>
        fields: Prisma.GroupBuyImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupBuyImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupBuyImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>
          }
          findFirst: {
            args: Prisma.GroupBuyImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupBuyImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>
          }
          findMany: {
            args: Prisma.GroupBuyImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>[]
          }
          create: {
            args: Prisma.GroupBuyImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>
          }
          createMany: {
            args: Prisma.GroupBuyImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupBuyImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>[]
          }
          delete: {
            args: Prisma.GroupBuyImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>
          }
          update: {
            args: Prisma.GroupBuyImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>
          }
          deleteMany: {
            args: Prisma.GroupBuyImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupBuyImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupBuyImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>[]
          }
          upsert: {
            args: Prisma.GroupBuyImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyImagePayload>
          }
          aggregate: {
            args: Prisma.GroupBuyImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupBuyImage>
          }
          groupBy: {
            args: Prisma.GroupBuyImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupBuyImageCountArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyImageCountAggregateOutputType> | number
          }
        }
      }
      Share: {
        payload: Prisma.$SharePayload<ExtArgs>
        fields: Prisma.ShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          findFirst: {
            args: Prisma.ShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          findMany: {
            args: Prisma.ShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>[]
          }
          create: {
            args: Prisma.ShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          createMany: {
            args: Prisma.ShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShareCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>[]
          }
          delete: {
            args: Prisma.ShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          update: {
            args: Prisma.ShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          deleteMany: {
            args: Prisma.ShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShareUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>[]
          }
          upsert: {
            args: Prisma.ShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          aggregate: {
            args: Prisma.ShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShare>
          }
          groupBy: {
            args: Prisma.ShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareCountArgs<ExtArgs>
            result: $Utils.Optional<ShareCountAggregateOutputType> | number
          }
        }
      }
      ShareImage: {
        payload: Prisma.$ShareImagePayload<ExtArgs>
        fields: Prisma.ShareImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>
          }
          findFirst: {
            args: Prisma.ShareImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>
          }
          findMany: {
            args: Prisma.ShareImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>[]
          }
          create: {
            args: Prisma.ShareImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>
          }
          createMany: {
            args: Prisma.ShareImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShareImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>[]
          }
          delete: {
            args: Prisma.ShareImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>
          }
          update: {
            args: Prisma.ShareImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>
          }
          deleteMany: {
            args: Prisma.ShareImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShareImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>[]
          }
          upsert: {
            args: Prisma.ShareImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareImagePayload>
          }
          aggregate: {
            args: Prisma.ShareImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareImage>
          }
          groupBy: {
            args: Prisma.ShareImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareImageCountArgs<ExtArgs>
            result: $Utils.Optional<ShareImageCountAggregateOutputType> | number
          }
        }
      }
      ShareItem: {
        payload: Prisma.$ShareItemPayload<ExtArgs>
        fields: Prisma.ShareItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>
          }
          findFirst: {
            args: Prisma.ShareItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>
          }
          findMany: {
            args: Prisma.ShareItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>[]
          }
          create: {
            args: Prisma.ShareItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>
          }
          createMany: {
            args: Prisma.ShareItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShareItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>[]
          }
          delete: {
            args: Prisma.ShareItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>
          }
          update: {
            args: Prisma.ShareItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>
          }
          deleteMany: {
            args: Prisma.ShareItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShareItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>[]
          }
          upsert: {
            args: Prisma.ShareItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareItemPayload>
          }
          aggregate: {
            args: Prisma.ShareItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareItem>
          }
          groupBy: {
            args: Prisma.ShareItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareItemCountArgs<ExtArgs>
            result: $Utils.Optional<ShareItemCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      ReviewShortReview: {
        payload: Prisma.$ReviewShortReviewPayload<ExtArgs>
        fields: Prisma.ReviewShortReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewShortReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewShortReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewShortReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewShortReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewShortReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewShortReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewShortReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewShortReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewShortReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>
          }
          update: {
            args: Prisma.ReviewShortReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewShortReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewShortReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewShortReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewShortReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewShortReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewShortReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReviewShortReview>
          }
          groupBy: {
            args: Prisma.ReviewShortReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewShortReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewShortReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewShortReviewCountAggregateOutputType> | number
          }
        }
      }
      ShortReviewOption: {
        payload: Prisma.$ShortReviewOptionPayload<ExtArgs>
        fields: Prisma.ShortReviewOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShortReviewOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShortReviewOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>
          }
          findFirst: {
            args: Prisma.ShortReviewOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShortReviewOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>
          }
          findMany: {
            args: Prisma.ShortReviewOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>[]
          }
          create: {
            args: Prisma.ShortReviewOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>
          }
          createMany: {
            args: Prisma.ShortReviewOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShortReviewOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>[]
          }
          delete: {
            args: Prisma.ShortReviewOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>
          }
          update: {
            args: Prisma.ShortReviewOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>
          }
          deleteMany: {
            args: Prisma.ShortReviewOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShortReviewOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShortReviewOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>[]
          }
          upsert: {
            args: Prisma.ShortReviewOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShortReviewOptionPayload>
          }
          aggregate: {
            args: Prisma.ShortReviewOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShortReviewOption>
          }
          groupBy: {
            args: Prisma.ShortReviewOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShortReviewOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShortReviewOptionCountArgs<ExtArgs>
            result: $Utils.Optional<ShortReviewOptionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      GroupBuyChat: {
        payload: Prisma.$GroupBuyChatPayload<ExtArgs>
        fields: Prisma.GroupBuyChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupBuyChatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupBuyChatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>
          }
          findFirst: {
            args: Prisma.GroupBuyChatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupBuyChatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>
          }
          findMany: {
            args: Prisma.GroupBuyChatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>[]
          }
          create: {
            args: Prisma.GroupBuyChatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>
          }
          createMany: {
            args: Prisma.GroupBuyChatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupBuyChatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>[]
          }
          delete: {
            args: Prisma.GroupBuyChatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>
          }
          update: {
            args: Prisma.GroupBuyChatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>
          }
          deleteMany: {
            args: Prisma.GroupBuyChatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupBuyChatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupBuyChatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>[]
          }
          upsert: {
            args: Prisma.GroupBuyChatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatPayload>
          }
          aggregate: {
            args: Prisma.GroupBuyChatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupBuyChat>
          }
          groupBy: {
            args: Prisma.GroupBuyChatGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupBuyChatCountArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyChatCountAggregateOutputType> | number
          }
        }
      }
      GroupBuyChatMessage: {
        payload: Prisma.$GroupBuyChatMessagePayload<ExtArgs>
        fields: Prisma.GroupBuyChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupBuyChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupBuyChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>
          }
          findFirst: {
            args: Prisma.GroupBuyChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupBuyChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>
          }
          findMany: {
            args: Prisma.GroupBuyChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>[]
          }
          create: {
            args: Prisma.GroupBuyChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>
          }
          createMany: {
            args: Prisma.GroupBuyChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupBuyChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>[]
          }
          delete: {
            args: Prisma.GroupBuyChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>
          }
          update: {
            args: Prisma.GroupBuyChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.GroupBuyChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupBuyChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupBuyChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.GroupBuyChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatMessagePayload>
          }
          aggregate: {
            args: Prisma.GroupBuyChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupBuyChatMessage>
          }
          groupBy: {
            args: Prisma.GroupBuyChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupBuyChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyChatMessageCountAggregateOutputType> | number
          }
        }
      }
      GroupBuyChatParticipant: {
        payload: Prisma.$GroupBuyChatParticipantPayload<ExtArgs>
        fields: Prisma.GroupBuyChatParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupBuyChatParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupBuyChatParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>
          }
          findFirst: {
            args: Prisma.GroupBuyChatParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupBuyChatParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>
          }
          findMany: {
            args: Prisma.GroupBuyChatParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>[]
          }
          create: {
            args: Prisma.GroupBuyChatParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>
          }
          createMany: {
            args: Prisma.GroupBuyChatParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupBuyChatParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>[]
          }
          delete: {
            args: Prisma.GroupBuyChatParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>
          }
          update: {
            args: Prisma.GroupBuyChatParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>
          }
          deleteMany: {
            args: Prisma.GroupBuyChatParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GroupBuyChatParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GroupBuyChatParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>[]
          }
          upsert: {
            args: Prisma.GroupBuyChatParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GroupBuyChatParticipantPayload>
          }
          aggregate: {
            args: Prisma.GroupBuyChatParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupBuyChatParticipant>
          }
          groupBy: {
            args: Prisma.GroupBuyChatParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyChatParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupBuyChatParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<GroupBuyChatParticipantCountAggregateOutputType> | number
          }
        }
      }
      ShareChat: {
        payload: Prisma.$ShareChatPayload<ExtArgs>
        fields: Prisma.ShareChatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareChatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareChatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>
          }
          findFirst: {
            args: Prisma.ShareChatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareChatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>
          }
          findMany: {
            args: Prisma.ShareChatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>[]
          }
          create: {
            args: Prisma.ShareChatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>
          }
          createMany: {
            args: Prisma.ShareChatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShareChatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>[]
          }
          delete: {
            args: Prisma.ShareChatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>
          }
          update: {
            args: Prisma.ShareChatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>
          }
          deleteMany: {
            args: Prisma.ShareChatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareChatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShareChatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>[]
          }
          upsert: {
            args: Prisma.ShareChatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatPayload>
          }
          aggregate: {
            args: Prisma.ShareChatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareChat>
          }
          groupBy: {
            args: Prisma.ShareChatGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareChatGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareChatCountArgs<ExtArgs>
            result: $Utils.Optional<ShareChatCountAggregateOutputType> | number
          }
        }
      }
      ShareChatMessage: {
        payload: Prisma.$ShareChatMessagePayload<ExtArgs>
        fields: Prisma.ShareChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ShareChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>
          }
          findMany: {
            args: Prisma.ShareChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>[]
          }
          create: {
            args: Prisma.ShareChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>
          }
          createMany: {
            args: Prisma.ShareChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShareChatMessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>[]
          }
          delete: {
            args: Prisma.ShareChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>
          }
          update: {
            args: Prisma.ShareChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ShareChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShareChatMessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>[]
          }
          upsert: {
            args: Prisma.ShareChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ShareChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareChatMessage>
          }
          groupBy: {
            args: Prisma.ShareChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ShareChatMessageCountAggregateOutputType> | number
          }
        }
      }
      ShareChatParticipant: {
        payload: Prisma.$ShareChatParticipantPayload<ExtArgs>
        fields: Prisma.ShareChatParticipantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareChatParticipantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareChatParticipantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>
          }
          findFirst: {
            args: Prisma.ShareChatParticipantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareChatParticipantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>
          }
          findMany: {
            args: Prisma.ShareChatParticipantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>[]
          }
          create: {
            args: Prisma.ShareChatParticipantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>
          }
          createMany: {
            args: Prisma.ShareChatParticipantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ShareChatParticipantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>[]
          }
          delete: {
            args: Prisma.ShareChatParticipantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>
          }
          update: {
            args: Prisma.ShareChatParticipantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>
          }
          deleteMany: {
            args: Prisma.ShareChatParticipantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareChatParticipantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ShareChatParticipantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>[]
          }
          upsert: {
            args: Prisma.ShareChatParticipantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareChatParticipantPayload>
          }
          aggregate: {
            args: Prisma.ShareChatParticipantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareChatParticipant>
          }
          groupBy: {
            args: Prisma.ShareChatParticipantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareChatParticipantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareChatParticipantCountArgs<ExtArgs>
            result: $Utils.Optional<ShareChatParticipantCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    neighborhood?: NeighborhoodOmit
    user?: UserOmit
    groupBuy?: GroupBuyOmit
    groupBuyParticipant?: GroupBuyParticipantOmit
    groupBuyImage?: GroupBuyImageOmit
    share?: ShareOmit
    shareImage?: ShareImageOmit
    shareItem?: ShareItemOmit
    review?: ReviewOmit
    reviewShortReview?: ReviewShortReviewOmit
    shortReviewOption?: ShortReviewOptionOmit
    notification?: NotificationOmit
    groupBuyChat?: GroupBuyChatOmit
    groupBuyChatMessage?: GroupBuyChatMessageOmit
    groupBuyChatParticipant?: GroupBuyChatParticipantOmit
    shareChat?: ShareChatOmit
    shareChatMessage?: ShareChatMessageOmit
    shareChatParticipant?: ShareChatParticipantOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type NeighborhoodCountOutputType
   */

  export type NeighborhoodCountOutputType = {
    grouBuys: number
    shares: number
    users: number
  }

  export type NeighborhoodCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grouBuys?: boolean | NeighborhoodCountOutputTypeCountGrouBuysArgs
    shares?: boolean | NeighborhoodCountOutputTypeCountSharesArgs
    users?: boolean | NeighborhoodCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * NeighborhoodCountOutputType without action
   */
  export type NeighborhoodCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NeighborhoodCountOutputType
     */
    select?: NeighborhoodCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NeighborhoodCountOutputType without action
   */
  export type NeighborhoodCountOutputTypeCountGrouBuysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyWhereInput
  }

  /**
   * NeighborhoodCountOutputType without action
   */
  export type NeighborhoodCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareWhereInput
  }

  /**
   * NeighborhoodCountOutputType without action
   */
  export type NeighborhoodCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    grouBuys: number
    groupBuyChatMessages: number
    groupBuyChatParticipants: number
    groupBuyParticipants: number
    notifications: number
    receivedReviews: number
    writtenReviews: number
    ownedShares: number
    receivedShares: number
    shareChatMessages: number
    shareChatParticipants: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grouBuys?: boolean | UserCountOutputTypeCountGrouBuysArgs
    groupBuyChatMessages?: boolean | UserCountOutputTypeCountGroupBuyChatMessagesArgs
    groupBuyChatParticipants?: boolean | UserCountOutputTypeCountGroupBuyChatParticipantsArgs
    groupBuyParticipants?: boolean | UserCountOutputTypeCountGroupBuyParticipantsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    receivedReviews?: boolean | UserCountOutputTypeCountReceivedReviewsArgs
    writtenReviews?: boolean | UserCountOutputTypeCountWrittenReviewsArgs
    ownedShares?: boolean | UserCountOutputTypeCountOwnedSharesArgs
    receivedShares?: boolean | UserCountOutputTypeCountReceivedSharesArgs
    shareChatMessages?: boolean | UserCountOutputTypeCountShareChatMessagesArgs
    shareChatParticipants?: boolean | UserCountOutputTypeCountShareChatParticipantsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGrouBuysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGroupBuyChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyChatMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGroupBuyChatParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyChatParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGroupBuyParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyParticipantWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWrittenReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShareChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareChatMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountShareChatParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareChatParticipantWhereInput
  }


  /**
   * Count Type GroupBuyCountOutputType
   */

  export type GroupBuyCountOutputType = {
    chats: number
    images: number
    participants: number
  }

  export type GroupBuyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chats?: boolean | GroupBuyCountOutputTypeCountChatsArgs
    images?: boolean | GroupBuyCountOutputTypeCountImagesArgs
    participants?: boolean | GroupBuyCountOutputTypeCountParticipantsArgs
  }

  // Custom InputTypes
  /**
   * GroupBuyCountOutputType without action
   */
  export type GroupBuyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyCountOutputType
     */
    select?: GroupBuyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupBuyCountOutputType without action
   */
  export type GroupBuyCountOutputTypeCountChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyChatWhereInput
  }

  /**
   * GroupBuyCountOutputType without action
   */
  export type GroupBuyCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyImageWhereInput
  }

  /**
   * GroupBuyCountOutputType without action
   */
  export type GroupBuyCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyParticipantWhereInput
  }


  /**
   * Count Type ShareCountOutputType
   */

  export type ShareCountOutputType = {
    reviews: number
    chats: number
    images: number
  }

  export type ShareCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | ShareCountOutputTypeCountReviewsArgs
    chats?: boolean | ShareCountOutputTypeCountChatsArgs
    images?: boolean | ShareCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * ShareCountOutputType without action
   */
  export type ShareCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareCountOutputType
     */
    select?: ShareCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShareCountOutputType without action
   */
  export type ShareCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * ShareCountOutputType without action
   */
  export type ShareCountOutputTypeCountChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareChatWhereInput
  }

  /**
   * ShareCountOutputType without action
   */
  export type ShareCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareImageWhereInput
  }


  /**
   * Count Type ShareItemCountOutputType
   */

  export type ShareItemCountOutputType = {
    shares: number
  }

  export type ShareItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shares?: boolean | ShareItemCountOutputTypeCountSharesArgs
  }

  // Custom InputTypes
  /**
   * ShareItemCountOutputType without action
   */
  export type ShareItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItemCountOutputType
     */
    select?: ShareItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShareItemCountOutputType without action
   */
  export type ShareItemCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareWhereInput
  }


  /**
   * Count Type ReviewCountOutputType
   */

  export type ReviewCountOutputType = {
    reviews: number
  }

  export type ReviewCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | ReviewCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewCountOutputType
     */
    select?: ReviewCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReviewCountOutputType without action
   */
  export type ReviewCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewShortReviewWhereInput
  }


  /**
   * Count Type ShortReviewOptionCountOutputType
   */

  export type ShortReviewOptionCountOutputType = {
    reviews: number
  }

  export type ShortReviewOptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | ShortReviewOptionCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * ShortReviewOptionCountOutputType without action
   */
  export type ShortReviewOptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOptionCountOutputType
     */
    select?: ShortReviewOptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShortReviewOptionCountOutputType without action
   */
  export type ShortReviewOptionCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewShortReviewWhereInput
  }


  /**
   * Count Type GroupBuyChatCountOutputType
   */

  export type GroupBuyChatCountOutputType = {
    messages: number
    participants: number
  }

  export type GroupBuyChatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | GroupBuyChatCountOutputTypeCountMessagesArgs
    participants?: boolean | GroupBuyChatCountOutputTypeCountParticipantsArgs
  }

  // Custom InputTypes
  /**
   * GroupBuyChatCountOutputType without action
   */
  export type GroupBuyChatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatCountOutputType
     */
    select?: GroupBuyChatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupBuyChatCountOutputType without action
   */
  export type GroupBuyChatCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyChatMessageWhereInput
  }

  /**
   * GroupBuyChatCountOutputType without action
   */
  export type GroupBuyChatCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyChatParticipantWhereInput
  }


  /**
   * Count Type ShareChatCountOutputType
   */

  export type ShareChatCountOutputType = {
    messages: number
    participants: number
  }

  export type ShareChatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ShareChatCountOutputTypeCountMessagesArgs
    participants?: boolean | ShareChatCountOutputTypeCountParticipantsArgs
  }

  // Custom InputTypes
  /**
   * ShareChatCountOutputType without action
   */
  export type ShareChatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatCountOutputType
     */
    select?: ShareChatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShareChatCountOutputType without action
   */
  export type ShareChatCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareChatMessageWhereInput
  }

  /**
   * ShareChatCountOutputType without action
   */
  export type ShareChatCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareChatParticipantWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Neighborhood
   */

  export type AggregateNeighborhood = {
    _count: NeighborhoodCountAggregateOutputType | null
    _avg: NeighborhoodAvgAggregateOutputType | null
    _sum: NeighborhoodSumAggregateOutputType | null
    _min: NeighborhoodMinAggregateOutputType | null
    _max: NeighborhoodMaxAggregateOutputType | null
  }

  export type NeighborhoodAvgAggregateOutputType = {
    id: number | null
    lat: number | null
    lng: number | null
  }

  export type NeighborhoodSumAggregateOutputType = {
    id: number | null
    lat: number | null
    lng: number | null
  }

  export type NeighborhoodMinAggregateOutputType = {
    id: number | null
    name: string | null
    district: string | null
    lat: number | null
    lng: number | null
  }

  export type NeighborhoodMaxAggregateOutputType = {
    id: number | null
    name: string | null
    district: string | null
    lat: number | null
    lng: number | null
  }

  export type NeighborhoodCountAggregateOutputType = {
    id: number
    name: number
    district: number
    lat: number
    lng: number
    _all: number
  }


  export type NeighborhoodAvgAggregateInputType = {
    id?: true
    lat?: true
    lng?: true
  }

  export type NeighborhoodSumAggregateInputType = {
    id?: true
    lat?: true
    lng?: true
  }

  export type NeighborhoodMinAggregateInputType = {
    id?: true
    name?: true
    district?: true
    lat?: true
    lng?: true
  }

  export type NeighborhoodMaxAggregateInputType = {
    id?: true
    name?: true
    district?: true
    lat?: true
    lng?: true
  }

  export type NeighborhoodCountAggregateInputType = {
    id?: true
    name?: true
    district?: true
    lat?: true
    lng?: true
    _all?: true
  }

  export type NeighborhoodAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Neighborhood to aggregate.
     */
    where?: NeighborhoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Neighborhoods to fetch.
     */
    orderBy?: NeighborhoodOrderByWithRelationInput | NeighborhoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NeighborhoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Neighborhoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Neighborhoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Neighborhoods
    **/
    _count?: true | NeighborhoodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NeighborhoodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NeighborhoodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NeighborhoodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NeighborhoodMaxAggregateInputType
  }

  export type GetNeighborhoodAggregateType<T extends NeighborhoodAggregateArgs> = {
        [P in keyof T & keyof AggregateNeighborhood]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNeighborhood[P]>
      : GetScalarType<T[P], AggregateNeighborhood[P]>
  }




  export type NeighborhoodGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NeighborhoodWhereInput
    orderBy?: NeighborhoodOrderByWithAggregationInput | NeighborhoodOrderByWithAggregationInput[]
    by: NeighborhoodScalarFieldEnum[] | NeighborhoodScalarFieldEnum
    having?: NeighborhoodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NeighborhoodCountAggregateInputType | true
    _avg?: NeighborhoodAvgAggregateInputType
    _sum?: NeighborhoodSumAggregateInputType
    _min?: NeighborhoodMinAggregateInputType
    _max?: NeighborhoodMaxAggregateInputType
  }

  export type NeighborhoodGroupByOutputType = {
    id: number
    name: string
    district: string
    lat: number
    lng: number
    _count: NeighborhoodCountAggregateOutputType | null
    _avg: NeighborhoodAvgAggregateOutputType | null
    _sum: NeighborhoodSumAggregateOutputType | null
    _min: NeighborhoodMinAggregateOutputType | null
    _max: NeighborhoodMaxAggregateOutputType | null
  }

  type GetNeighborhoodGroupByPayload<T extends NeighborhoodGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NeighborhoodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NeighborhoodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NeighborhoodGroupByOutputType[P]>
            : GetScalarType<T[P], NeighborhoodGroupByOutputType[P]>
        }
      >
    >


  export type NeighborhoodSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    district?: boolean
    lat?: boolean
    lng?: boolean
    grouBuys?: boolean | Neighborhood$grouBuysArgs<ExtArgs>
    shares?: boolean | Neighborhood$sharesArgs<ExtArgs>
    users?: boolean | Neighborhood$usersArgs<ExtArgs>
    _count?: boolean | NeighborhoodCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["neighborhood"]>

  export type NeighborhoodSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    district?: boolean
    lat?: boolean
    lng?: boolean
  }, ExtArgs["result"]["neighborhood"]>

  export type NeighborhoodSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    district?: boolean
    lat?: boolean
    lng?: boolean
  }, ExtArgs["result"]["neighborhood"]>

  export type NeighborhoodSelectScalar = {
    id?: boolean
    name?: boolean
    district?: boolean
    lat?: boolean
    lng?: boolean
  }

  export type NeighborhoodOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "district" | "lat" | "lng", ExtArgs["result"]["neighborhood"]>
  export type NeighborhoodInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grouBuys?: boolean | Neighborhood$grouBuysArgs<ExtArgs>
    shares?: boolean | Neighborhood$sharesArgs<ExtArgs>
    users?: boolean | Neighborhood$usersArgs<ExtArgs>
    _count?: boolean | NeighborhoodCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NeighborhoodIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type NeighborhoodIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NeighborhoodPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Neighborhood"
    objects: {
      grouBuys: Prisma.$GroupBuyPayload<ExtArgs>[]
      shares: Prisma.$SharePayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      district: string
      lat: number
      lng: number
    }, ExtArgs["result"]["neighborhood"]>
    composites: {}
  }

  type NeighborhoodGetPayload<S extends boolean | null | undefined | NeighborhoodDefaultArgs> = $Result.GetResult<Prisma.$NeighborhoodPayload, S>

  type NeighborhoodCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NeighborhoodFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NeighborhoodCountAggregateInputType | true
    }

  export interface NeighborhoodDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Neighborhood'], meta: { name: 'Neighborhood' } }
    /**
     * Find zero or one Neighborhood that matches the filter.
     * @param {NeighborhoodFindUniqueArgs} args - Arguments to find a Neighborhood
     * @example
     * // Get one Neighborhood
     * const neighborhood = await prisma.neighborhood.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NeighborhoodFindUniqueArgs>(args: SelectSubset<T, NeighborhoodFindUniqueArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Neighborhood that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NeighborhoodFindUniqueOrThrowArgs} args - Arguments to find a Neighborhood
     * @example
     * // Get one Neighborhood
     * const neighborhood = await prisma.neighborhood.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NeighborhoodFindUniqueOrThrowArgs>(args: SelectSubset<T, NeighborhoodFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Neighborhood that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodFindFirstArgs} args - Arguments to find a Neighborhood
     * @example
     * // Get one Neighborhood
     * const neighborhood = await prisma.neighborhood.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NeighborhoodFindFirstArgs>(args?: SelectSubset<T, NeighborhoodFindFirstArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Neighborhood that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodFindFirstOrThrowArgs} args - Arguments to find a Neighborhood
     * @example
     * // Get one Neighborhood
     * const neighborhood = await prisma.neighborhood.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NeighborhoodFindFirstOrThrowArgs>(args?: SelectSubset<T, NeighborhoodFindFirstOrThrowArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Neighborhoods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Neighborhoods
     * const neighborhoods = await prisma.neighborhood.findMany()
     * 
     * // Get first 10 Neighborhoods
     * const neighborhoods = await prisma.neighborhood.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const neighborhoodWithIdOnly = await prisma.neighborhood.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NeighborhoodFindManyArgs>(args?: SelectSubset<T, NeighborhoodFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Neighborhood.
     * @param {NeighborhoodCreateArgs} args - Arguments to create a Neighborhood.
     * @example
     * // Create one Neighborhood
     * const Neighborhood = await prisma.neighborhood.create({
     *   data: {
     *     // ... data to create a Neighborhood
     *   }
     * })
     * 
     */
    create<T extends NeighborhoodCreateArgs>(args: SelectSubset<T, NeighborhoodCreateArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Neighborhoods.
     * @param {NeighborhoodCreateManyArgs} args - Arguments to create many Neighborhoods.
     * @example
     * // Create many Neighborhoods
     * const neighborhood = await prisma.neighborhood.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NeighborhoodCreateManyArgs>(args?: SelectSubset<T, NeighborhoodCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Neighborhoods and returns the data saved in the database.
     * @param {NeighborhoodCreateManyAndReturnArgs} args - Arguments to create many Neighborhoods.
     * @example
     * // Create many Neighborhoods
     * const neighborhood = await prisma.neighborhood.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Neighborhoods and only return the `id`
     * const neighborhoodWithIdOnly = await prisma.neighborhood.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NeighborhoodCreateManyAndReturnArgs>(args?: SelectSubset<T, NeighborhoodCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Neighborhood.
     * @param {NeighborhoodDeleteArgs} args - Arguments to delete one Neighborhood.
     * @example
     * // Delete one Neighborhood
     * const Neighborhood = await prisma.neighborhood.delete({
     *   where: {
     *     // ... filter to delete one Neighborhood
     *   }
     * })
     * 
     */
    delete<T extends NeighborhoodDeleteArgs>(args: SelectSubset<T, NeighborhoodDeleteArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Neighborhood.
     * @param {NeighborhoodUpdateArgs} args - Arguments to update one Neighborhood.
     * @example
     * // Update one Neighborhood
     * const neighborhood = await prisma.neighborhood.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NeighborhoodUpdateArgs>(args: SelectSubset<T, NeighborhoodUpdateArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Neighborhoods.
     * @param {NeighborhoodDeleteManyArgs} args - Arguments to filter Neighborhoods to delete.
     * @example
     * // Delete a few Neighborhoods
     * const { count } = await prisma.neighborhood.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NeighborhoodDeleteManyArgs>(args?: SelectSubset<T, NeighborhoodDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Neighborhoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Neighborhoods
     * const neighborhood = await prisma.neighborhood.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NeighborhoodUpdateManyArgs>(args: SelectSubset<T, NeighborhoodUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Neighborhoods and returns the data updated in the database.
     * @param {NeighborhoodUpdateManyAndReturnArgs} args - Arguments to update many Neighborhoods.
     * @example
     * // Update many Neighborhoods
     * const neighborhood = await prisma.neighborhood.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Neighborhoods and only return the `id`
     * const neighborhoodWithIdOnly = await prisma.neighborhood.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NeighborhoodUpdateManyAndReturnArgs>(args: SelectSubset<T, NeighborhoodUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Neighborhood.
     * @param {NeighborhoodUpsertArgs} args - Arguments to update or create a Neighborhood.
     * @example
     * // Update or create a Neighborhood
     * const neighborhood = await prisma.neighborhood.upsert({
     *   create: {
     *     // ... data to create a Neighborhood
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Neighborhood we want to update
     *   }
     * })
     */
    upsert<T extends NeighborhoodUpsertArgs>(args: SelectSubset<T, NeighborhoodUpsertArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Neighborhoods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodCountArgs} args - Arguments to filter Neighborhoods to count.
     * @example
     * // Count the number of Neighborhoods
     * const count = await prisma.neighborhood.count({
     *   where: {
     *     // ... the filter for the Neighborhoods we want to count
     *   }
     * })
    **/
    count<T extends NeighborhoodCountArgs>(
      args?: Subset<T, NeighborhoodCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NeighborhoodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Neighborhood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NeighborhoodAggregateArgs>(args: Subset<T, NeighborhoodAggregateArgs>): Prisma.PrismaPromise<GetNeighborhoodAggregateType<T>>

    /**
     * Group by Neighborhood.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NeighborhoodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NeighborhoodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NeighborhoodGroupByArgs['orderBy'] }
        : { orderBy?: NeighborhoodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NeighborhoodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNeighborhoodGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Neighborhood model
   */
  readonly fields: NeighborhoodFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Neighborhood.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NeighborhoodClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grouBuys<T extends Neighborhood$grouBuysArgs<ExtArgs> = {}>(args?: Subset<T, Neighborhood$grouBuysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shares<T extends Neighborhood$sharesArgs<ExtArgs> = {}>(args?: Subset<T, Neighborhood$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Neighborhood$usersArgs<ExtArgs> = {}>(args?: Subset<T, Neighborhood$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Neighborhood model
   */
  interface NeighborhoodFieldRefs {
    readonly id: FieldRef<"Neighborhood", 'Int'>
    readonly name: FieldRef<"Neighborhood", 'String'>
    readonly district: FieldRef<"Neighborhood", 'String'>
    readonly lat: FieldRef<"Neighborhood", 'Float'>
    readonly lng: FieldRef<"Neighborhood", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Neighborhood findUnique
   */
  export type NeighborhoodFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * Filter, which Neighborhood to fetch.
     */
    where: NeighborhoodWhereUniqueInput
  }

  /**
   * Neighborhood findUniqueOrThrow
   */
  export type NeighborhoodFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * Filter, which Neighborhood to fetch.
     */
    where: NeighborhoodWhereUniqueInput
  }

  /**
   * Neighborhood findFirst
   */
  export type NeighborhoodFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * Filter, which Neighborhood to fetch.
     */
    where?: NeighborhoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Neighborhoods to fetch.
     */
    orderBy?: NeighborhoodOrderByWithRelationInput | NeighborhoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Neighborhoods.
     */
    cursor?: NeighborhoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Neighborhoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Neighborhoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Neighborhoods.
     */
    distinct?: NeighborhoodScalarFieldEnum | NeighborhoodScalarFieldEnum[]
  }

  /**
   * Neighborhood findFirstOrThrow
   */
  export type NeighborhoodFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * Filter, which Neighborhood to fetch.
     */
    where?: NeighborhoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Neighborhoods to fetch.
     */
    orderBy?: NeighborhoodOrderByWithRelationInput | NeighborhoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Neighborhoods.
     */
    cursor?: NeighborhoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Neighborhoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Neighborhoods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Neighborhoods.
     */
    distinct?: NeighborhoodScalarFieldEnum | NeighborhoodScalarFieldEnum[]
  }

  /**
   * Neighborhood findMany
   */
  export type NeighborhoodFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * Filter, which Neighborhoods to fetch.
     */
    where?: NeighborhoodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Neighborhoods to fetch.
     */
    orderBy?: NeighborhoodOrderByWithRelationInput | NeighborhoodOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Neighborhoods.
     */
    cursor?: NeighborhoodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Neighborhoods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Neighborhoods.
     */
    skip?: number
    distinct?: NeighborhoodScalarFieldEnum | NeighborhoodScalarFieldEnum[]
  }

  /**
   * Neighborhood create
   */
  export type NeighborhoodCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * The data needed to create a Neighborhood.
     */
    data: XOR<NeighborhoodCreateInput, NeighborhoodUncheckedCreateInput>
  }

  /**
   * Neighborhood createMany
   */
  export type NeighborhoodCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Neighborhoods.
     */
    data: NeighborhoodCreateManyInput | NeighborhoodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Neighborhood createManyAndReturn
   */
  export type NeighborhoodCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * The data used to create many Neighborhoods.
     */
    data: NeighborhoodCreateManyInput | NeighborhoodCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Neighborhood update
   */
  export type NeighborhoodUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * The data needed to update a Neighborhood.
     */
    data: XOR<NeighborhoodUpdateInput, NeighborhoodUncheckedUpdateInput>
    /**
     * Choose, which Neighborhood to update.
     */
    where: NeighborhoodWhereUniqueInput
  }

  /**
   * Neighborhood updateMany
   */
  export type NeighborhoodUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Neighborhoods.
     */
    data: XOR<NeighborhoodUpdateManyMutationInput, NeighborhoodUncheckedUpdateManyInput>
    /**
     * Filter which Neighborhoods to update
     */
    where?: NeighborhoodWhereInput
    /**
     * Limit how many Neighborhoods to update.
     */
    limit?: number
  }

  /**
   * Neighborhood updateManyAndReturn
   */
  export type NeighborhoodUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * The data used to update Neighborhoods.
     */
    data: XOR<NeighborhoodUpdateManyMutationInput, NeighborhoodUncheckedUpdateManyInput>
    /**
     * Filter which Neighborhoods to update
     */
    where?: NeighborhoodWhereInput
    /**
     * Limit how many Neighborhoods to update.
     */
    limit?: number
  }

  /**
   * Neighborhood upsert
   */
  export type NeighborhoodUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * The filter to search for the Neighborhood to update in case it exists.
     */
    where: NeighborhoodWhereUniqueInput
    /**
     * In case the Neighborhood found by the `where` argument doesn't exist, create a new Neighborhood with this data.
     */
    create: XOR<NeighborhoodCreateInput, NeighborhoodUncheckedCreateInput>
    /**
     * In case the Neighborhood was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NeighborhoodUpdateInput, NeighborhoodUncheckedUpdateInput>
  }

  /**
   * Neighborhood delete
   */
  export type NeighborhoodDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
    /**
     * Filter which Neighborhood to delete.
     */
    where: NeighborhoodWhereUniqueInput
  }

  /**
   * Neighborhood deleteMany
   */
  export type NeighborhoodDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Neighborhoods to delete
     */
    where?: NeighborhoodWhereInput
    /**
     * Limit how many Neighborhoods to delete.
     */
    limit?: number
  }

  /**
   * Neighborhood.grouBuys
   */
  export type Neighborhood$grouBuysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    where?: GroupBuyWhereInput
    orderBy?: GroupBuyOrderByWithRelationInput | GroupBuyOrderByWithRelationInput[]
    cursor?: GroupBuyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyScalarFieldEnum | GroupBuyScalarFieldEnum[]
  }

  /**
   * Neighborhood.shares
   */
  export type Neighborhood$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    where?: ShareWhereInput
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * Neighborhood.users
   */
  export type Neighborhood$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Neighborhood without action
   */
  export type NeighborhoodDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Neighborhood
     */
    select?: NeighborhoodSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Neighborhood
     */
    omit?: NeighborhoodOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NeighborhoodInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    neighborhoodId: number | null
    shareScore: number | null
    publicId: number | null
  }

  export type UserSumAggregateOutputType = {
    neighborhoodId: number | null
    shareScore: number | null
    publicId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    neighborhoodId: number | null
    email: string | null
    nickname: string | null
    profileUrl: string | null
    address: string | null
    createdAt: Date | null
    shareScore: number | null
    publicId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    neighborhoodId: number | null
    email: string | null
    nickname: string | null
    profileUrl: string | null
    address: string | null
    createdAt: Date | null
    shareScore: number | null
    publicId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    neighborhoodId: number
    email: number
    nickname: number
    profileUrl: number
    address: number
    createdAt: number
    shareScore: number
    publicId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    neighborhoodId?: true
    shareScore?: true
    publicId?: true
  }

  export type UserSumAggregateInputType = {
    neighborhoodId?: true
    shareScore?: true
    publicId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    neighborhoodId?: true
    email?: true
    nickname?: true
    profileUrl?: true
    address?: true
    createdAt?: true
    shareScore?: true
    publicId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    neighborhoodId?: true
    email?: true
    nickname?: true
    profileUrl?: true
    address?: true
    createdAt?: true
    shareScore?: true
    publicId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    neighborhoodId?: true
    email?: true
    nickname?: true
    profileUrl?: true
    address?: true
    createdAt?: true
    shareScore?: true
    publicId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl: string | null
    address: string
    createdAt: Date
    shareScore: number
    publicId: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    neighborhoodId?: boolean
    email?: boolean
    nickname?: boolean
    profileUrl?: boolean
    address?: boolean
    createdAt?: boolean
    shareScore?: boolean
    publicId?: boolean
    grouBuys?: boolean | User$grouBuysArgs<ExtArgs>
    groupBuyChatMessages?: boolean | User$groupBuyChatMessagesArgs<ExtArgs>
    groupBuyChatParticipants?: boolean | User$groupBuyChatParticipantsArgs<ExtArgs>
    groupBuyParticipants?: boolean | User$groupBuyParticipantsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    receivedReviews?: boolean | User$receivedReviewsArgs<ExtArgs>
    writtenReviews?: boolean | User$writtenReviewsArgs<ExtArgs>
    ownedShares?: boolean | User$ownedSharesArgs<ExtArgs>
    receivedShares?: boolean | User$receivedSharesArgs<ExtArgs>
    shareChatMessages?: boolean | User$shareChatMessagesArgs<ExtArgs>
    shareChatParticipants?: boolean | User$shareChatParticipantsArgs<ExtArgs>
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    neighborhoodId?: boolean
    email?: boolean
    nickname?: boolean
    profileUrl?: boolean
    address?: boolean
    createdAt?: boolean
    shareScore?: boolean
    publicId?: boolean
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    neighborhoodId?: boolean
    email?: boolean
    nickname?: boolean
    profileUrl?: boolean
    address?: boolean
    createdAt?: boolean
    shareScore?: boolean
    publicId?: boolean
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    neighborhoodId?: boolean
    email?: boolean
    nickname?: boolean
    profileUrl?: boolean
    address?: boolean
    createdAt?: boolean
    shareScore?: boolean
    publicId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "neighborhoodId" | "email" | "nickname" | "profileUrl" | "address" | "createdAt" | "shareScore" | "publicId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    grouBuys?: boolean | User$grouBuysArgs<ExtArgs>
    groupBuyChatMessages?: boolean | User$groupBuyChatMessagesArgs<ExtArgs>
    groupBuyChatParticipants?: boolean | User$groupBuyChatParticipantsArgs<ExtArgs>
    groupBuyParticipants?: boolean | User$groupBuyParticipantsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    receivedReviews?: boolean | User$receivedReviewsArgs<ExtArgs>
    writtenReviews?: boolean | User$writtenReviewsArgs<ExtArgs>
    ownedShares?: boolean | User$ownedSharesArgs<ExtArgs>
    receivedShares?: boolean | User$receivedSharesArgs<ExtArgs>
    shareChatMessages?: boolean | User$shareChatMessagesArgs<ExtArgs>
    shareChatParticipants?: boolean | User$shareChatParticipantsArgs<ExtArgs>
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      grouBuys: Prisma.$GroupBuyPayload<ExtArgs>[]
      groupBuyChatMessages: Prisma.$GroupBuyChatMessagePayload<ExtArgs>[]
      groupBuyChatParticipants: Prisma.$GroupBuyChatParticipantPayload<ExtArgs>[]
      groupBuyParticipants: Prisma.$GroupBuyParticipantPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      receivedReviews: Prisma.$ReviewPayload<ExtArgs>[]
      writtenReviews: Prisma.$ReviewPayload<ExtArgs>[]
      ownedShares: Prisma.$SharePayload<ExtArgs>[]
      receivedShares: Prisma.$SharePayload<ExtArgs>[]
      shareChatMessages: Prisma.$ShareChatMessagePayload<ExtArgs>[]
      shareChatParticipants: Prisma.$ShareChatParticipantPayload<ExtArgs>[]
      neighborhood: Prisma.$NeighborhoodPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      neighborhoodId: number
      email: string
      nickname: string
      profileUrl: string | null
      address: string
      createdAt: Date
      shareScore: number
      publicId: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    grouBuys<T extends User$grouBuysArgs<ExtArgs> = {}>(args?: Subset<T, User$grouBuysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    groupBuyChatMessages<T extends User$groupBuyChatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$groupBuyChatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    groupBuyChatParticipants<T extends User$groupBuyChatParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, User$groupBuyChatParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    groupBuyParticipants<T extends User$groupBuyParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, User$groupBuyParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedReviews<T extends User$receivedReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    writtenReviews<T extends User$writtenReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$writtenReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ownedShares<T extends User$ownedSharesArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedSharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedShares<T extends User$receivedSharesArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedSharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shareChatMessages<T extends User$shareChatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$shareChatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    shareChatParticipants<T extends User$shareChatParticipantsArgs<ExtArgs> = {}>(args?: Subset<T, User$shareChatParticipantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    neighborhood<T extends NeighborhoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NeighborhoodDefaultArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly neighborhoodId: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly nickname: FieldRef<"User", 'String'>
    readonly profileUrl: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly shareScore: FieldRef<"User", 'Int'>
    readonly publicId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.grouBuys
   */
  export type User$grouBuysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    where?: GroupBuyWhereInput
    orderBy?: GroupBuyOrderByWithRelationInput | GroupBuyOrderByWithRelationInput[]
    cursor?: GroupBuyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyScalarFieldEnum | GroupBuyScalarFieldEnum[]
  }

  /**
   * User.groupBuyChatMessages
   */
  export type User$groupBuyChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    where?: GroupBuyChatMessageWhereInput
    orderBy?: GroupBuyChatMessageOrderByWithRelationInput | GroupBuyChatMessageOrderByWithRelationInput[]
    cursor?: GroupBuyChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyChatMessageScalarFieldEnum | GroupBuyChatMessageScalarFieldEnum[]
  }

  /**
   * User.groupBuyChatParticipants
   */
  export type User$groupBuyChatParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    where?: GroupBuyChatParticipantWhereInput
    orderBy?: GroupBuyChatParticipantOrderByWithRelationInput | GroupBuyChatParticipantOrderByWithRelationInput[]
    cursor?: GroupBuyChatParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyChatParticipantScalarFieldEnum | GroupBuyChatParticipantScalarFieldEnum[]
  }

  /**
   * User.groupBuyParticipants
   */
  export type User$groupBuyParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    where?: GroupBuyParticipantWhereInput
    orderBy?: GroupBuyParticipantOrderByWithRelationInput | GroupBuyParticipantOrderByWithRelationInput[]
    cursor?: GroupBuyParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyParticipantScalarFieldEnum | GroupBuyParticipantScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.receivedReviews
   */
  export type User$receivedReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.writtenReviews
   */
  export type User$writtenReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User.ownedShares
   */
  export type User$ownedSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    where?: ShareWhereInput
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * User.receivedShares
   */
  export type User$receivedSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    where?: ShareWhereInput
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * User.shareChatMessages
   */
  export type User$shareChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    where?: ShareChatMessageWhereInput
    orderBy?: ShareChatMessageOrderByWithRelationInput | ShareChatMessageOrderByWithRelationInput[]
    cursor?: ShareChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareChatMessageScalarFieldEnum | ShareChatMessageScalarFieldEnum[]
  }

  /**
   * User.shareChatParticipants
   */
  export type User$shareChatParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    where?: ShareChatParticipantWhereInput
    orderBy?: ShareChatParticipantOrderByWithRelationInput | ShareChatParticipantOrderByWithRelationInput[]
    cursor?: ShareChatParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareChatParticipantScalarFieldEnum | ShareChatParticipantScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model GroupBuy
   */

  export type AggregateGroupBuy = {
    _count: GroupBuyCountAggregateOutputType | null
    _avg: GroupBuyAvgAggregateOutputType | null
    _sum: GroupBuySumAggregateOutputType | null
    _min: GroupBuyMinAggregateOutputType | null
    _max: GroupBuyMaxAggregateOutputType | null
  }

  export type GroupBuyAvgAggregateOutputType = {
    id: number | null
    neighborhoodId: number | null
    capacity: number | null
    status: number | null
  }

  export type GroupBuySumAggregateOutputType = {
    id: number | null
    neighborhoodId: number | null
    capacity: number | null
    status: number | null
  }

  export type GroupBuyMinAggregateOutputType = {
    id: number | null
    organizerId: string | null
    neighborhoodId: number | null
    title: string | null
    capacity: number | null
    desiredItem: string | null
    meetingDate: Date | null
    createdAt: Date | null
    locationAddress: string | null
    locationNote: string | null
    description: string | null
    status: number | null
  }

  export type GroupBuyMaxAggregateOutputType = {
    id: number | null
    organizerId: string | null
    neighborhoodId: number | null
    title: string | null
    capacity: number | null
    desiredItem: string | null
    meetingDate: Date | null
    createdAt: Date | null
    locationAddress: string | null
    locationNote: string | null
    description: string | null
    status: number | null
  }

  export type GroupBuyCountAggregateOutputType = {
    id: number
    organizerId: number
    neighborhoodId: number
    title: number
    capacity: number
    desiredItem: number
    meetingDate: number
    createdAt: number
    locationAddress: number
    locationNote: number
    description: number
    status: number
    _all: number
  }


  export type GroupBuyAvgAggregateInputType = {
    id?: true
    neighborhoodId?: true
    capacity?: true
    status?: true
  }

  export type GroupBuySumAggregateInputType = {
    id?: true
    neighborhoodId?: true
    capacity?: true
    status?: true
  }

  export type GroupBuyMinAggregateInputType = {
    id?: true
    organizerId?: true
    neighborhoodId?: true
    title?: true
    capacity?: true
    desiredItem?: true
    meetingDate?: true
    createdAt?: true
    locationAddress?: true
    locationNote?: true
    description?: true
    status?: true
  }

  export type GroupBuyMaxAggregateInputType = {
    id?: true
    organizerId?: true
    neighborhoodId?: true
    title?: true
    capacity?: true
    desiredItem?: true
    meetingDate?: true
    createdAt?: true
    locationAddress?: true
    locationNote?: true
    description?: true
    status?: true
  }

  export type GroupBuyCountAggregateInputType = {
    id?: true
    organizerId?: true
    neighborhoodId?: true
    title?: true
    capacity?: true
    desiredItem?: true
    meetingDate?: true
    createdAt?: true
    locationAddress?: true
    locationNote?: true
    description?: true
    status?: true
    _all?: true
  }

  export type GroupBuyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuy to aggregate.
     */
    where?: GroupBuyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuys to fetch.
     */
    orderBy?: GroupBuyOrderByWithRelationInput | GroupBuyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupBuyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupBuys
    **/
    _count?: true | GroupBuyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupBuyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupBuySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupBuyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupBuyMaxAggregateInputType
  }

  export type GetGroupBuyAggregateType<T extends GroupBuyAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupBuy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupBuy[P]>
      : GetScalarType<T[P], AggregateGroupBuy[P]>
  }




  export type GroupBuyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyWhereInput
    orderBy?: GroupBuyOrderByWithAggregationInput | GroupBuyOrderByWithAggregationInput[]
    by: GroupBuyScalarFieldEnum[] | GroupBuyScalarFieldEnum
    having?: GroupBuyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupBuyCountAggregateInputType | true
    _avg?: GroupBuyAvgAggregateInputType
    _sum?: GroupBuySumAggregateInputType
    _min?: GroupBuyMinAggregateInputType
    _max?: GroupBuyMaxAggregateInputType
  }

  export type GroupBuyGroupByOutputType = {
    id: number
    organizerId: string
    neighborhoodId: number
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date
    createdAt: Date
    locationAddress: string
    locationNote: string
    description: string
    status: number
    _count: GroupBuyCountAggregateOutputType | null
    _avg: GroupBuyAvgAggregateOutputType | null
    _sum: GroupBuySumAggregateOutputType | null
    _min: GroupBuyMinAggregateOutputType | null
    _max: GroupBuyMaxAggregateOutputType | null
  }

  type GetGroupBuyGroupByPayload<T extends GroupBuyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupBuyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupBuyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupBuyGroupByOutputType[P]>
            : GetScalarType<T[P], GroupBuyGroupByOutputType[P]>
        }
      >
    >


  export type GroupBuySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizerId?: boolean
    neighborhoodId?: boolean
    title?: boolean
    capacity?: boolean
    desiredItem?: boolean
    meetingDate?: boolean
    createdAt?: boolean
    locationAddress?: boolean
    locationNote?: boolean
    description?: boolean
    status?: boolean
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    chats?: boolean | GroupBuy$chatsArgs<ExtArgs>
    images?: boolean | GroupBuy$imagesArgs<ExtArgs>
    participants?: boolean | GroupBuy$participantsArgs<ExtArgs>
    _count?: boolean | GroupBuyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuy"]>

  export type GroupBuySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizerId?: boolean
    neighborhoodId?: boolean
    title?: boolean
    capacity?: boolean
    desiredItem?: boolean
    meetingDate?: boolean
    createdAt?: boolean
    locationAddress?: boolean
    locationNote?: boolean
    description?: boolean
    status?: boolean
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuy"]>

  export type GroupBuySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizerId?: boolean
    neighborhoodId?: boolean
    title?: boolean
    capacity?: boolean
    desiredItem?: boolean
    meetingDate?: boolean
    createdAt?: boolean
    locationAddress?: boolean
    locationNote?: boolean
    description?: boolean
    status?: boolean
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuy"]>

  export type GroupBuySelectScalar = {
    id?: boolean
    organizerId?: boolean
    neighborhoodId?: boolean
    title?: boolean
    capacity?: boolean
    desiredItem?: boolean
    meetingDate?: boolean
    createdAt?: boolean
    locationAddress?: boolean
    locationNote?: boolean
    description?: boolean
    status?: boolean
  }

  export type GroupBuyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "organizerId" | "neighborhoodId" | "title" | "capacity" | "desiredItem" | "meetingDate" | "createdAt" | "locationAddress" | "locationNote" | "description" | "status", ExtArgs["result"]["groupBuy"]>
  export type GroupBuyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    chats?: boolean | GroupBuy$chatsArgs<ExtArgs>
    images?: boolean | GroupBuy$imagesArgs<ExtArgs>
    participants?: boolean | GroupBuy$participantsArgs<ExtArgs>
    _count?: boolean | GroupBuyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GroupBuyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GroupBuyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    organizer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GroupBuyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupBuy"
    objects: {
      neighborhood: Prisma.$NeighborhoodPayload<ExtArgs>
      organizer: Prisma.$UserPayload<ExtArgs>
      chats: Prisma.$GroupBuyChatPayload<ExtArgs>[]
      images: Prisma.$GroupBuyImagePayload<ExtArgs>[]
      participants: Prisma.$GroupBuyParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      organizerId: string
      neighborhoodId: number
      title: string
      capacity: number
      desiredItem: string
      meetingDate: Date
      createdAt: Date
      locationAddress: string
      locationNote: string
      description: string
      status: number
    }, ExtArgs["result"]["groupBuy"]>
    composites: {}
  }

  type GroupBuyGetPayload<S extends boolean | null | undefined | GroupBuyDefaultArgs> = $Result.GetResult<Prisma.$GroupBuyPayload, S>

  type GroupBuyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupBuyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupBuyCountAggregateInputType | true
    }

  export interface GroupBuyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupBuy'], meta: { name: 'GroupBuy' } }
    /**
     * Find zero or one GroupBuy that matches the filter.
     * @param {GroupBuyFindUniqueArgs} args - Arguments to find a GroupBuy
     * @example
     * // Get one GroupBuy
     * const groupBuy = await prisma.groupBuy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupBuyFindUniqueArgs>(args: SelectSubset<T, GroupBuyFindUniqueArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GroupBuy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupBuyFindUniqueOrThrowArgs} args - Arguments to find a GroupBuy
     * @example
     * // Get one GroupBuy
     * const groupBuy = await prisma.groupBuy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupBuyFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupBuyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyFindFirstArgs} args - Arguments to find a GroupBuy
     * @example
     * // Get one GroupBuy
     * const groupBuy = await prisma.groupBuy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupBuyFindFirstArgs>(args?: SelectSubset<T, GroupBuyFindFirstArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyFindFirstOrThrowArgs} args - Arguments to find a GroupBuy
     * @example
     * // Get one GroupBuy
     * const groupBuy = await prisma.groupBuy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupBuyFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupBuyFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GroupBuys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupBuys
     * const groupBuys = await prisma.groupBuy.findMany()
     * 
     * // Get first 10 GroupBuys
     * const groupBuys = await prisma.groupBuy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupBuyWithIdOnly = await prisma.groupBuy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupBuyFindManyArgs>(args?: SelectSubset<T, GroupBuyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GroupBuy.
     * @param {GroupBuyCreateArgs} args - Arguments to create a GroupBuy.
     * @example
     * // Create one GroupBuy
     * const GroupBuy = await prisma.groupBuy.create({
     *   data: {
     *     // ... data to create a GroupBuy
     *   }
     * })
     * 
     */
    create<T extends GroupBuyCreateArgs>(args: SelectSubset<T, GroupBuyCreateArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GroupBuys.
     * @param {GroupBuyCreateManyArgs} args - Arguments to create many GroupBuys.
     * @example
     * // Create many GroupBuys
     * const groupBuy = await prisma.groupBuy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupBuyCreateManyArgs>(args?: SelectSubset<T, GroupBuyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupBuys and returns the data saved in the database.
     * @param {GroupBuyCreateManyAndReturnArgs} args - Arguments to create many GroupBuys.
     * @example
     * // Create many GroupBuys
     * const groupBuy = await prisma.groupBuy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupBuys and only return the `id`
     * const groupBuyWithIdOnly = await prisma.groupBuy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupBuyCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupBuyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GroupBuy.
     * @param {GroupBuyDeleteArgs} args - Arguments to delete one GroupBuy.
     * @example
     * // Delete one GroupBuy
     * const GroupBuy = await prisma.groupBuy.delete({
     *   where: {
     *     // ... filter to delete one GroupBuy
     *   }
     * })
     * 
     */
    delete<T extends GroupBuyDeleteArgs>(args: SelectSubset<T, GroupBuyDeleteArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GroupBuy.
     * @param {GroupBuyUpdateArgs} args - Arguments to update one GroupBuy.
     * @example
     * // Update one GroupBuy
     * const groupBuy = await prisma.groupBuy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupBuyUpdateArgs>(args: SelectSubset<T, GroupBuyUpdateArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GroupBuys.
     * @param {GroupBuyDeleteManyArgs} args - Arguments to filter GroupBuys to delete.
     * @example
     * // Delete a few GroupBuys
     * const { count } = await prisma.groupBuy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupBuyDeleteManyArgs>(args?: SelectSubset<T, GroupBuyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupBuys
     * const groupBuy = await prisma.groupBuy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupBuyUpdateManyArgs>(args: SelectSubset<T, GroupBuyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuys and returns the data updated in the database.
     * @param {GroupBuyUpdateManyAndReturnArgs} args - Arguments to update many GroupBuys.
     * @example
     * // Update many GroupBuys
     * const groupBuy = await prisma.groupBuy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GroupBuys and only return the `id`
     * const groupBuyWithIdOnly = await prisma.groupBuy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupBuyUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupBuyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GroupBuy.
     * @param {GroupBuyUpsertArgs} args - Arguments to update or create a GroupBuy.
     * @example
     * // Update or create a GroupBuy
     * const groupBuy = await prisma.groupBuy.upsert({
     *   create: {
     *     // ... data to create a GroupBuy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupBuy we want to update
     *   }
     * })
     */
    upsert<T extends GroupBuyUpsertArgs>(args: SelectSubset<T, GroupBuyUpsertArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GroupBuys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyCountArgs} args - Arguments to filter GroupBuys to count.
     * @example
     * // Count the number of GroupBuys
     * const count = await prisma.groupBuy.count({
     *   where: {
     *     // ... the filter for the GroupBuys we want to count
     *   }
     * })
    **/
    count<T extends GroupBuyCountArgs>(
      args?: Subset<T, GroupBuyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupBuyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupBuy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupBuyAggregateArgs>(args: Subset<T, GroupBuyAggregateArgs>): Prisma.PrismaPromise<GetGroupBuyAggregateType<T>>

    /**
     * Group by GroupBuy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupBuyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupBuyGroupByArgs['orderBy'] }
        : { orderBy?: GroupBuyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupBuyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupBuyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupBuy model
   */
  readonly fields: GroupBuyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupBuy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupBuyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    neighborhood<T extends NeighborhoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NeighborhoodDefaultArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    organizer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chats<T extends GroupBuy$chatsArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuy$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends GroupBuy$imagesArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuy$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participants<T extends GroupBuy$participantsArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuy$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupBuy model
   */
  interface GroupBuyFieldRefs {
    readonly id: FieldRef<"GroupBuy", 'Int'>
    readonly organizerId: FieldRef<"GroupBuy", 'String'>
    readonly neighborhoodId: FieldRef<"GroupBuy", 'Int'>
    readonly title: FieldRef<"GroupBuy", 'String'>
    readonly capacity: FieldRef<"GroupBuy", 'Int'>
    readonly desiredItem: FieldRef<"GroupBuy", 'String'>
    readonly meetingDate: FieldRef<"GroupBuy", 'DateTime'>
    readonly createdAt: FieldRef<"GroupBuy", 'DateTime'>
    readonly locationAddress: FieldRef<"GroupBuy", 'String'>
    readonly locationNote: FieldRef<"GroupBuy", 'String'>
    readonly description: FieldRef<"GroupBuy", 'String'>
    readonly status: FieldRef<"GroupBuy", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * GroupBuy findUnique
   */
  export type GroupBuyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuy to fetch.
     */
    where: GroupBuyWhereUniqueInput
  }

  /**
   * GroupBuy findUniqueOrThrow
   */
  export type GroupBuyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuy to fetch.
     */
    where: GroupBuyWhereUniqueInput
  }

  /**
   * GroupBuy findFirst
   */
  export type GroupBuyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuy to fetch.
     */
    where?: GroupBuyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuys to fetch.
     */
    orderBy?: GroupBuyOrderByWithRelationInput | GroupBuyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuys.
     */
    cursor?: GroupBuyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuys.
     */
    distinct?: GroupBuyScalarFieldEnum | GroupBuyScalarFieldEnum[]
  }

  /**
   * GroupBuy findFirstOrThrow
   */
  export type GroupBuyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuy to fetch.
     */
    where?: GroupBuyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuys to fetch.
     */
    orderBy?: GroupBuyOrderByWithRelationInput | GroupBuyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuys.
     */
    cursor?: GroupBuyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuys.
     */
    distinct?: GroupBuyScalarFieldEnum | GroupBuyScalarFieldEnum[]
  }

  /**
   * GroupBuy findMany
   */
  export type GroupBuyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuys to fetch.
     */
    where?: GroupBuyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuys to fetch.
     */
    orderBy?: GroupBuyOrderByWithRelationInput | GroupBuyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupBuys.
     */
    cursor?: GroupBuyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuys.
     */
    skip?: number
    distinct?: GroupBuyScalarFieldEnum | GroupBuyScalarFieldEnum[]
  }

  /**
   * GroupBuy create
   */
  export type GroupBuyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupBuy.
     */
    data: XOR<GroupBuyCreateInput, GroupBuyUncheckedCreateInput>
  }

  /**
   * GroupBuy createMany
   */
  export type GroupBuyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupBuys.
     */
    data: GroupBuyCreateManyInput | GroupBuyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupBuy createManyAndReturn
   */
  export type GroupBuyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * The data used to create many GroupBuys.
     */
    data: GroupBuyCreateManyInput | GroupBuyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuy update
   */
  export type GroupBuyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupBuy.
     */
    data: XOR<GroupBuyUpdateInput, GroupBuyUncheckedUpdateInput>
    /**
     * Choose, which GroupBuy to update.
     */
    where: GroupBuyWhereUniqueInput
  }

  /**
   * GroupBuy updateMany
   */
  export type GroupBuyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupBuys.
     */
    data: XOR<GroupBuyUpdateManyMutationInput, GroupBuyUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuys to update
     */
    where?: GroupBuyWhereInput
    /**
     * Limit how many GroupBuys to update.
     */
    limit?: number
  }

  /**
   * GroupBuy updateManyAndReturn
   */
  export type GroupBuyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * The data used to update GroupBuys.
     */
    data: XOR<GroupBuyUpdateManyMutationInput, GroupBuyUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuys to update
     */
    where?: GroupBuyWhereInput
    /**
     * Limit how many GroupBuys to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuy upsert
   */
  export type GroupBuyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupBuy to update in case it exists.
     */
    where: GroupBuyWhereUniqueInput
    /**
     * In case the GroupBuy found by the `where` argument doesn't exist, create a new GroupBuy with this data.
     */
    create: XOR<GroupBuyCreateInput, GroupBuyUncheckedCreateInput>
    /**
     * In case the GroupBuy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupBuyUpdateInput, GroupBuyUncheckedUpdateInput>
  }

  /**
   * GroupBuy delete
   */
  export type GroupBuyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
    /**
     * Filter which GroupBuy to delete.
     */
    where: GroupBuyWhereUniqueInput
  }

  /**
   * GroupBuy deleteMany
   */
  export type GroupBuyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuys to delete
     */
    where?: GroupBuyWhereInput
    /**
     * Limit how many GroupBuys to delete.
     */
    limit?: number
  }

  /**
   * GroupBuy.chats
   */
  export type GroupBuy$chatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    where?: GroupBuyChatWhereInput
    orderBy?: GroupBuyChatOrderByWithRelationInput | GroupBuyChatOrderByWithRelationInput[]
    cursor?: GroupBuyChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyChatScalarFieldEnum | GroupBuyChatScalarFieldEnum[]
  }

  /**
   * GroupBuy.images
   */
  export type GroupBuy$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    where?: GroupBuyImageWhereInput
    orderBy?: GroupBuyImageOrderByWithRelationInput | GroupBuyImageOrderByWithRelationInput[]
    cursor?: GroupBuyImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyImageScalarFieldEnum | GroupBuyImageScalarFieldEnum[]
  }

  /**
   * GroupBuy.participants
   */
  export type GroupBuy$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    where?: GroupBuyParticipantWhereInput
    orderBy?: GroupBuyParticipantOrderByWithRelationInput | GroupBuyParticipantOrderByWithRelationInput[]
    cursor?: GroupBuyParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyParticipantScalarFieldEnum | GroupBuyParticipantScalarFieldEnum[]
  }

  /**
   * GroupBuy without action
   */
  export type GroupBuyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuy
     */
    select?: GroupBuySelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuy
     */
    omit?: GroupBuyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyInclude<ExtArgs> | null
  }


  /**
   * Model GroupBuyParticipant
   */

  export type AggregateGroupBuyParticipant = {
    _count: GroupBuyParticipantCountAggregateOutputType | null
    _avg: GroupBuyParticipantAvgAggregateOutputType | null
    _sum: GroupBuyParticipantSumAggregateOutputType | null
    _min: GroupBuyParticipantMinAggregateOutputType | null
    _max: GroupBuyParticipantMaxAggregateOutputType | null
  }

  export type GroupBuyParticipantAvgAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
  }

  export type GroupBuyParticipantSumAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
  }

  export type GroupBuyParticipantMinAggregateOutputType = {
    id: number | null
    userId: string | null
    groupBuyId: number | null
    createdAt: Date | null
  }

  export type GroupBuyParticipantMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    groupBuyId: number | null
    createdAt: Date | null
  }

  export type GroupBuyParticipantCountAggregateOutputType = {
    id: number
    userId: number
    groupBuyId: number
    createdAt: number
    _all: number
  }


  export type GroupBuyParticipantAvgAggregateInputType = {
    id?: true
    groupBuyId?: true
  }

  export type GroupBuyParticipantSumAggregateInputType = {
    id?: true
    groupBuyId?: true
  }

  export type GroupBuyParticipantMinAggregateInputType = {
    id?: true
    userId?: true
    groupBuyId?: true
    createdAt?: true
  }

  export type GroupBuyParticipantMaxAggregateInputType = {
    id?: true
    userId?: true
    groupBuyId?: true
    createdAt?: true
  }

  export type GroupBuyParticipantCountAggregateInputType = {
    id?: true
    userId?: true
    groupBuyId?: true
    createdAt?: true
    _all?: true
  }

  export type GroupBuyParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyParticipant to aggregate.
     */
    where?: GroupBuyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyParticipants to fetch.
     */
    orderBy?: GroupBuyParticipantOrderByWithRelationInput | GroupBuyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupBuyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupBuyParticipants
    **/
    _count?: true | GroupBuyParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupBuyParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupBuyParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupBuyParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupBuyParticipantMaxAggregateInputType
  }

  export type GetGroupBuyParticipantAggregateType<T extends GroupBuyParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupBuyParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupBuyParticipant[P]>
      : GetScalarType<T[P], AggregateGroupBuyParticipant[P]>
  }




  export type GroupBuyParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyParticipantWhereInput
    orderBy?: GroupBuyParticipantOrderByWithAggregationInput | GroupBuyParticipantOrderByWithAggregationInput[]
    by: GroupBuyParticipantScalarFieldEnum[] | GroupBuyParticipantScalarFieldEnum
    having?: GroupBuyParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupBuyParticipantCountAggregateInputType | true
    _avg?: GroupBuyParticipantAvgAggregateInputType
    _sum?: GroupBuyParticipantSumAggregateInputType
    _min?: GroupBuyParticipantMinAggregateInputType
    _max?: GroupBuyParticipantMaxAggregateInputType
  }

  export type GroupBuyParticipantGroupByOutputType = {
    id: number
    userId: string
    groupBuyId: number
    createdAt: Date
    _count: GroupBuyParticipantCountAggregateOutputType | null
    _avg: GroupBuyParticipantAvgAggregateOutputType | null
    _sum: GroupBuyParticipantSumAggregateOutputType | null
    _min: GroupBuyParticipantMinAggregateOutputType | null
    _max: GroupBuyParticipantMaxAggregateOutputType | null
  }

  type GetGroupBuyParticipantGroupByPayload<T extends GroupBuyParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupBuyParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupBuyParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupBuyParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], GroupBuyParticipantGroupByOutputType[P]>
        }
      >
    >


  export type GroupBuyParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupBuyId?: boolean
    createdAt?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyParticipant"]>

  export type GroupBuyParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupBuyId?: boolean
    createdAt?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyParticipant"]>

  export type GroupBuyParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    groupBuyId?: boolean
    createdAt?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyParticipant"]>

  export type GroupBuyParticipantSelectScalar = {
    id?: boolean
    userId?: boolean
    groupBuyId?: boolean
    createdAt?: boolean
  }

  export type GroupBuyParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "groupBuyId" | "createdAt", ExtArgs["result"]["groupBuyParticipant"]>
  export type GroupBuyParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GroupBuyParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GroupBuyParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GroupBuyParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupBuyParticipant"
    objects: {
      groupBuy: Prisma.$GroupBuyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      groupBuyId: number
      createdAt: Date
    }, ExtArgs["result"]["groupBuyParticipant"]>
    composites: {}
  }

  type GroupBuyParticipantGetPayload<S extends boolean | null | undefined | GroupBuyParticipantDefaultArgs> = $Result.GetResult<Prisma.$GroupBuyParticipantPayload, S>

  type GroupBuyParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupBuyParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupBuyParticipantCountAggregateInputType | true
    }

  export interface GroupBuyParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupBuyParticipant'], meta: { name: 'GroupBuyParticipant' } }
    /**
     * Find zero or one GroupBuyParticipant that matches the filter.
     * @param {GroupBuyParticipantFindUniqueArgs} args - Arguments to find a GroupBuyParticipant
     * @example
     * // Get one GroupBuyParticipant
     * const groupBuyParticipant = await prisma.groupBuyParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupBuyParticipantFindUniqueArgs>(args: SelectSubset<T, GroupBuyParticipantFindUniqueArgs<ExtArgs>>): Prisma__GroupBuyParticipantClient<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GroupBuyParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupBuyParticipantFindUniqueOrThrowArgs} args - Arguments to find a GroupBuyParticipant
     * @example
     * // Get one GroupBuyParticipant
     * const groupBuyParticipant = await prisma.groupBuyParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupBuyParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupBuyParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupBuyParticipantClient<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyParticipantFindFirstArgs} args - Arguments to find a GroupBuyParticipant
     * @example
     * // Get one GroupBuyParticipant
     * const groupBuyParticipant = await prisma.groupBuyParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupBuyParticipantFindFirstArgs>(args?: SelectSubset<T, GroupBuyParticipantFindFirstArgs<ExtArgs>>): Prisma__GroupBuyParticipantClient<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyParticipantFindFirstOrThrowArgs} args - Arguments to find a GroupBuyParticipant
     * @example
     * // Get one GroupBuyParticipant
     * const groupBuyParticipant = await prisma.groupBuyParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupBuyParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupBuyParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupBuyParticipantClient<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GroupBuyParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupBuyParticipants
     * const groupBuyParticipants = await prisma.groupBuyParticipant.findMany()
     * 
     * // Get first 10 GroupBuyParticipants
     * const groupBuyParticipants = await prisma.groupBuyParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupBuyParticipantWithIdOnly = await prisma.groupBuyParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupBuyParticipantFindManyArgs>(args?: SelectSubset<T, GroupBuyParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GroupBuyParticipant.
     * @param {GroupBuyParticipantCreateArgs} args - Arguments to create a GroupBuyParticipant.
     * @example
     * // Create one GroupBuyParticipant
     * const GroupBuyParticipant = await prisma.groupBuyParticipant.create({
     *   data: {
     *     // ... data to create a GroupBuyParticipant
     *   }
     * })
     * 
     */
    create<T extends GroupBuyParticipantCreateArgs>(args: SelectSubset<T, GroupBuyParticipantCreateArgs<ExtArgs>>): Prisma__GroupBuyParticipantClient<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GroupBuyParticipants.
     * @param {GroupBuyParticipantCreateManyArgs} args - Arguments to create many GroupBuyParticipants.
     * @example
     * // Create many GroupBuyParticipants
     * const groupBuyParticipant = await prisma.groupBuyParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupBuyParticipantCreateManyArgs>(args?: SelectSubset<T, GroupBuyParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupBuyParticipants and returns the data saved in the database.
     * @param {GroupBuyParticipantCreateManyAndReturnArgs} args - Arguments to create many GroupBuyParticipants.
     * @example
     * // Create many GroupBuyParticipants
     * const groupBuyParticipant = await prisma.groupBuyParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupBuyParticipants and only return the `id`
     * const groupBuyParticipantWithIdOnly = await prisma.groupBuyParticipant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupBuyParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupBuyParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GroupBuyParticipant.
     * @param {GroupBuyParticipantDeleteArgs} args - Arguments to delete one GroupBuyParticipant.
     * @example
     * // Delete one GroupBuyParticipant
     * const GroupBuyParticipant = await prisma.groupBuyParticipant.delete({
     *   where: {
     *     // ... filter to delete one GroupBuyParticipant
     *   }
     * })
     * 
     */
    delete<T extends GroupBuyParticipantDeleteArgs>(args: SelectSubset<T, GroupBuyParticipantDeleteArgs<ExtArgs>>): Prisma__GroupBuyParticipantClient<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GroupBuyParticipant.
     * @param {GroupBuyParticipantUpdateArgs} args - Arguments to update one GroupBuyParticipant.
     * @example
     * // Update one GroupBuyParticipant
     * const groupBuyParticipant = await prisma.groupBuyParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupBuyParticipantUpdateArgs>(args: SelectSubset<T, GroupBuyParticipantUpdateArgs<ExtArgs>>): Prisma__GroupBuyParticipantClient<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GroupBuyParticipants.
     * @param {GroupBuyParticipantDeleteManyArgs} args - Arguments to filter GroupBuyParticipants to delete.
     * @example
     * // Delete a few GroupBuyParticipants
     * const { count } = await prisma.groupBuyParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupBuyParticipantDeleteManyArgs>(args?: SelectSubset<T, GroupBuyParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupBuyParticipants
     * const groupBuyParticipant = await prisma.groupBuyParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupBuyParticipantUpdateManyArgs>(args: SelectSubset<T, GroupBuyParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyParticipants and returns the data updated in the database.
     * @param {GroupBuyParticipantUpdateManyAndReturnArgs} args - Arguments to update many GroupBuyParticipants.
     * @example
     * // Update many GroupBuyParticipants
     * const groupBuyParticipant = await prisma.groupBuyParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GroupBuyParticipants and only return the `id`
     * const groupBuyParticipantWithIdOnly = await prisma.groupBuyParticipant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupBuyParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupBuyParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GroupBuyParticipant.
     * @param {GroupBuyParticipantUpsertArgs} args - Arguments to update or create a GroupBuyParticipant.
     * @example
     * // Update or create a GroupBuyParticipant
     * const groupBuyParticipant = await prisma.groupBuyParticipant.upsert({
     *   create: {
     *     // ... data to create a GroupBuyParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupBuyParticipant we want to update
     *   }
     * })
     */
    upsert<T extends GroupBuyParticipantUpsertArgs>(args: SelectSubset<T, GroupBuyParticipantUpsertArgs<ExtArgs>>): Prisma__GroupBuyParticipantClient<$Result.GetResult<Prisma.$GroupBuyParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GroupBuyParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyParticipantCountArgs} args - Arguments to filter GroupBuyParticipants to count.
     * @example
     * // Count the number of GroupBuyParticipants
     * const count = await prisma.groupBuyParticipant.count({
     *   where: {
     *     // ... the filter for the GroupBuyParticipants we want to count
     *   }
     * })
    **/
    count<T extends GroupBuyParticipantCountArgs>(
      args?: Subset<T, GroupBuyParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupBuyParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupBuyParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupBuyParticipantAggregateArgs>(args: Subset<T, GroupBuyParticipantAggregateArgs>): Prisma.PrismaPromise<GetGroupBuyParticipantAggregateType<T>>

    /**
     * Group by GroupBuyParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupBuyParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupBuyParticipantGroupByArgs['orderBy'] }
        : { orderBy?: GroupBuyParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupBuyParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupBuyParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupBuyParticipant model
   */
  readonly fields: GroupBuyParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupBuyParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupBuyParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    groupBuy<T extends GroupBuyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuyDefaultArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupBuyParticipant model
   */
  interface GroupBuyParticipantFieldRefs {
    readonly id: FieldRef<"GroupBuyParticipant", 'Int'>
    readonly userId: FieldRef<"GroupBuyParticipant", 'String'>
    readonly groupBuyId: FieldRef<"GroupBuyParticipant", 'Int'>
    readonly createdAt: FieldRef<"GroupBuyParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GroupBuyParticipant findUnique
   */
  export type GroupBuyParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyParticipant to fetch.
     */
    where: GroupBuyParticipantWhereUniqueInput
  }

  /**
   * GroupBuyParticipant findUniqueOrThrow
   */
  export type GroupBuyParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyParticipant to fetch.
     */
    where: GroupBuyParticipantWhereUniqueInput
  }

  /**
   * GroupBuyParticipant findFirst
   */
  export type GroupBuyParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyParticipant to fetch.
     */
    where?: GroupBuyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyParticipants to fetch.
     */
    orderBy?: GroupBuyParticipantOrderByWithRelationInput | GroupBuyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyParticipants.
     */
    cursor?: GroupBuyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyParticipants.
     */
    distinct?: GroupBuyParticipantScalarFieldEnum | GroupBuyParticipantScalarFieldEnum[]
  }

  /**
   * GroupBuyParticipant findFirstOrThrow
   */
  export type GroupBuyParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyParticipant to fetch.
     */
    where?: GroupBuyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyParticipants to fetch.
     */
    orderBy?: GroupBuyParticipantOrderByWithRelationInput | GroupBuyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyParticipants.
     */
    cursor?: GroupBuyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyParticipants.
     */
    distinct?: GroupBuyParticipantScalarFieldEnum | GroupBuyParticipantScalarFieldEnum[]
  }

  /**
   * GroupBuyParticipant findMany
   */
  export type GroupBuyParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyParticipants to fetch.
     */
    where?: GroupBuyParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyParticipants to fetch.
     */
    orderBy?: GroupBuyParticipantOrderByWithRelationInput | GroupBuyParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupBuyParticipants.
     */
    cursor?: GroupBuyParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyParticipants.
     */
    skip?: number
    distinct?: GroupBuyParticipantScalarFieldEnum | GroupBuyParticipantScalarFieldEnum[]
  }

  /**
   * GroupBuyParticipant create
   */
  export type GroupBuyParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupBuyParticipant.
     */
    data: XOR<GroupBuyParticipantCreateInput, GroupBuyParticipantUncheckedCreateInput>
  }

  /**
   * GroupBuyParticipant createMany
   */
  export type GroupBuyParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupBuyParticipants.
     */
    data: GroupBuyParticipantCreateManyInput | GroupBuyParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupBuyParticipant createManyAndReturn
   */
  export type GroupBuyParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many GroupBuyParticipants.
     */
    data: GroupBuyParticipantCreateManyInput | GroupBuyParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyParticipant update
   */
  export type GroupBuyParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupBuyParticipant.
     */
    data: XOR<GroupBuyParticipantUpdateInput, GroupBuyParticipantUncheckedUpdateInput>
    /**
     * Choose, which GroupBuyParticipant to update.
     */
    where: GroupBuyParticipantWhereUniqueInput
  }

  /**
   * GroupBuyParticipant updateMany
   */
  export type GroupBuyParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupBuyParticipants.
     */
    data: XOR<GroupBuyParticipantUpdateManyMutationInput, GroupBuyParticipantUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyParticipants to update
     */
    where?: GroupBuyParticipantWhereInput
    /**
     * Limit how many GroupBuyParticipants to update.
     */
    limit?: number
  }

  /**
   * GroupBuyParticipant updateManyAndReturn
   */
  export type GroupBuyParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * The data used to update GroupBuyParticipants.
     */
    data: XOR<GroupBuyParticipantUpdateManyMutationInput, GroupBuyParticipantUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyParticipants to update
     */
    where?: GroupBuyParticipantWhereInput
    /**
     * Limit how many GroupBuyParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyParticipant upsert
   */
  export type GroupBuyParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupBuyParticipant to update in case it exists.
     */
    where: GroupBuyParticipantWhereUniqueInput
    /**
     * In case the GroupBuyParticipant found by the `where` argument doesn't exist, create a new GroupBuyParticipant with this data.
     */
    create: XOR<GroupBuyParticipantCreateInput, GroupBuyParticipantUncheckedCreateInput>
    /**
     * In case the GroupBuyParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupBuyParticipantUpdateInput, GroupBuyParticipantUncheckedUpdateInput>
  }

  /**
   * GroupBuyParticipant delete
   */
  export type GroupBuyParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
    /**
     * Filter which GroupBuyParticipant to delete.
     */
    where: GroupBuyParticipantWhereUniqueInput
  }

  /**
   * GroupBuyParticipant deleteMany
   */
  export type GroupBuyParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyParticipants to delete
     */
    where?: GroupBuyParticipantWhereInput
    /**
     * Limit how many GroupBuyParticipants to delete.
     */
    limit?: number
  }

  /**
   * GroupBuyParticipant without action
   */
  export type GroupBuyParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyParticipant
     */
    select?: GroupBuyParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyParticipant
     */
    omit?: GroupBuyParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyParticipantInclude<ExtArgs> | null
  }


  /**
   * Model GroupBuyImage
   */

  export type AggregateGroupBuyImage = {
    _count: GroupBuyImageCountAggregateOutputType | null
    _avg: GroupBuyImageAvgAggregateOutputType | null
    _sum: GroupBuyImageSumAggregateOutputType | null
    _min: GroupBuyImageMinAggregateOutputType | null
    _max: GroupBuyImageMaxAggregateOutputType | null
  }

  export type GroupBuyImageAvgAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
  }

  export type GroupBuyImageSumAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
  }

  export type GroupBuyImageMinAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
    url: string | null
  }

  export type GroupBuyImageMaxAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
    url: string | null
  }

  export type GroupBuyImageCountAggregateOutputType = {
    id: number
    groupBuyId: number
    url: number
    _all: number
  }


  export type GroupBuyImageAvgAggregateInputType = {
    id?: true
    groupBuyId?: true
  }

  export type GroupBuyImageSumAggregateInputType = {
    id?: true
    groupBuyId?: true
  }

  export type GroupBuyImageMinAggregateInputType = {
    id?: true
    groupBuyId?: true
    url?: true
  }

  export type GroupBuyImageMaxAggregateInputType = {
    id?: true
    groupBuyId?: true
    url?: true
  }

  export type GroupBuyImageCountAggregateInputType = {
    id?: true
    groupBuyId?: true
    url?: true
    _all?: true
  }

  export type GroupBuyImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyImage to aggregate.
     */
    where?: GroupBuyImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyImages to fetch.
     */
    orderBy?: GroupBuyImageOrderByWithRelationInput | GroupBuyImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupBuyImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupBuyImages
    **/
    _count?: true | GroupBuyImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupBuyImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupBuyImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupBuyImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupBuyImageMaxAggregateInputType
  }

  export type GetGroupBuyImageAggregateType<T extends GroupBuyImageAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupBuyImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupBuyImage[P]>
      : GetScalarType<T[P], AggregateGroupBuyImage[P]>
  }




  export type GroupBuyImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyImageWhereInput
    orderBy?: GroupBuyImageOrderByWithAggregationInput | GroupBuyImageOrderByWithAggregationInput[]
    by: GroupBuyImageScalarFieldEnum[] | GroupBuyImageScalarFieldEnum
    having?: GroupBuyImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupBuyImageCountAggregateInputType | true
    _avg?: GroupBuyImageAvgAggregateInputType
    _sum?: GroupBuyImageSumAggregateInputType
    _min?: GroupBuyImageMinAggregateInputType
    _max?: GroupBuyImageMaxAggregateInputType
  }

  export type GroupBuyImageGroupByOutputType = {
    id: number
    groupBuyId: number
    url: string
    _count: GroupBuyImageCountAggregateOutputType | null
    _avg: GroupBuyImageAvgAggregateOutputType | null
    _sum: GroupBuyImageSumAggregateOutputType | null
    _min: GroupBuyImageMinAggregateOutputType | null
    _max: GroupBuyImageMaxAggregateOutputType | null
  }

  type GetGroupBuyImageGroupByPayload<T extends GroupBuyImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupBuyImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupBuyImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupBuyImageGroupByOutputType[P]>
            : GetScalarType<T[P], GroupBuyImageGroupByOutputType[P]>
        }
      >
    >


  export type GroupBuyImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupBuyId?: boolean
    url?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyImage"]>

  export type GroupBuyImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupBuyId?: boolean
    url?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyImage"]>

  export type GroupBuyImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupBuyId?: boolean
    url?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyImage"]>

  export type GroupBuyImageSelectScalar = {
    id?: boolean
    groupBuyId?: boolean
    url?: boolean
  }

  export type GroupBuyImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "groupBuyId" | "url", ExtArgs["result"]["groupBuyImage"]>
  export type GroupBuyImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }
  export type GroupBuyImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }
  export type GroupBuyImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }

  export type $GroupBuyImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupBuyImage"
    objects: {
      groupBuy: Prisma.$GroupBuyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      groupBuyId: number
      url: string
    }, ExtArgs["result"]["groupBuyImage"]>
    composites: {}
  }

  type GroupBuyImageGetPayload<S extends boolean | null | undefined | GroupBuyImageDefaultArgs> = $Result.GetResult<Prisma.$GroupBuyImagePayload, S>

  type GroupBuyImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupBuyImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupBuyImageCountAggregateInputType | true
    }

  export interface GroupBuyImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupBuyImage'], meta: { name: 'GroupBuyImage' } }
    /**
     * Find zero or one GroupBuyImage that matches the filter.
     * @param {GroupBuyImageFindUniqueArgs} args - Arguments to find a GroupBuyImage
     * @example
     * // Get one GroupBuyImage
     * const groupBuyImage = await prisma.groupBuyImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupBuyImageFindUniqueArgs>(args: SelectSubset<T, GroupBuyImageFindUniqueArgs<ExtArgs>>): Prisma__GroupBuyImageClient<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GroupBuyImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupBuyImageFindUniqueOrThrowArgs} args - Arguments to find a GroupBuyImage
     * @example
     * // Get one GroupBuyImage
     * const groupBuyImage = await prisma.groupBuyImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupBuyImageFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupBuyImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupBuyImageClient<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyImageFindFirstArgs} args - Arguments to find a GroupBuyImage
     * @example
     * // Get one GroupBuyImage
     * const groupBuyImage = await prisma.groupBuyImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupBuyImageFindFirstArgs>(args?: SelectSubset<T, GroupBuyImageFindFirstArgs<ExtArgs>>): Prisma__GroupBuyImageClient<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyImageFindFirstOrThrowArgs} args - Arguments to find a GroupBuyImage
     * @example
     * // Get one GroupBuyImage
     * const groupBuyImage = await prisma.groupBuyImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupBuyImageFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupBuyImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupBuyImageClient<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GroupBuyImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupBuyImages
     * const groupBuyImages = await prisma.groupBuyImage.findMany()
     * 
     * // Get first 10 GroupBuyImages
     * const groupBuyImages = await prisma.groupBuyImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupBuyImageWithIdOnly = await prisma.groupBuyImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupBuyImageFindManyArgs>(args?: SelectSubset<T, GroupBuyImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GroupBuyImage.
     * @param {GroupBuyImageCreateArgs} args - Arguments to create a GroupBuyImage.
     * @example
     * // Create one GroupBuyImage
     * const GroupBuyImage = await prisma.groupBuyImage.create({
     *   data: {
     *     // ... data to create a GroupBuyImage
     *   }
     * })
     * 
     */
    create<T extends GroupBuyImageCreateArgs>(args: SelectSubset<T, GroupBuyImageCreateArgs<ExtArgs>>): Prisma__GroupBuyImageClient<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GroupBuyImages.
     * @param {GroupBuyImageCreateManyArgs} args - Arguments to create many GroupBuyImages.
     * @example
     * // Create many GroupBuyImages
     * const groupBuyImage = await prisma.groupBuyImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupBuyImageCreateManyArgs>(args?: SelectSubset<T, GroupBuyImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupBuyImages and returns the data saved in the database.
     * @param {GroupBuyImageCreateManyAndReturnArgs} args - Arguments to create many GroupBuyImages.
     * @example
     * // Create many GroupBuyImages
     * const groupBuyImage = await prisma.groupBuyImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupBuyImages and only return the `id`
     * const groupBuyImageWithIdOnly = await prisma.groupBuyImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupBuyImageCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupBuyImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GroupBuyImage.
     * @param {GroupBuyImageDeleteArgs} args - Arguments to delete one GroupBuyImage.
     * @example
     * // Delete one GroupBuyImage
     * const GroupBuyImage = await prisma.groupBuyImage.delete({
     *   where: {
     *     // ... filter to delete one GroupBuyImage
     *   }
     * })
     * 
     */
    delete<T extends GroupBuyImageDeleteArgs>(args: SelectSubset<T, GroupBuyImageDeleteArgs<ExtArgs>>): Prisma__GroupBuyImageClient<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GroupBuyImage.
     * @param {GroupBuyImageUpdateArgs} args - Arguments to update one GroupBuyImage.
     * @example
     * // Update one GroupBuyImage
     * const groupBuyImage = await prisma.groupBuyImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupBuyImageUpdateArgs>(args: SelectSubset<T, GroupBuyImageUpdateArgs<ExtArgs>>): Prisma__GroupBuyImageClient<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GroupBuyImages.
     * @param {GroupBuyImageDeleteManyArgs} args - Arguments to filter GroupBuyImages to delete.
     * @example
     * // Delete a few GroupBuyImages
     * const { count } = await prisma.groupBuyImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupBuyImageDeleteManyArgs>(args?: SelectSubset<T, GroupBuyImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupBuyImages
     * const groupBuyImage = await prisma.groupBuyImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupBuyImageUpdateManyArgs>(args: SelectSubset<T, GroupBuyImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyImages and returns the data updated in the database.
     * @param {GroupBuyImageUpdateManyAndReturnArgs} args - Arguments to update many GroupBuyImages.
     * @example
     * // Update many GroupBuyImages
     * const groupBuyImage = await prisma.groupBuyImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GroupBuyImages and only return the `id`
     * const groupBuyImageWithIdOnly = await prisma.groupBuyImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupBuyImageUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupBuyImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GroupBuyImage.
     * @param {GroupBuyImageUpsertArgs} args - Arguments to update or create a GroupBuyImage.
     * @example
     * // Update or create a GroupBuyImage
     * const groupBuyImage = await prisma.groupBuyImage.upsert({
     *   create: {
     *     // ... data to create a GroupBuyImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupBuyImage we want to update
     *   }
     * })
     */
    upsert<T extends GroupBuyImageUpsertArgs>(args: SelectSubset<T, GroupBuyImageUpsertArgs<ExtArgs>>): Prisma__GroupBuyImageClient<$Result.GetResult<Prisma.$GroupBuyImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GroupBuyImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyImageCountArgs} args - Arguments to filter GroupBuyImages to count.
     * @example
     * // Count the number of GroupBuyImages
     * const count = await prisma.groupBuyImage.count({
     *   where: {
     *     // ... the filter for the GroupBuyImages we want to count
     *   }
     * })
    **/
    count<T extends GroupBuyImageCountArgs>(
      args?: Subset<T, GroupBuyImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupBuyImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupBuyImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupBuyImageAggregateArgs>(args: Subset<T, GroupBuyImageAggregateArgs>): Prisma.PrismaPromise<GetGroupBuyImageAggregateType<T>>

    /**
     * Group by GroupBuyImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupBuyImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupBuyImageGroupByArgs['orderBy'] }
        : { orderBy?: GroupBuyImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupBuyImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupBuyImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupBuyImage model
   */
  readonly fields: GroupBuyImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupBuyImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupBuyImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    groupBuy<T extends GroupBuyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuyDefaultArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupBuyImage model
   */
  interface GroupBuyImageFieldRefs {
    readonly id: FieldRef<"GroupBuyImage", 'Int'>
    readonly groupBuyId: FieldRef<"GroupBuyImage", 'Int'>
    readonly url: FieldRef<"GroupBuyImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * GroupBuyImage findUnique
   */
  export type GroupBuyImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyImage to fetch.
     */
    where: GroupBuyImageWhereUniqueInput
  }

  /**
   * GroupBuyImage findUniqueOrThrow
   */
  export type GroupBuyImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyImage to fetch.
     */
    where: GroupBuyImageWhereUniqueInput
  }

  /**
   * GroupBuyImage findFirst
   */
  export type GroupBuyImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyImage to fetch.
     */
    where?: GroupBuyImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyImages to fetch.
     */
    orderBy?: GroupBuyImageOrderByWithRelationInput | GroupBuyImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyImages.
     */
    cursor?: GroupBuyImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyImages.
     */
    distinct?: GroupBuyImageScalarFieldEnum | GroupBuyImageScalarFieldEnum[]
  }

  /**
   * GroupBuyImage findFirstOrThrow
   */
  export type GroupBuyImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyImage to fetch.
     */
    where?: GroupBuyImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyImages to fetch.
     */
    orderBy?: GroupBuyImageOrderByWithRelationInput | GroupBuyImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyImages.
     */
    cursor?: GroupBuyImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyImages.
     */
    distinct?: GroupBuyImageScalarFieldEnum | GroupBuyImageScalarFieldEnum[]
  }

  /**
   * GroupBuyImage findMany
   */
  export type GroupBuyImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyImages to fetch.
     */
    where?: GroupBuyImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyImages to fetch.
     */
    orderBy?: GroupBuyImageOrderByWithRelationInput | GroupBuyImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupBuyImages.
     */
    cursor?: GroupBuyImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyImages.
     */
    skip?: number
    distinct?: GroupBuyImageScalarFieldEnum | GroupBuyImageScalarFieldEnum[]
  }

  /**
   * GroupBuyImage create
   */
  export type GroupBuyImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupBuyImage.
     */
    data: XOR<GroupBuyImageCreateInput, GroupBuyImageUncheckedCreateInput>
  }

  /**
   * GroupBuyImage createMany
   */
  export type GroupBuyImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupBuyImages.
     */
    data: GroupBuyImageCreateManyInput | GroupBuyImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupBuyImage createManyAndReturn
   */
  export type GroupBuyImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * The data used to create many GroupBuyImages.
     */
    data: GroupBuyImageCreateManyInput | GroupBuyImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyImage update
   */
  export type GroupBuyImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupBuyImage.
     */
    data: XOR<GroupBuyImageUpdateInput, GroupBuyImageUncheckedUpdateInput>
    /**
     * Choose, which GroupBuyImage to update.
     */
    where: GroupBuyImageWhereUniqueInput
  }

  /**
   * GroupBuyImage updateMany
   */
  export type GroupBuyImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupBuyImages.
     */
    data: XOR<GroupBuyImageUpdateManyMutationInput, GroupBuyImageUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyImages to update
     */
    where?: GroupBuyImageWhereInput
    /**
     * Limit how many GroupBuyImages to update.
     */
    limit?: number
  }

  /**
   * GroupBuyImage updateManyAndReturn
   */
  export type GroupBuyImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * The data used to update GroupBuyImages.
     */
    data: XOR<GroupBuyImageUpdateManyMutationInput, GroupBuyImageUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyImages to update
     */
    where?: GroupBuyImageWhereInput
    /**
     * Limit how many GroupBuyImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyImage upsert
   */
  export type GroupBuyImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupBuyImage to update in case it exists.
     */
    where: GroupBuyImageWhereUniqueInput
    /**
     * In case the GroupBuyImage found by the `where` argument doesn't exist, create a new GroupBuyImage with this data.
     */
    create: XOR<GroupBuyImageCreateInput, GroupBuyImageUncheckedCreateInput>
    /**
     * In case the GroupBuyImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupBuyImageUpdateInput, GroupBuyImageUncheckedUpdateInput>
  }

  /**
   * GroupBuyImage delete
   */
  export type GroupBuyImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
    /**
     * Filter which GroupBuyImage to delete.
     */
    where: GroupBuyImageWhereUniqueInput
  }

  /**
   * GroupBuyImage deleteMany
   */
  export type GroupBuyImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyImages to delete
     */
    where?: GroupBuyImageWhereInput
    /**
     * Limit how many GroupBuyImages to delete.
     */
    limit?: number
  }

  /**
   * GroupBuyImage without action
   */
  export type GroupBuyImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyImage
     */
    select?: GroupBuyImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyImage
     */
    omit?: GroupBuyImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyImageInclude<ExtArgs> | null
  }


  /**
   * Model Share
   */

  export type AggregateShare = {
    _count: ShareCountAggregateOutputType | null
    _avg: ShareAvgAggregateOutputType | null
    _sum: ShareSumAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  export type ShareAvgAggregateOutputType = {
    id: number | null
    shareItemId: number | null
    neighborhoodId: number | null
    lat: number | null
    lng: number | null
    status: number | null
  }

  export type ShareSumAggregateOutputType = {
    id: number | null
    shareItemId: number | null
    neighborhoodId: number | null
    lat: number | null
    lng: number | null
    status: number | null
  }

  export type ShareMinAggregateOutputType = {
    id: number | null
    shareItemId: number | null
    neighborhoodId: number | null
    ownerId: string | null
    recipientId: string | null
    title: string | null
    createdAt: Date | null
    meetingDate: Date | null
    lat: number | null
    lng: number | null
    locationAddress: string | null
    locationNote: string | null
    description: string | null
    status: number | null
  }

  export type ShareMaxAggregateOutputType = {
    id: number | null
    shareItemId: number | null
    neighborhoodId: number | null
    ownerId: string | null
    recipientId: string | null
    title: string | null
    createdAt: Date | null
    meetingDate: Date | null
    lat: number | null
    lng: number | null
    locationAddress: string | null
    locationNote: string | null
    description: string | null
    status: number | null
  }

  export type ShareCountAggregateOutputType = {
    id: number
    shareItemId: number
    neighborhoodId: number
    ownerId: number
    recipientId: number
    title: number
    createdAt: number
    meetingDate: number
    lat: number
    lng: number
    locationAddress: number
    locationNote: number
    description: number
    status: number
    _all: number
  }


  export type ShareAvgAggregateInputType = {
    id?: true
    shareItemId?: true
    neighborhoodId?: true
    lat?: true
    lng?: true
    status?: true
  }

  export type ShareSumAggregateInputType = {
    id?: true
    shareItemId?: true
    neighborhoodId?: true
    lat?: true
    lng?: true
    status?: true
  }

  export type ShareMinAggregateInputType = {
    id?: true
    shareItemId?: true
    neighborhoodId?: true
    ownerId?: true
    recipientId?: true
    title?: true
    createdAt?: true
    meetingDate?: true
    lat?: true
    lng?: true
    locationAddress?: true
    locationNote?: true
    description?: true
    status?: true
  }

  export type ShareMaxAggregateInputType = {
    id?: true
    shareItemId?: true
    neighborhoodId?: true
    ownerId?: true
    recipientId?: true
    title?: true
    createdAt?: true
    meetingDate?: true
    lat?: true
    lng?: true
    locationAddress?: true
    locationNote?: true
    description?: true
    status?: true
  }

  export type ShareCountAggregateInputType = {
    id?: true
    shareItemId?: true
    neighborhoodId?: true
    ownerId?: true
    recipientId?: true
    title?: true
    createdAt?: true
    meetingDate?: true
    lat?: true
    lng?: true
    locationAddress?: true
    locationNote?: true
    description?: true
    status?: true
    _all?: true
  }

  export type ShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Share to aggregate.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shares
    **/
    _count?: true | ShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareMaxAggregateInputType
  }

  export type GetShareAggregateType<T extends ShareAggregateArgs> = {
        [P in keyof T & keyof AggregateShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShare[P]>
      : GetScalarType<T[P], AggregateShare[P]>
  }




  export type ShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareWhereInput
    orderBy?: ShareOrderByWithAggregationInput | ShareOrderByWithAggregationInput[]
    by: ShareScalarFieldEnum[] | ShareScalarFieldEnum
    having?: ShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareCountAggregateInputType | true
    _avg?: ShareAvgAggregateInputType
    _sum?: ShareSumAggregateInputType
    _min?: ShareMinAggregateInputType
    _max?: ShareMaxAggregateInputType
  }

  export type ShareGroupByOutputType = {
    id: number
    shareItemId: number
    neighborhoodId: number
    ownerId: string
    recipientId: string | null
    title: string
    createdAt: Date
    meetingDate: Date | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    _count: ShareCountAggregateOutputType | null
    _avg: ShareAvgAggregateOutputType | null
    _sum: ShareSumAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  type GetShareGroupByPayload<T extends ShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareGroupByOutputType[P]>
            : GetScalarType<T[P], ShareGroupByOutputType[P]>
        }
      >
    >


  export type ShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareItemId?: boolean
    neighborhoodId?: boolean
    ownerId?: boolean
    recipientId?: boolean
    title?: boolean
    createdAt?: boolean
    meetingDate?: boolean
    lat?: boolean
    lng?: boolean
    locationAddress?: boolean
    locationNote?: boolean
    description?: boolean
    status?: boolean
    reviews?: boolean | Share$reviewsArgs<ExtArgs>
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | Share$recipientArgs<ExtArgs>
    shareItem?: boolean | ShareItemDefaultArgs<ExtArgs>
    chats?: boolean | Share$chatsArgs<ExtArgs>
    images?: boolean | Share$imagesArgs<ExtArgs>
    _count?: boolean | ShareCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["share"]>

  export type ShareSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareItemId?: boolean
    neighborhoodId?: boolean
    ownerId?: boolean
    recipientId?: boolean
    title?: boolean
    createdAt?: boolean
    meetingDate?: boolean
    lat?: boolean
    lng?: boolean
    locationAddress?: boolean
    locationNote?: boolean
    description?: boolean
    status?: boolean
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | Share$recipientArgs<ExtArgs>
    shareItem?: boolean | ShareItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["share"]>

  export type ShareSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareItemId?: boolean
    neighborhoodId?: boolean
    ownerId?: boolean
    recipientId?: boolean
    title?: boolean
    createdAt?: boolean
    meetingDate?: boolean
    lat?: boolean
    lng?: boolean
    locationAddress?: boolean
    locationNote?: boolean
    description?: boolean
    status?: boolean
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | Share$recipientArgs<ExtArgs>
    shareItem?: boolean | ShareItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["share"]>

  export type ShareSelectScalar = {
    id?: boolean
    shareItemId?: boolean
    neighborhoodId?: boolean
    ownerId?: boolean
    recipientId?: boolean
    title?: boolean
    createdAt?: boolean
    meetingDate?: boolean
    lat?: boolean
    lng?: boolean
    locationAddress?: boolean
    locationNote?: boolean
    description?: boolean
    status?: boolean
  }

  export type ShareOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shareItemId" | "neighborhoodId" | "ownerId" | "recipientId" | "title" | "createdAt" | "meetingDate" | "lat" | "lng" | "locationAddress" | "locationNote" | "description" | "status", ExtArgs["result"]["share"]>
  export type ShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | Share$reviewsArgs<ExtArgs>
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | Share$recipientArgs<ExtArgs>
    shareItem?: boolean | ShareItemDefaultArgs<ExtArgs>
    chats?: boolean | Share$chatsArgs<ExtArgs>
    images?: boolean | Share$imagesArgs<ExtArgs>
    _count?: boolean | ShareCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShareIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | Share$recipientArgs<ExtArgs>
    shareItem?: boolean | ShareItemDefaultArgs<ExtArgs>
  }
  export type ShareIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    neighborhood?: boolean | NeighborhoodDefaultArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | Share$recipientArgs<ExtArgs>
    shareItem?: boolean | ShareItemDefaultArgs<ExtArgs>
  }

  export type $SharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Share"
    objects: {
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      neighborhood: Prisma.$NeighborhoodPayload<ExtArgs>
      owner: Prisma.$UserPayload<ExtArgs>
      recipient: Prisma.$UserPayload<ExtArgs> | null
      shareItem: Prisma.$ShareItemPayload<ExtArgs>
      chats: Prisma.$ShareChatPayload<ExtArgs>[]
      images: Prisma.$ShareImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shareItemId: number
      neighborhoodId: number
      ownerId: string
      recipientId: string | null
      title: string
      createdAt: Date
      meetingDate: Date | null
      lat: number
      lng: number
      locationAddress: string
      locationNote: string
      description: string
      status: number
    }, ExtArgs["result"]["share"]>
    composites: {}
  }

  type ShareGetPayload<S extends boolean | null | undefined | ShareDefaultArgs> = $Result.GetResult<Prisma.$SharePayload, S>

  type ShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShareFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShareCountAggregateInputType | true
    }

  export interface ShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Share'], meta: { name: 'Share' } }
    /**
     * Find zero or one Share that matches the filter.
     * @param {ShareFindUniqueArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareFindUniqueArgs>(args: SelectSubset<T, ShareFindUniqueArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Share that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShareFindUniqueOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Share that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareFindFirstArgs>(args?: SelectSubset<T, ShareFindFirstArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Share that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Shares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shares
     * const shares = await prisma.share.findMany()
     * 
     * // Get first 10 Shares
     * const shares = await prisma.share.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareWithIdOnly = await prisma.share.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareFindManyArgs>(args?: SelectSubset<T, ShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Share.
     * @param {ShareCreateArgs} args - Arguments to create a Share.
     * @example
     * // Create one Share
     * const Share = await prisma.share.create({
     *   data: {
     *     // ... data to create a Share
     *   }
     * })
     * 
     */
    create<T extends ShareCreateArgs>(args: SelectSubset<T, ShareCreateArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Shares.
     * @param {ShareCreateManyArgs} args - Arguments to create many Shares.
     * @example
     * // Create many Shares
     * const share = await prisma.share.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareCreateManyArgs>(args?: SelectSubset<T, ShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Shares and returns the data saved in the database.
     * @param {ShareCreateManyAndReturnArgs} args - Arguments to create many Shares.
     * @example
     * // Create many Shares
     * const share = await prisma.share.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Shares and only return the `id`
     * const shareWithIdOnly = await prisma.share.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShareCreateManyAndReturnArgs>(args?: SelectSubset<T, ShareCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Share.
     * @param {ShareDeleteArgs} args - Arguments to delete one Share.
     * @example
     * // Delete one Share
     * const Share = await prisma.share.delete({
     *   where: {
     *     // ... filter to delete one Share
     *   }
     * })
     * 
     */
    delete<T extends ShareDeleteArgs>(args: SelectSubset<T, ShareDeleteArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Share.
     * @param {ShareUpdateArgs} args - Arguments to update one Share.
     * @example
     * // Update one Share
     * const share = await prisma.share.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareUpdateArgs>(args: SelectSubset<T, ShareUpdateArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Shares.
     * @param {ShareDeleteManyArgs} args - Arguments to filter Shares to delete.
     * @example
     * // Delete a few Shares
     * const { count } = await prisma.share.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareDeleteManyArgs>(args?: SelectSubset<T, ShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shares
     * const share = await prisma.share.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareUpdateManyArgs>(args: SelectSubset<T, ShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shares and returns the data updated in the database.
     * @param {ShareUpdateManyAndReturnArgs} args - Arguments to update many Shares.
     * @example
     * // Update many Shares
     * const share = await prisma.share.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Shares and only return the `id`
     * const shareWithIdOnly = await prisma.share.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShareUpdateManyAndReturnArgs>(args: SelectSubset<T, ShareUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Share.
     * @param {ShareUpsertArgs} args - Arguments to update or create a Share.
     * @example
     * // Update or create a Share
     * const share = await prisma.share.upsert({
     *   create: {
     *     // ... data to create a Share
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Share we want to update
     *   }
     * })
     */
    upsert<T extends ShareUpsertArgs>(args: SelectSubset<T, ShareUpsertArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareCountArgs} args - Arguments to filter Shares to count.
     * @example
     * // Count the number of Shares
     * const count = await prisma.share.count({
     *   where: {
     *     // ... the filter for the Shares we want to count
     *   }
     * })
    **/
    count<T extends ShareCountArgs>(
      args?: Subset<T, ShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareAggregateArgs>(args: Subset<T, ShareAggregateArgs>): Prisma.PrismaPromise<GetShareAggregateType<T>>

    /**
     * Group by Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareGroupByArgs['orderBy'] }
        : { orderBy?: ShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Share model
   */
  readonly fields: ShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Share.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviews<T extends Share$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Share$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    neighborhood<T extends NeighborhoodDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NeighborhoodDefaultArgs<ExtArgs>>): Prisma__NeighborhoodClient<$Result.GetResult<Prisma.$NeighborhoodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recipient<T extends Share$recipientArgs<ExtArgs> = {}>(args?: Subset<T, Share$recipientArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    shareItem<T extends ShareItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareItemDefaultArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    chats<T extends Share$chatsArgs<ExtArgs> = {}>(args?: Subset<T, Share$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends Share$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Share$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Share model
   */
  interface ShareFieldRefs {
    readonly id: FieldRef<"Share", 'Int'>
    readonly shareItemId: FieldRef<"Share", 'Int'>
    readonly neighborhoodId: FieldRef<"Share", 'Int'>
    readonly ownerId: FieldRef<"Share", 'String'>
    readonly recipientId: FieldRef<"Share", 'String'>
    readonly title: FieldRef<"Share", 'String'>
    readonly createdAt: FieldRef<"Share", 'DateTime'>
    readonly meetingDate: FieldRef<"Share", 'DateTime'>
    readonly lat: FieldRef<"Share", 'Float'>
    readonly lng: FieldRef<"Share", 'Float'>
    readonly locationAddress: FieldRef<"Share", 'String'>
    readonly locationNote: FieldRef<"Share", 'String'>
    readonly description: FieldRef<"Share", 'String'>
    readonly status: FieldRef<"Share", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Share findUnique
   */
  export type ShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share findUniqueOrThrow
   */
  export type ShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share findFirst
   */
  export type ShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * Share findFirstOrThrow
   */
  export type ShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * Share findMany
   */
  export type ShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Shares to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * Share create
   */
  export type ShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * The data needed to create a Share.
     */
    data: XOR<ShareCreateInput, ShareUncheckedCreateInput>
  }

  /**
   * Share createMany
   */
  export type ShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shares.
     */
    data: ShareCreateManyInput | ShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Share createManyAndReturn
   */
  export type ShareCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * The data used to create many Shares.
     */
    data: ShareCreateManyInput | ShareCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Share update
   */
  export type ShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * The data needed to update a Share.
     */
    data: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
    /**
     * Choose, which Share to update.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share updateMany
   */
  export type ShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shares.
     */
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyInput>
    /**
     * Filter which Shares to update
     */
    where?: ShareWhereInput
    /**
     * Limit how many Shares to update.
     */
    limit?: number
  }

  /**
   * Share updateManyAndReturn
   */
  export type ShareUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * The data used to update Shares.
     */
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyInput>
    /**
     * Filter which Shares to update
     */
    where?: ShareWhereInput
    /**
     * Limit how many Shares to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Share upsert
   */
  export type ShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * The filter to search for the Share to update in case it exists.
     */
    where: ShareWhereUniqueInput
    /**
     * In case the Share found by the `where` argument doesn't exist, create a new Share with this data.
     */
    create: XOR<ShareCreateInput, ShareUncheckedCreateInput>
    /**
     * In case the Share was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
  }

  /**
   * Share delete
   */
  export type ShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter which Share to delete.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share deleteMany
   */
  export type ShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shares to delete
     */
    where?: ShareWhereInput
    /**
     * Limit how many Shares to delete.
     */
    limit?: number
  }

  /**
   * Share.reviews
   */
  export type Share$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Share.recipient
   */
  export type Share$recipientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Share.chats
   */
  export type Share$chatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    where?: ShareChatWhereInput
    orderBy?: ShareChatOrderByWithRelationInput | ShareChatOrderByWithRelationInput[]
    cursor?: ShareChatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareChatScalarFieldEnum | ShareChatScalarFieldEnum[]
  }

  /**
   * Share.images
   */
  export type Share$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    where?: ShareImageWhereInput
    orderBy?: ShareImageOrderByWithRelationInput | ShareImageOrderByWithRelationInput[]
    cursor?: ShareImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareImageScalarFieldEnum | ShareImageScalarFieldEnum[]
  }

  /**
   * Share without action
   */
  export type ShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
  }


  /**
   * Model ShareImage
   */

  export type AggregateShareImage = {
    _count: ShareImageCountAggregateOutputType | null
    _avg: ShareImageAvgAggregateOutputType | null
    _sum: ShareImageSumAggregateOutputType | null
    _min: ShareImageMinAggregateOutputType | null
    _max: ShareImageMaxAggregateOutputType | null
  }

  export type ShareImageAvgAggregateOutputType = {
    id: number | null
    shareId: number | null
  }

  export type ShareImageSumAggregateOutputType = {
    id: number | null
    shareId: number | null
  }

  export type ShareImageMinAggregateOutputType = {
    id: number | null
    shareId: number | null
    url: string | null
  }

  export type ShareImageMaxAggregateOutputType = {
    id: number | null
    shareId: number | null
    url: string | null
  }

  export type ShareImageCountAggregateOutputType = {
    id: number
    shareId: number
    url: number
    _all: number
  }


  export type ShareImageAvgAggregateInputType = {
    id?: true
    shareId?: true
  }

  export type ShareImageSumAggregateInputType = {
    id?: true
    shareId?: true
  }

  export type ShareImageMinAggregateInputType = {
    id?: true
    shareId?: true
    url?: true
  }

  export type ShareImageMaxAggregateInputType = {
    id?: true
    shareId?: true
    url?: true
  }

  export type ShareImageCountAggregateInputType = {
    id?: true
    shareId?: true
    url?: true
    _all?: true
  }

  export type ShareImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareImage to aggregate.
     */
    where?: ShareImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareImages to fetch.
     */
    orderBy?: ShareImageOrderByWithRelationInput | ShareImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareImages
    **/
    _count?: true | ShareImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareImageMaxAggregateInputType
  }

  export type GetShareImageAggregateType<T extends ShareImageAggregateArgs> = {
        [P in keyof T & keyof AggregateShareImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareImage[P]>
      : GetScalarType<T[P], AggregateShareImage[P]>
  }




  export type ShareImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareImageWhereInput
    orderBy?: ShareImageOrderByWithAggregationInput | ShareImageOrderByWithAggregationInput[]
    by: ShareImageScalarFieldEnum[] | ShareImageScalarFieldEnum
    having?: ShareImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareImageCountAggregateInputType | true
    _avg?: ShareImageAvgAggregateInputType
    _sum?: ShareImageSumAggregateInputType
    _min?: ShareImageMinAggregateInputType
    _max?: ShareImageMaxAggregateInputType
  }

  export type ShareImageGroupByOutputType = {
    id: number
    shareId: number
    url: string
    _count: ShareImageCountAggregateOutputType | null
    _avg: ShareImageAvgAggregateOutputType | null
    _sum: ShareImageSumAggregateOutputType | null
    _min: ShareImageMinAggregateOutputType | null
    _max: ShareImageMaxAggregateOutputType | null
  }

  type GetShareImageGroupByPayload<T extends ShareImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareImageGroupByOutputType[P]>
            : GetScalarType<T[P], ShareImageGroupByOutputType[P]>
        }
      >
    >


  export type ShareImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    url?: boolean
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareImage"]>

  export type ShareImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    url?: boolean
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareImage"]>

  export type ShareImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    url?: boolean
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareImage"]>

  export type ShareImageSelectScalar = {
    id?: boolean
    shareId?: boolean
    url?: boolean
  }

  export type ShareImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shareId" | "url", ExtArgs["result"]["shareImage"]>
  export type ShareImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }
  export type ShareImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }
  export type ShareImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }

  export type $ShareImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareImage"
    objects: {
      share: Prisma.$SharePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shareId: number
      url: string
    }, ExtArgs["result"]["shareImage"]>
    composites: {}
  }

  type ShareImageGetPayload<S extends boolean | null | undefined | ShareImageDefaultArgs> = $Result.GetResult<Prisma.$ShareImagePayload, S>

  type ShareImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShareImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShareImageCountAggregateInputType | true
    }

  export interface ShareImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareImage'], meta: { name: 'ShareImage' } }
    /**
     * Find zero or one ShareImage that matches the filter.
     * @param {ShareImageFindUniqueArgs} args - Arguments to find a ShareImage
     * @example
     * // Get one ShareImage
     * const shareImage = await prisma.shareImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareImageFindUniqueArgs>(args: SelectSubset<T, ShareImageFindUniqueArgs<ExtArgs>>): Prisma__ShareImageClient<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShareImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShareImageFindUniqueOrThrowArgs} args - Arguments to find a ShareImage
     * @example
     * // Get one ShareImage
     * const shareImage = await prisma.shareImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareImageClient<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareImageFindFirstArgs} args - Arguments to find a ShareImage
     * @example
     * // Get one ShareImage
     * const shareImage = await prisma.shareImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareImageFindFirstArgs>(args?: SelectSubset<T, ShareImageFindFirstArgs<ExtArgs>>): Prisma__ShareImageClient<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareImageFindFirstOrThrowArgs} args - Arguments to find a ShareImage
     * @example
     * // Get one ShareImage
     * const shareImage = await prisma.shareImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareImageClient<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShareImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareImages
     * const shareImages = await prisma.shareImage.findMany()
     * 
     * // Get first 10 ShareImages
     * const shareImages = await prisma.shareImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareImageWithIdOnly = await prisma.shareImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareImageFindManyArgs>(args?: SelectSubset<T, ShareImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShareImage.
     * @param {ShareImageCreateArgs} args - Arguments to create a ShareImage.
     * @example
     * // Create one ShareImage
     * const ShareImage = await prisma.shareImage.create({
     *   data: {
     *     // ... data to create a ShareImage
     *   }
     * })
     * 
     */
    create<T extends ShareImageCreateArgs>(args: SelectSubset<T, ShareImageCreateArgs<ExtArgs>>): Prisma__ShareImageClient<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShareImages.
     * @param {ShareImageCreateManyArgs} args - Arguments to create many ShareImages.
     * @example
     * // Create many ShareImages
     * const shareImage = await prisma.shareImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareImageCreateManyArgs>(args?: SelectSubset<T, ShareImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShareImages and returns the data saved in the database.
     * @param {ShareImageCreateManyAndReturnArgs} args - Arguments to create many ShareImages.
     * @example
     * // Create many ShareImages
     * const shareImage = await prisma.shareImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShareImages and only return the `id`
     * const shareImageWithIdOnly = await prisma.shareImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShareImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ShareImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShareImage.
     * @param {ShareImageDeleteArgs} args - Arguments to delete one ShareImage.
     * @example
     * // Delete one ShareImage
     * const ShareImage = await prisma.shareImage.delete({
     *   where: {
     *     // ... filter to delete one ShareImage
     *   }
     * })
     * 
     */
    delete<T extends ShareImageDeleteArgs>(args: SelectSubset<T, ShareImageDeleteArgs<ExtArgs>>): Prisma__ShareImageClient<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShareImage.
     * @param {ShareImageUpdateArgs} args - Arguments to update one ShareImage.
     * @example
     * // Update one ShareImage
     * const shareImage = await prisma.shareImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareImageUpdateArgs>(args: SelectSubset<T, ShareImageUpdateArgs<ExtArgs>>): Prisma__ShareImageClient<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShareImages.
     * @param {ShareImageDeleteManyArgs} args - Arguments to filter ShareImages to delete.
     * @example
     * // Delete a few ShareImages
     * const { count } = await prisma.shareImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareImageDeleteManyArgs>(args?: SelectSubset<T, ShareImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareImages
     * const shareImage = await prisma.shareImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareImageUpdateManyArgs>(args: SelectSubset<T, ShareImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareImages and returns the data updated in the database.
     * @param {ShareImageUpdateManyAndReturnArgs} args - Arguments to update many ShareImages.
     * @example
     * // Update many ShareImages
     * const shareImage = await prisma.shareImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShareImages and only return the `id`
     * const shareImageWithIdOnly = await prisma.shareImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShareImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ShareImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShareImage.
     * @param {ShareImageUpsertArgs} args - Arguments to update or create a ShareImage.
     * @example
     * // Update or create a ShareImage
     * const shareImage = await prisma.shareImage.upsert({
     *   create: {
     *     // ... data to create a ShareImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareImage we want to update
     *   }
     * })
     */
    upsert<T extends ShareImageUpsertArgs>(args: SelectSubset<T, ShareImageUpsertArgs<ExtArgs>>): Prisma__ShareImageClient<$Result.GetResult<Prisma.$ShareImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShareImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareImageCountArgs} args - Arguments to filter ShareImages to count.
     * @example
     * // Count the number of ShareImages
     * const count = await prisma.shareImage.count({
     *   where: {
     *     // ... the filter for the ShareImages we want to count
     *   }
     * })
    **/
    count<T extends ShareImageCountArgs>(
      args?: Subset<T, ShareImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareImageAggregateArgs>(args: Subset<T, ShareImageAggregateArgs>): Prisma.PrismaPromise<GetShareImageAggregateType<T>>

    /**
     * Group by ShareImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareImageGroupByArgs['orderBy'] }
        : { orderBy?: ShareImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareImage model
   */
  readonly fields: ShareImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    share<T extends ShareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareDefaultArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareImage model
   */
  interface ShareImageFieldRefs {
    readonly id: FieldRef<"ShareImage", 'Int'>
    readonly shareId: FieldRef<"ShareImage", 'Int'>
    readonly url: FieldRef<"ShareImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ShareImage findUnique
   */
  export type ShareImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * Filter, which ShareImage to fetch.
     */
    where: ShareImageWhereUniqueInput
  }

  /**
   * ShareImage findUniqueOrThrow
   */
  export type ShareImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * Filter, which ShareImage to fetch.
     */
    where: ShareImageWhereUniqueInput
  }

  /**
   * ShareImage findFirst
   */
  export type ShareImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * Filter, which ShareImage to fetch.
     */
    where?: ShareImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareImages to fetch.
     */
    orderBy?: ShareImageOrderByWithRelationInput | ShareImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareImages.
     */
    cursor?: ShareImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareImages.
     */
    distinct?: ShareImageScalarFieldEnum | ShareImageScalarFieldEnum[]
  }

  /**
   * ShareImage findFirstOrThrow
   */
  export type ShareImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * Filter, which ShareImage to fetch.
     */
    where?: ShareImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareImages to fetch.
     */
    orderBy?: ShareImageOrderByWithRelationInput | ShareImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareImages.
     */
    cursor?: ShareImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareImages.
     */
    distinct?: ShareImageScalarFieldEnum | ShareImageScalarFieldEnum[]
  }

  /**
   * ShareImage findMany
   */
  export type ShareImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * Filter, which ShareImages to fetch.
     */
    where?: ShareImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareImages to fetch.
     */
    orderBy?: ShareImageOrderByWithRelationInput | ShareImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareImages.
     */
    cursor?: ShareImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareImages.
     */
    skip?: number
    distinct?: ShareImageScalarFieldEnum | ShareImageScalarFieldEnum[]
  }

  /**
   * ShareImage create
   */
  export type ShareImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareImage.
     */
    data: XOR<ShareImageCreateInput, ShareImageUncheckedCreateInput>
  }

  /**
   * ShareImage createMany
   */
  export type ShareImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareImages.
     */
    data: ShareImageCreateManyInput | ShareImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareImage createManyAndReturn
   */
  export type ShareImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * The data used to create many ShareImages.
     */
    data: ShareImageCreateManyInput | ShareImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareImage update
   */
  export type ShareImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareImage.
     */
    data: XOR<ShareImageUpdateInput, ShareImageUncheckedUpdateInput>
    /**
     * Choose, which ShareImage to update.
     */
    where: ShareImageWhereUniqueInput
  }

  /**
   * ShareImage updateMany
   */
  export type ShareImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareImages.
     */
    data: XOR<ShareImageUpdateManyMutationInput, ShareImageUncheckedUpdateManyInput>
    /**
     * Filter which ShareImages to update
     */
    where?: ShareImageWhereInput
    /**
     * Limit how many ShareImages to update.
     */
    limit?: number
  }

  /**
   * ShareImage updateManyAndReturn
   */
  export type ShareImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * The data used to update ShareImages.
     */
    data: XOR<ShareImageUpdateManyMutationInput, ShareImageUncheckedUpdateManyInput>
    /**
     * Filter which ShareImages to update
     */
    where?: ShareImageWhereInput
    /**
     * Limit how many ShareImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareImage upsert
   */
  export type ShareImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareImage to update in case it exists.
     */
    where: ShareImageWhereUniqueInput
    /**
     * In case the ShareImage found by the `where` argument doesn't exist, create a new ShareImage with this data.
     */
    create: XOR<ShareImageCreateInput, ShareImageUncheckedCreateInput>
    /**
     * In case the ShareImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareImageUpdateInput, ShareImageUncheckedUpdateInput>
  }

  /**
   * ShareImage delete
   */
  export type ShareImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
    /**
     * Filter which ShareImage to delete.
     */
    where: ShareImageWhereUniqueInput
  }

  /**
   * ShareImage deleteMany
   */
  export type ShareImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareImages to delete
     */
    where?: ShareImageWhereInput
    /**
     * Limit how many ShareImages to delete.
     */
    limit?: number
  }

  /**
   * ShareImage without action
   */
  export type ShareImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareImage
     */
    select?: ShareImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareImage
     */
    omit?: ShareImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareImageInclude<ExtArgs> | null
  }


  /**
   * Model ShareItem
   */

  export type AggregateShareItem = {
    _count: ShareItemCountAggregateOutputType | null
    _avg: ShareItemAvgAggregateOutputType | null
    _sum: ShareItemSumAggregateOutputType | null
    _min: ShareItemMinAggregateOutputType | null
    _max: ShareItemMaxAggregateOutputType | null
  }

  export type ShareItemAvgAggregateOutputType = {
    id: number | null
  }

  export type ShareItemSumAggregateOutputType = {
    id: number | null
  }

  export type ShareItemMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ShareItemMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ShareItemCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ShareItemAvgAggregateInputType = {
    id?: true
  }

  export type ShareItemSumAggregateInputType = {
    id?: true
  }

  export type ShareItemMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ShareItemMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ShareItemCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ShareItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareItem to aggregate.
     */
    where?: ShareItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareItems to fetch.
     */
    orderBy?: ShareItemOrderByWithRelationInput | ShareItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareItems
    **/
    _count?: true | ShareItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareItemMaxAggregateInputType
  }

  export type GetShareItemAggregateType<T extends ShareItemAggregateArgs> = {
        [P in keyof T & keyof AggregateShareItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareItem[P]>
      : GetScalarType<T[P], AggregateShareItem[P]>
  }




  export type ShareItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareItemWhereInput
    orderBy?: ShareItemOrderByWithAggregationInput | ShareItemOrderByWithAggregationInput[]
    by: ShareItemScalarFieldEnum[] | ShareItemScalarFieldEnum
    having?: ShareItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareItemCountAggregateInputType | true
    _avg?: ShareItemAvgAggregateInputType
    _sum?: ShareItemSumAggregateInputType
    _min?: ShareItemMinAggregateInputType
    _max?: ShareItemMaxAggregateInputType
  }

  export type ShareItemGroupByOutputType = {
    id: number
    name: string
    _count: ShareItemCountAggregateOutputType | null
    _avg: ShareItemAvgAggregateOutputType | null
    _sum: ShareItemSumAggregateOutputType | null
    _min: ShareItemMinAggregateOutputType | null
    _max: ShareItemMaxAggregateOutputType | null
  }

  type GetShareItemGroupByPayload<T extends ShareItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareItemGroupByOutputType[P]>
            : GetScalarType<T[P], ShareItemGroupByOutputType[P]>
        }
      >
    >


  export type ShareItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    shares?: boolean | ShareItem$sharesArgs<ExtArgs>
    _count?: boolean | ShareItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareItem"]>

  export type ShareItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["shareItem"]>

  export type ShareItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["shareItem"]>

  export type ShareItemSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type ShareItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["shareItem"]>
  export type ShareItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shares?: boolean | ShareItem$sharesArgs<ExtArgs>
    _count?: boolean | ShareItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShareItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ShareItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ShareItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareItem"
    objects: {
      shares: Prisma.$SharePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["shareItem"]>
    composites: {}
  }

  type ShareItemGetPayload<S extends boolean | null | undefined | ShareItemDefaultArgs> = $Result.GetResult<Prisma.$ShareItemPayload, S>

  type ShareItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShareItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShareItemCountAggregateInputType | true
    }

  export interface ShareItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareItem'], meta: { name: 'ShareItem' } }
    /**
     * Find zero or one ShareItem that matches the filter.
     * @param {ShareItemFindUniqueArgs} args - Arguments to find a ShareItem
     * @example
     * // Get one ShareItem
     * const shareItem = await prisma.shareItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareItemFindUniqueArgs>(args: SelectSubset<T, ShareItemFindUniqueArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShareItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShareItemFindUniqueOrThrowArgs} args - Arguments to find a ShareItem
     * @example
     * // Get one ShareItem
     * const shareItem = await prisma.shareItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareItemFindFirstArgs} args - Arguments to find a ShareItem
     * @example
     * // Get one ShareItem
     * const shareItem = await prisma.shareItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareItemFindFirstArgs>(args?: SelectSubset<T, ShareItemFindFirstArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareItemFindFirstOrThrowArgs} args - Arguments to find a ShareItem
     * @example
     * // Get one ShareItem
     * const shareItem = await prisma.shareItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShareItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareItems
     * const shareItems = await prisma.shareItem.findMany()
     * 
     * // Get first 10 ShareItems
     * const shareItems = await prisma.shareItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareItemWithIdOnly = await prisma.shareItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareItemFindManyArgs>(args?: SelectSubset<T, ShareItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShareItem.
     * @param {ShareItemCreateArgs} args - Arguments to create a ShareItem.
     * @example
     * // Create one ShareItem
     * const ShareItem = await prisma.shareItem.create({
     *   data: {
     *     // ... data to create a ShareItem
     *   }
     * })
     * 
     */
    create<T extends ShareItemCreateArgs>(args: SelectSubset<T, ShareItemCreateArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShareItems.
     * @param {ShareItemCreateManyArgs} args - Arguments to create many ShareItems.
     * @example
     * // Create many ShareItems
     * const shareItem = await prisma.shareItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareItemCreateManyArgs>(args?: SelectSubset<T, ShareItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShareItems and returns the data saved in the database.
     * @param {ShareItemCreateManyAndReturnArgs} args - Arguments to create many ShareItems.
     * @example
     * // Create many ShareItems
     * const shareItem = await prisma.shareItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShareItems and only return the `id`
     * const shareItemWithIdOnly = await prisma.shareItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShareItemCreateManyAndReturnArgs>(args?: SelectSubset<T, ShareItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShareItem.
     * @param {ShareItemDeleteArgs} args - Arguments to delete one ShareItem.
     * @example
     * // Delete one ShareItem
     * const ShareItem = await prisma.shareItem.delete({
     *   where: {
     *     // ... filter to delete one ShareItem
     *   }
     * })
     * 
     */
    delete<T extends ShareItemDeleteArgs>(args: SelectSubset<T, ShareItemDeleteArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShareItem.
     * @param {ShareItemUpdateArgs} args - Arguments to update one ShareItem.
     * @example
     * // Update one ShareItem
     * const shareItem = await prisma.shareItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareItemUpdateArgs>(args: SelectSubset<T, ShareItemUpdateArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShareItems.
     * @param {ShareItemDeleteManyArgs} args - Arguments to filter ShareItems to delete.
     * @example
     * // Delete a few ShareItems
     * const { count } = await prisma.shareItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareItemDeleteManyArgs>(args?: SelectSubset<T, ShareItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareItems
     * const shareItem = await prisma.shareItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareItemUpdateManyArgs>(args: SelectSubset<T, ShareItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareItems and returns the data updated in the database.
     * @param {ShareItemUpdateManyAndReturnArgs} args - Arguments to update many ShareItems.
     * @example
     * // Update many ShareItems
     * const shareItem = await prisma.shareItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShareItems and only return the `id`
     * const shareItemWithIdOnly = await prisma.shareItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShareItemUpdateManyAndReturnArgs>(args: SelectSubset<T, ShareItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShareItem.
     * @param {ShareItemUpsertArgs} args - Arguments to update or create a ShareItem.
     * @example
     * // Update or create a ShareItem
     * const shareItem = await prisma.shareItem.upsert({
     *   create: {
     *     // ... data to create a ShareItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareItem we want to update
     *   }
     * })
     */
    upsert<T extends ShareItemUpsertArgs>(args: SelectSubset<T, ShareItemUpsertArgs<ExtArgs>>): Prisma__ShareItemClient<$Result.GetResult<Prisma.$ShareItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShareItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareItemCountArgs} args - Arguments to filter ShareItems to count.
     * @example
     * // Count the number of ShareItems
     * const count = await prisma.shareItem.count({
     *   where: {
     *     // ... the filter for the ShareItems we want to count
     *   }
     * })
    **/
    count<T extends ShareItemCountArgs>(
      args?: Subset<T, ShareItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareItemAggregateArgs>(args: Subset<T, ShareItemAggregateArgs>): Prisma.PrismaPromise<GetShareItemAggregateType<T>>

    /**
     * Group by ShareItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareItemGroupByArgs['orderBy'] }
        : { orderBy?: ShareItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareItem model
   */
  readonly fields: ShareItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shares<T extends ShareItem$sharesArgs<ExtArgs> = {}>(args?: Subset<T, ShareItem$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareItem model
   */
  interface ShareItemFieldRefs {
    readonly id: FieldRef<"ShareItem", 'Int'>
    readonly name: FieldRef<"ShareItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ShareItem findUnique
   */
  export type ShareItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * Filter, which ShareItem to fetch.
     */
    where: ShareItemWhereUniqueInput
  }

  /**
   * ShareItem findUniqueOrThrow
   */
  export type ShareItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * Filter, which ShareItem to fetch.
     */
    where: ShareItemWhereUniqueInput
  }

  /**
   * ShareItem findFirst
   */
  export type ShareItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * Filter, which ShareItem to fetch.
     */
    where?: ShareItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareItems to fetch.
     */
    orderBy?: ShareItemOrderByWithRelationInput | ShareItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareItems.
     */
    cursor?: ShareItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareItems.
     */
    distinct?: ShareItemScalarFieldEnum | ShareItemScalarFieldEnum[]
  }

  /**
   * ShareItem findFirstOrThrow
   */
  export type ShareItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * Filter, which ShareItem to fetch.
     */
    where?: ShareItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareItems to fetch.
     */
    orderBy?: ShareItemOrderByWithRelationInput | ShareItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareItems.
     */
    cursor?: ShareItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareItems.
     */
    distinct?: ShareItemScalarFieldEnum | ShareItemScalarFieldEnum[]
  }

  /**
   * ShareItem findMany
   */
  export type ShareItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * Filter, which ShareItems to fetch.
     */
    where?: ShareItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareItems to fetch.
     */
    orderBy?: ShareItemOrderByWithRelationInput | ShareItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareItems.
     */
    cursor?: ShareItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareItems.
     */
    skip?: number
    distinct?: ShareItemScalarFieldEnum | ShareItemScalarFieldEnum[]
  }

  /**
   * ShareItem create
   */
  export type ShareItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareItem.
     */
    data: XOR<ShareItemCreateInput, ShareItemUncheckedCreateInput>
  }

  /**
   * ShareItem createMany
   */
  export type ShareItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareItems.
     */
    data: ShareItemCreateManyInput | ShareItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareItem createManyAndReturn
   */
  export type ShareItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * The data used to create many ShareItems.
     */
    data: ShareItemCreateManyInput | ShareItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareItem update
   */
  export type ShareItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareItem.
     */
    data: XOR<ShareItemUpdateInput, ShareItemUncheckedUpdateInput>
    /**
     * Choose, which ShareItem to update.
     */
    where: ShareItemWhereUniqueInput
  }

  /**
   * ShareItem updateMany
   */
  export type ShareItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareItems.
     */
    data: XOR<ShareItemUpdateManyMutationInput, ShareItemUncheckedUpdateManyInput>
    /**
     * Filter which ShareItems to update
     */
    where?: ShareItemWhereInput
    /**
     * Limit how many ShareItems to update.
     */
    limit?: number
  }

  /**
   * ShareItem updateManyAndReturn
   */
  export type ShareItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * The data used to update ShareItems.
     */
    data: XOR<ShareItemUpdateManyMutationInput, ShareItemUncheckedUpdateManyInput>
    /**
     * Filter which ShareItems to update
     */
    where?: ShareItemWhereInput
    /**
     * Limit how many ShareItems to update.
     */
    limit?: number
  }

  /**
   * ShareItem upsert
   */
  export type ShareItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareItem to update in case it exists.
     */
    where: ShareItemWhereUniqueInput
    /**
     * In case the ShareItem found by the `where` argument doesn't exist, create a new ShareItem with this data.
     */
    create: XOR<ShareItemCreateInput, ShareItemUncheckedCreateInput>
    /**
     * In case the ShareItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareItemUpdateInput, ShareItemUncheckedUpdateInput>
  }

  /**
   * ShareItem delete
   */
  export type ShareItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
    /**
     * Filter which ShareItem to delete.
     */
    where: ShareItemWhereUniqueInput
  }

  /**
   * ShareItem deleteMany
   */
  export type ShareItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareItems to delete
     */
    where?: ShareItemWhereInput
    /**
     * Limit how many ShareItems to delete.
     */
    limit?: number
  }

  /**
   * ShareItem.shares
   */
  export type ShareItem$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Share
     */
    omit?: ShareOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    where?: ShareWhereInput
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * ShareItem without action
   */
  export type ShareItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareItem
     */
    select?: ShareItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareItem
     */
    omit?: ShareItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareItemInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    shareId: number | null
    grade: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    shareId: number | null
    grade: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    writerId: string | null
    recipientId: string | null
    shareId: number | null
    grade: number | null
    content: string | null
    createdAt: Date | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    writerId: string | null
    recipientId: string | null
    shareId: number | null
    grade: number | null
    content: string | null
    createdAt: Date | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    writerId: number
    recipientId: number
    shareId: number
    grade: number
    content: number
    createdAt: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    shareId?: true
    grade?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    shareId?: true
    grade?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    writerId?: true
    recipientId?: true
    shareId?: true
    grade?: true
    content?: true
    createdAt?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    writerId?: true
    recipientId?: true
    shareId?: true
    grade?: true
    content?: true
    createdAt?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    writerId?: true
    recipientId?: true
    shareId?: true
    grade?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    writerId: string
    recipientId: string
    shareId: number
    grade: number
    content: string | null
    createdAt: Date
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    writerId?: boolean
    recipientId?: boolean
    shareId?: boolean
    grade?: boolean
    content?: boolean
    createdAt?: boolean
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    share?: boolean | ShareDefaultArgs<ExtArgs>
    writer?: boolean | UserDefaultArgs<ExtArgs>
    reviews?: boolean | Review$reviewsArgs<ExtArgs>
    _count?: boolean | ReviewCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    writerId?: boolean
    recipientId?: boolean
    shareId?: boolean
    grade?: boolean
    content?: boolean
    createdAt?: boolean
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    share?: boolean | ShareDefaultArgs<ExtArgs>
    writer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    writerId?: boolean
    recipientId?: boolean
    shareId?: boolean
    grade?: boolean
    content?: boolean
    createdAt?: boolean
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    share?: boolean | ShareDefaultArgs<ExtArgs>
    writer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    writerId?: boolean
    recipientId?: boolean
    shareId?: boolean
    grade?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "writerId" | "recipientId" | "shareId" | "grade" | "content" | "createdAt", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    share?: boolean | ShareDefaultArgs<ExtArgs>
    writer?: boolean | UserDefaultArgs<ExtArgs>
    reviews?: boolean | Review$reviewsArgs<ExtArgs>
    _count?: boolean | ReviewCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    share?: boolean | ShareDefaultArgs<ExtArgs>
    writer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    recipient?: boolean | UserDefaultArgs<ExtArgs>
    share?: boolean | ShareDefaultArgs<ExtArgs>
    writer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      recipient: Prisma.$UserPayload<ExtArgs>
      share: Prisma.$SharePayload<ExtArgs>
      writer: Prisma.$UserPayload<ExtArgs>
      reviews: Prisma.$ReviewShortReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      writerId: string
      recipientId: string
      shareId: number
      grade: number
      content: string | null
      createdAt: Date
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    recipient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    share<T extends ShareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareDefaultArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    writer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reviews<T extends Review$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Review$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly writerId: FieldRef<"Review", 'String'>
    readonly recipientId: FieldRef<"Review", 'String'>
    readonly shareId: FieldRef<"Review", 'Int'>
    readonly grade: FieldRef<"Review", 'Int'>
    readonly content: FieldRef<"Review", 'String'>
    readonly createdAt: FieldRef<"Review", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review.reviews
   */
  export type Review$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    where?: ReviewShortReviewWhereInput
    orderBy?: ReviewShortReviewOrderByWithRelationInput | ReviewShortReviewOrderByWithRelationInput[]
    cursor?: ReviewShortReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewShortReviewScalarFieldEnum | ReviewShortReviewScalarFieldEnum[]
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model ReviewShortReview
   */

  export type AggregateReviewShortReview = {
    _count: ReviewShortReviewCountAggregateOutputType | null
    _avg: ReviewShortReviewAvgAggregateOutputType | null
    _sum: ReviewShortReviewSumAggregateOutputType | null
    _min: ReviewShortReviewMinAggregateOutputType | null
    _max: ReviewShortReviewMaxAggregateOutputType | null
  }

  export type ReviewShortReviewAvgAggregateOutputType = {
    id: number | null
    reviewId: number | null
    shortReviewOptionId: number | null
  }

  export type ReviewShortReviewSumAggregateOutputType = {
    id: number | null
    reviewId: number | null
    shortReviewOptionId: number | null
  }

  export type ReviewShortReviewMinAggregateOutputType = {
    id: number | null
    reviewId: number | null
    shortReviewOptionId: number | null
  }

  export type ReviewShortReviewMaxAggregateOutputType = {
    id: number | null
    reviewId: number | null
    shortReviewOptionId: number | null
  }

  export type ReviewShortReviewCountAggregateOutputType = {
    id: number
    reviewId: number
    shortReviewOptionId: number
    _all: number
  }


  export type ReviewShortReviewAvgAggregateInputType = {
    id?: true
    reviewId?: true
    shortReviewOptionId?: true
  }

  export type ReviewShortReviewSumAggregateInputType = {
    id?: true
    reviewId?: true
    shortReviewOptionId?: true
  }

  export type ReviewShortReviewMinAggregateInputType = {
    id?: true
    reviewId?: true
    shortReviewOptionId?: true
  }

  export type ReviewShortReviewMaxAggregateInputType = {
    id?: true
    reviewId?: true
    shortReviewOptionId?: true
  }

  export type ReviewShortReviewCountAggregateInputType = {
    id?: true
    reviewId?: true
    shortReviewOptionId?: true
    _all?: true
  }

  export type ReviewShortReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewShortReview to aggregate.
     */
    where?: ReviewShortReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewShortReviews to fetch.
     */
    orderBy?: ReviewShortReviewOrderByWithRelationInput | ReviewShortReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewShortReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewShortReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewShortReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReviewShortReviews
    **/
    _count?: true | ReviewShortReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewShortReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewShortReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewShortReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewShortReviewMaxAggregateInputType
  }

  export type GetReviewShortReviewAggregateType<T extends ReviewShortReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReviewShortReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReviewShortReview[P]>
      : GetScalarType<T[P], AggregateReviewShortReview[P]>
  }




  export type ReviewShortReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewShortReviewWhereInput
    orderBy?: ReviewShortReviewOrderByWithAggregationInput | ReviewShortReviewOrderByWithAggregationInput[]
    by: ReviewShortReviewScalarFieldEnum[] | ReviewShortReviewScalarFieldEnum
    having?: ReviewShortReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewShortReviewCountAggregateInputType | true
    _avg?: ReviewShortReviewAvgAggregateInputType
    _sum?: ReviewShortReviewSumAggregateInputType
    _min?: ReviewShortReviewMinAggregateInputType
    _max?: ReviewShortReviewMaxAggregateInputType
  }

  export type ReviewShortReviewGroupByOutputType = {
    id: number
    reviewId: number
    shortReviewOptionId: number
    _count: ReviewShortReviewCountAggregateOutputType | null
    _avg: ReviewShortReviewAvgAggregateOutputType | null
    _sum: ReviewShortReviewSumAggregateOutputType | null
    _min: ReviewShortReviewMinAggregateOutputType | null
    _max: ReviewShortReviewMaxAggregateOutputType | null
  }

  type GetReviewShortReviewGroupByPayload<T extends ReviewShortReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewShortReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewShortReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewShortReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewShortReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewShortReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reviewId?: boolean
    shortReviewOptionId?: boolean
    review?: boolean | ReviewDefaultArgs<ExtArgs>
    shortReviewOption?: boolean | ShortReviewOptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewShortReview"]>

  export type ReviewShortReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reviewId?: boolean
    shortReviewOptionId?: boolean
    review?: boolean | ReviewDefaultArgs<ExtArgs>
    shortReviewOption?: boolean | ShortReviewOptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewShortReview"]>

  export type ReviewShortReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reviewId?: boolean
    shortReviewOptionId?: boolean
    review?: boolean | ReviewDefaultArgs<ExtArgs>
    shortReviewOption?: boolean | ShortReviewOptionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reviewShortReview"]>

  export type ReviewShortReviewSelectScalar = {
    id?: boolean
    reviewId?: boolean
    shortReviewOptionId?: boolean
  }

  export type ReviewShortReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reviewId" | "shortReviewOptionId", ExtArgs["result"]["reviewShortReview"]>
  export type ReviewShortReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    review?: boolean | ReviewDefaultArgs<ExtArgs>
    shortReviewOption?: boolean | ShortReviewOptionDefaultArgs<ExtArgs>
  }
  export type ReviewShortReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    review?: boolean | ReviewDefaultArgs<ExtArgs>
    shortReviewOption?: boolean | ShortReviewOptionDefaultArgs<ExtArgs>
  }
  export type ReviewShortReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    review?: boolean | ReviewDefaultArgs<ExtArgs>
    shortReviewOption?: boolean | ShortReviewOptionDefaultArgs<ExtArgs>
  }

  export type $ReviewShortReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReviewShortReview"
    objects: {
      review: Prisma.$ReviewPayload<ExtArgs>
      shortReviewOption: Prisma.$ShortReviewOptionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      reviewId: number
      shortReviewOptionId: number
    }, ExtArgs["result"]["reviewShortReview"]>
    composites: {}
  }

  type ReviewShortReviewGetPayload<S extends boolean | null | undefined | ReviewShortReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewShortReviewPayload, S>

  type ReviewShortReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewShortReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewShortReviewCountAggregateInputType | true
    }

  export interface ReviewShortReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReviewShortReview'], meta: { name: 'ReviewShortReview' } }
    /**
     * Find zero or one ReviewShortReview that matches the filter.
     * @param {ReviewShortReviewFindUniqueArgs} args - Arguments to find a ReviewShortReview
     * @example
     * // Get one ReviewShortReview
     * const reviewShortReview = await prisma.reviewShortReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewShortReviewFindUniqueArgs>(args: SelectSubset<T, ReviewShortReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewShortReviewClient<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReviewShortReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewShortReviewFindUniqueOrThrowArgs} args - Arguments to find a ReviewShortReview
     * @example
     * // Get one ReviewShortReview
     * const reviewShortReview = await prisma.reviewShortReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewShortReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewShortReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewShortReviewClient<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewShortReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewShortReviewFindFirstArgs} args - Arguments to find a ReviewShortReview
     * @example
     * // Get one ReviewShortReview
     * const reviewShortReview = await prisma.reviewShortReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewShortReviewFindFirstArgs>(args?: SelectSubset<T, ReviewShortReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewShortReviewClient<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReviewShortReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewShortReviewFindFirstOrThrowArgs} args - Arguments to find a ReviewShortReview
     * @example
     * // Get one ReviewShortReview
     * const reviewShortReview = await prisma.reviewShortReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewShortReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewShortReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewShortReviewClient<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReviewShortReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewShortReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReviewShortReviews
     * const reviewShortReviews = await prisma.reviewShortReview.findMany()
     * 
     * // Get first 10 ReviewShortReviews
     * const reviewShortReviews = await prisma.reviewShortReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewShortReviewWithIdOnly = await prisma.reviewShortReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewShortReviewFindManyArgs>(args?: SelectSubset<T, ReviewShortReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReviewShortReview.
     * @param {ReviewShortReviewCreateArgs} args - Arguments to create a ReviewShortReview.
     * @example
     * // Create one ReviewShortReview
     * const ReviewShortReview = await prisma.reviewShortReview.create({
     *   data: {
     *     // ... data to create a ReviewShortReview
     *   }
     * })
     * 
     */
    create<T extends ReviewShortReviewCreateArgs>(args: SelectSubset<T, ReviewShortReviewCreateArgs<ExtArgs>>): Prisma__ReviewShortReviewClient<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReviewShortReviews.
     * @param {ReviewShortReviewCreateManyArgs} args - Arguments to create many ReviewShortReviews.
     * @example
     * // Create many ReviewShortReviews
     * const reviewShortReview = await prisma.reviewShortReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewShortReviewCreateManyArgs>(args?: SelectSubset<T, ReviewShortReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReviewShortReviews and returns the data saved in the database.
     * @param {ReviewShortReviewCreateManyAndReturnArgs} args - Arguments to create many ReviewShortReviews.
     * @example
     * // Create many ReviewShortReviews
     * const reviewShortReview = await prisma.reviewShortReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReviewShortReviews and only return the `id`
     * const reviewShortReviewWithIdOnly = await prisma.reviewShortReview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewShortReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewShortReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReviewShortReview.
     * @param {ReviewShortReviewDeleteArgs} args - Arguments to delete one ReviewShortReview.
     * @example
     * // Delete one ReviewShortReview
     * const ReviewShortReview = await prisma.reviewShortReview.delete({
     *   where: {
     *     // ... filter to delete one ReviewShortReview
     *   }
     * })
     * 
     */
    delete<T extends ReviewShortReviewDeleteArgs>(args: SelectSubset<T, ReviewShortReviewDeleteArgs<ExtArgs>>): Prisma__ReviewShortReviewClient<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReviewShortReview.
     * @param {ReviewShortReviewUpdateArgs} args - Arguments to update one ReviewShortReview.
     * @example
     * // Update one ReviewShortReview
     * const reviewShortReview = await prisma.reviewShortReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewShortReviewUpdateArgs>(args: SelectSubset<T, ReviewShortReviewUpdateArgs<ExtArgs>>): Prisma__ReviewShortReviewClient<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReviewShortReviews.
     * @param {ReviewShortReviewDeleteManyArgs} args - Arguments to filter ReviewShortReviews to delete.
     * @example
     * // Delete a few ReviewShortReviews
     * const { count } = await prisma.reviewShortReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewShortReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewShortReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewShortReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewShortReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReviewShortReviews
     * const reviewShortReview = await prisma.reviewShortReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewShortReviewUpdateManyArgs>(args: SelectSubset<T, ReviewShortReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReviewShortReviews and returns the data updated in the database.
     * @param {ReviewShortReviewUpdateManyAndReturnArgs} args - Arguments to update many ReviewShortReviews.
     * @example
     * // Update many ReviewShortReviews
     * const reviewShortReview = await prisma.reviewShortReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReviewShortReviews and only return the `id`
     * const reviewShortReviewWithIdOnly = await prisma.reviewShortReview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewShortReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewShortReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReviewShortReview.
     * @param {ReviewShortReviewUpsertArgs} args - Arguments to update or create a ReviewShortReview.
     * @example
     * // Update or create a ReviewShortReview
     * const reviewShortReview = await prisma.reviewShortReview.upsert({
     *   create: {
     *     // ... data to create a ReviewShortReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReviewShortReview we want to update
     *   }
     * })
     */
    upsert<T extends ReviewShortReviewUpsertArgs>(args: SelectSubset<T, ReviewShortReviewUpsertArgs<ExtArgs>>): Prisma__ReviewShortReviewClient<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReviewShortReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewShortReviewCountArgs} args - Arguments to filter ReviewShortReviews to count.
     * @example
     * // Count the number of ReviewShortReviews
     * const count = await prisma.reviewShortReview.count({
     *   where: {
     *     // ... the filter for the ReviewShortReviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewShortReviewCountArgs>(
      args?: Subset<T, ReviewShortReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewShortReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReviewShortReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewShortReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewShortReviewAggregateArgs>(args: Subset<T, ReviewShortReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewShortReviewAggregateType<T>>

    /**
     * Group by ReviewShortReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewShortReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewShortReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewShortReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewShortReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewShortReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewShortReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReviewShortReview model
   */
  readonly fields: ReviewShortReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReviewShortReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewShortReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    review<T extends ReviewDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReviewDefaultArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shortReviewOption<T extends ShortReviewOptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShortReviewOptionDefaultArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReviewShortReview model
   */
  interface ReviewShortReviewFieldRefs {
    readonly id: FieldRef<"ReviewShortReview", 'Int'>
    readonly reviewId: FieldRef<"ReviewShortReview", 'Int'>
    readonly shortReviewOptionId: FieldRef<"ReviewShortReview", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ReviewShortReview findUnique
   */
  export type ReviewShortReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * Filter, which ReviewShortReview to fetch.
     */
    where: ReviewShortReviewWhereUniqueInput
  }

  /**
   * ReviewShortReview findUniqueOrThrow
   */
  export type ReviewShortReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * Filter, which ReviewShortReview to fetch.
     */
    where: ReviewShortReviewWhereUniqueInput
  }

  /**
   * ReviewShortReview findFirst
   */
  export type ReviewShortReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * Filter, which ReviewShortReview to fetch.
     */
    where?: ReviewShortReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewShortReviews to fetch.
     */
    orderBy?: ReviewShortReviewOrderByWithRelationInput | ReviewShortReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewShortReviews.
     */
    cursor?: ReviewShortReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewShortReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewShortReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewShortReviews.
     */
    distinct?: ReviewShortReviewScalarFieldEnum | ReviewShortReviewScalarFieldEnum[]
  }

  /**
   * ReviewShortReview findFirstOrThrow
   */
  export type ReviewShortReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * Filter, which ReviewShortReview to fetch.
     */
    where?: ReviewShortReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewShortReviews to fetch.
     */
    orderBy?: ReviewShortReviewOrderByWithRelationInput | ReviewShortReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReviewShortReviews.
     */
    cursor?: ReviewShortReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewShortReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewShortReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReviewShortReviews.
     */
    distinct?: ReviewShortReviewScalarFieldEnum | ReviewShortReviewScalarFieldEnum[]
  }

  /**
   * ReviewShortReview findMany
   */
  export type ReviewShortReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * Filter, which ReviewShortReviews to fetch.
     */
    where?: ReviewShortReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReviewShortReviews to fetch.
     */
    orderBy?: ReviewShortReviewOrderByWithRelationInput | ReviewShortReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReviewShortReviews.
     */
    cursor?: ReviewShortReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReviewShortReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReviewShortReviews.
     */
    skip?: number
    distinct?: ReviewShortReviewScalarFieldEnum | ReviewShortReviewScalarFieldEnum[]
  }

  /**
   * ReviewShortReview create
   */
  export type ReviewShortReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a ReviewShortReview.
     */
    data: XOR<ReviewShortReviewCreateInput, ReviewShortReviewUncheckedCreateInput>
  }

  /**
   * ReviewShortReview createMany
   */
  export type ReviewShortReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReviewShortReviews.
     */
    data: ReviewShortReviewCreateManyInput | ReviewShortReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReviewShortReview createManyAndReturn
   */
  export type ReviewShortReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * The data used to create many ReviewShortReviews.
     */
    data: ReviewShortReviewCreateManyInput | ReviewShortReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewShortReview update
   */
  export type ReviewShortReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a ReviewShortReview.
     */
    data: XOR<ReviewShortReviewUpdateInput, ReviewShortReviewUncheckedUpdateInput>
    /**
     * Choose, which ReviewShortReview to update.
     */
    where: ReviewShortReviewWhereUniqueInput
  }

  /**
   * ReviewShortReview updateMany
   */
  export type ReviewShortReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReviewShortReviews.
     */
    data: XOR<ReviewShortReviewUpdateManyMutationInput, ReviewShortReviewUncheckedUpdateManyInput>
    /**
     * Filter which ReviewShortReviews to update
     */
    where?: ReviewShortReviewWhereInput
    /**
     * Limit how many ReviewShortReviews to update.
     */
    limit?: number
  }

  /**
   * ReviewShortReview updateManyAndReturn
   */
  export type ReviewShortReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * The data used to update ReviewShortReviews.
     */
    data: XOR<ReviewShortReviewUpdateManyMutationInput, ReviewShortReviewUncheckedUpdateManyInput>
    /**
     * Filter which ReviewShortReviews to update
     */
    where?: ReviewShortReviewWhereInput
    /**
     * Limit how many ReviewShortReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReviewShortReview upsert
   */
  export type ReviewShortReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the ReviewShortReview to update in case it exists.
     */
    where: ReviewShortReviewWhereUniqueInput
    /**
     * In case the ReviewShortReview found by the `where` argument doesn't exist, create a new ReviewShortReview with this data.
     */
    create: XOR<ReviewShortReviewCreateInput, ReviewShortReviewUncheckedCreateInput>
    /**
     * In case the ReviewShortReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewShortReviewUpdateInput, ReviewShortReviewUncheckedUpdateInput>
  }

  /**
   * ReviewShortReview delete
   */
  export type ReviewShortReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    /**
     * Filter which ReviewShortReview to delete.
     */
    where: ReviewShortReviewWhereUniqueInput
  }

  /**
   * ReviewShortReview deleteMany
   */
  export type ReviewShortReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReviewShortReviews to delete
     */
    where?: ReviewShortReviewWhereInput
    /**
     * Limit how many ReviewShortReviews to delete.
     */
    limit?: number
  }

  /**
   * ReviewShortReview without action
   */
  export type ReviewShortReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
  }


  /**
   * Model ShortReviewOption
   */

  export type AggregateShortReviewOption = {
    _count: ShortReviewOptionCountAggregateOutputType | null
    _avg: ShortReviewOptionAvgAggregateOutputType | null
    _sum: ShortReviewOptionSumAggregateOutputType | null
    _min: ShortReviewOptionMinAggregateOutputType | null
    _max: ShortReviewOptionMaxAggregateOutputType | null
  }

  export type ShortReviewOptionAvgAggregateOutputType = {
    id: number | null
  }

  export type ShortReviewOptionSumAggregateOutputType = {
    id: number | null
  }

  export type ShortReviewOptionMinAggregateOutputType = {
    id: number | null
    content: string | null
  }

  export type ShortReviewOptionMaxAggregateOutputType = {
    id: number | null
    content: string | null
  }

  export type ShortReviewOptionCountAggregateOutputType = {
    id: number
    content: number
    _all: number
  }


  export type ShortReviewOptionAvgAggregateInputType = {
    id?: true
  }

  export type ShortReviewOptionSumAggregateInputType = {
    id?: true
  }

  export type ShortReviewOptionMinAggregateInputType = {
    id?: true
    content?: true
  }

  export type ShortReviewOptionMaxAggregateInputType = {
    id?: true
    content?: true
  }

  export type ShortReviewOptionCountAggregateInputType = {
    id?: true
    content?: true
    _all?: true
  }

  export type ShortReviewOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShortReviewOption to aggregate.
     */
    where?: ShortReviewOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShortReviewOptions to fetch.
     */
    orderBy?: ShortReviewOptionOrderByWithRelationInput | ShortReviewOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShortReviewOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShortReviewOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShortReviewOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShortReviewOptions
    **/
    _count?: true | ShortReviewOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShortReviewOptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShortReviewOptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShortReviewOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShortReviewOptionMaxAggregateInputType
  }

  export type GetShortReviewOptionAggregateType<T extends ShortReviewOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateShortReviewOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShortReviewOption[P]>
      : GetScalarType<T[P], AggregateShortReviewOption[P]>
  }




  export type ShortReviewOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShortReviewOptionWhereInput
    orderBy?: ShortReviewOptionOrderByWithAggregationInput | ShortReviewOptionOrderByWithAggregationInput[]
    by: ShortReviewOptionScalarFieldEnum[] | ShortReviewOptionScalarFieldEnum
    having?: ShortReviewOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShortReviewOptionCountAggregateInputType | true
    _avg?: ShortReviewOptionAvgAggregateInputType
    _sum?: ShortReviewOptionSumAggregateInputType
    _min?: ShortReviewOptionMinAggregateInputType
    _max?: ShortReviewOptionMaxAggregateInputType
  }

  export type ShortReviewOptionGroupByOutputType = {
    id: number
    content: string
    _count: ShortReviewOptionCountAggregateOutputType | null
    _avg: ShortReviewOptionAvgAggregateOutputType | null
    _sum: ShortReviewOptionSumAggregateOutputType | null
    _min: ShortReviewOptionMinAggregateOutputType | null
    _max: ShortReviewOptionMaxAggregateOutputType | null
  }

  type GetShortReviewOptionGroupByPayload<T extends ShortReviewOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShortReviewOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShortReviewOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShortReviewOptionGroupByOutputType[P]>
            : GetScalarType<T[P], ShortReviewOptionGroupByOutputType[P]>
        }
      >
    >


  export type ShortReviewOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    reviews?: boolean | ShortReviewOption$reviewsArgs<ExtArgs>
    _count?: boolean | ShortReviewOptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shortReviewOption"]>

  export type ShortReviewOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
  }, ExtArgs["result"]["shortReviewOption"]>

  export type ShortReviewOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
  }, ExtArgs["result"]["shortReviewOption"]>

  export type ShortReviewOptionSelectScalar = {
    id?: boolean
    content?: boolean
  }

  export type ShortReviewOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content", ExtArgs["result"]["shortReviewOption"]>
  export type ShortReviewOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | ShortReviewOption$reviewsArgs<ExtArgs>
    _count?: boolean | ShortReviewOptionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShortReviewOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ShortReviewOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ShortReviewOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShortReviewOption"
    objects: {
      reviews: Prisma.$ReviewShortReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
    }, ExtArgs["result"]["shortReviewOption"]>
    composites: {}
  }

  type ShortReviewOptionGetPayload<S extends boolean | null | undefined | ShortReviewOptionDefaultArgs> = $Result.GetResult<Prisma.$ShortReviewOptionPayload, S>

  type ShortReviewOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShortReviewOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShortReviewOptionCountAggregateInputType | true
    }

  export interface ShortReviewOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShortReviewOption'], meta: { name: 'ShortReviewOption' } }
    /**
     * Find zero or one ShortReviewOption that matches the filter.
     * @param {ShortReviewOptionFindUniqueArgs} args - Arguments to find a ShortReviewOption
     * @example
     * // Get one ShortReviewOption
     * const shortReviewOption = await prisma.shortReviewOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShortReviewOptionFindUniqueArgs>(args: SelectSubset<T, ShortReviewOptionFindUniqueArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShortReviewOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShortReviewOptionFindUniqueOrThrowArgs} args - Arguments to find a ShortReviewOption
     * @example
     * // Get one ShortReviewOption
     * const shortReviewOption = await prisma.shortReviewOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShortReviewOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, ShortReviewOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShortReviewOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShortReviewOptionFindFirstArgs} args - Arguments to find a ShortReviewOption
     * @example
     * // Get one ShortReviewOption
     * const shortReviewOption = await prisma.shortReviewOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShortReviewOptionFindFirstArgs>(args?: SelectSubset<T, ShortReviewOptionFindFirstArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShortReviewOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShortReviewOptionFindFirstOrThrowArgs} args - Arguments to find a ShortReviewOption
     * @example
     * // Get one ShortReviewOption
     * const shortReviewOption = await prisma.shortReviewOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShortReviewOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, ShortReviewOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShortReviewOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShortReviewOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShortReviewOptions
     * const shortReviewOptions = await prisma.shortReviewOption.findMany()
     * 
     * // Get first 10 ShortReviewOptions
     * const shortReviewOptions = await prisma.shortReviewOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shortReviewOptionWithIdOnly = await prisma.shortReviewOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShortReviewOptionFindManyArgs>(args?: SelectSubset<T, ShortReviewOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShortReviewOption.
     * @param {ShortReviewOptionCreateArgs} args - Arguments to create a ShortReviewOption.
     * @example
     * // Create one ShortReviewOption
     * const ShortReviewOption = await prisma.shortReviewOption.create({
     *   data: {
     *     // ... data to create a ShortReviewOption
     *   }
     * })
     * 
     */
    create<T extends ShortReviewOptionCreateArgs>(args: SelectSubset<T, ShortReviewOptionCreateArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShortReviewOptions.
     * @param {ShortReviewOptionCreateManyArgs} args - Arguments to create many ShortReviewOptions.
     * @example
     * // Create many ShortReviewOptions
     * const shortReviewOption = await prisma.shortReviewOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShortReviewOptionCreateManyArgs>(args?: SelectSubset<T, ShortReviewOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShortReviewOptions and returns the data saved in the database.
     * @param {ShortReviewOptionCreateManyAndReturnArgs} args - Arguments to create many ShortReviewOptions.
     * @example
     * // Create many ShortReviewOptions
     * const shortReviewOption = await prisma.shortReviewOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShortReviewOptions and only return the `id`
     * const shortReviewOptionWithIdOnly = await prisma.shortReviewOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShortReviewOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, ShortReviewOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShortReviewOption.
     * @param {ShortReviewOptionDeleteArgs} args - Arguments to delete one ShortReviewOption.
     * @example
     * // Delete one ShortReviewOption
     * const ShortReviewOption = await prisma.shortReviewOption.delete({
     *   where: {
     *     // ... filter to delete one ShortReviewOption
     *   }
     * })
     * 
     */
    delete<T extends ShortReviewOptionDeleteArgs>(args: SelectSubset<T, ShortReviewOptionDeleteArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShortReviewOption.
     * @param {ShortReviewOptionUpdateArgs} args - Arguments to update one ShortReviewOption.
     * @example
     * // Update one ShortReviewOption
     * const shortReviewOption = await prisma.shortReviewOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShortReviewOptionUpdateArgs>(args: SelectSubset<T, ShortReviewOptionUpdateArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShortReviewOptions.
     * @param {ShortReviewOptionDeleteManyArgs} args - Arguments to filter ShortReviewOptions to delete.
     * @example
     * // Delete a few ShortReviewOptions
     * const { count } = await prisma.shortReviewOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShortReviewOptionDeleteManyArgs>(args?: SelectSubset<T, ShortReviewOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShortReviewOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShortReviewOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShortReviewOptions
     * const shortReviewOption = await prisma.shortReviewOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShortReviewOptionUpdateManyArgs>(args: SelectSubset<T, ShortReviewOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShortReviewOptions and returns the data updated in the database.
     * @param {ShortReviewOptionUpdateManyAndReturnArgs} args - Arguments to update many ShortReviewOptions.
     * @example
     * // Update many ShortReviewOptions
     * const shortReviewOption = await prisma.shortReviewOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShortReviewOptions and only return the `id`
     * const shortReviewOptionWithIdOnly = await prisma.shortReviewOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShortReviewOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, ShortReviewOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShortReviewOption.
     * @param {ShortReviewOptionUpsertArgs} args - Arguments to update or create a ShortReviewOption.
     * @example
     * // Update or create a ShortReviewOption
     * const shortReviewOption = await prisma.shortReviewOption.upsert({
     *   create: {
     *     // ... data to create a ShortReviewOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShortReviewOption we want to update
     *   }
     * })
     */
    upsert<T extends ShortReviewOptionUpsertArgs>(args: SelectSubset<T, ShortReviewOptionUpsertArgs<ExtArgs>>): Prisma__ShortReviewOptionClient<$Result.GetResult<Prisma.$ShortReviewOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShortReviewOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShortReviewOptionCountArgs} args - Arguments to filter ShortReviewOptions to count.
     * @example
     * // Count the number of ShortReviewOptions
     * const count = await prisma.shortReviewOption.count({
     *   where: {
     *     // ... the filter for the ShortReviewOptions we want to count
     *   }
     * })
    **/
    count<T extends ShortReviewOptionCountArgs>(
      args?: Subset<T, ShortReviewOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShortReviewOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShortReviewOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShortReviewOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShortReviewOptionAggregateArgs>(args: Subset<T, ShortReviewOptionAggregateArgs>): Prisma.PrismaPromise<GetShortReviewOptionAggregateType<T>>

    /**
     * Group by ShortReviewOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShortReviewOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShortReviewOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShortReviewOptionGroupByArgs['orderBy'] }
        : { orderBy?: ShortReviewOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShortReviewOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShortReviewOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShortReviewOption model
   */
  readonly fields: ShortReviewOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShortReviewOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShortReviewOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviews<T extends ShortReviewOption$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, ShortReviewOption$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewShortReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShortReviewOption model
   */
  interface ShortReviewOptionFieldRefs {
    readonly id: FieldRef<"ShortReviewOption", 'Int'>
    readonly content: FieldRef<"ShortReviewOption", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ShortReviewOption findUnique
   */
  export type ShortReviewOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * Filter, which ShortReviewOption to fetch.
     */
    where: ShortReviewOptionWhereUniqueInput
  }

  /**
   * ShortReviewOption findUniqueOrThrow
   */
  export type ShortReviewOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * Filter, which ShortReviewOption to fetch.
     */
    where: ShortReviewOptionWhereUniqueInput
  }

  /**
   * ShortReviewOption findFirst
   */
  export type ShortReviewOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * Filter, which ShortReviewOption to fetch.
     */
    where?: ShortReviewOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShortReviewOptions to fetch.
     */
    orderBy?: ShortReviewOptionOrderByWithRelationInput | ShortReviewOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShortReviewOptions.
     */
    cursor?: ShortReviewOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShortReviewOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShortReviewOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShortReviewOptions.
     */
    distinct?: ShortReviewOptionScalarFieldEnum | ShortReviewOptionScalarFieldEnum[]
  }

  /**
   * ShortReviewOption findFirstOrThrow
   */
  export type ShortReviewOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * Filter, which ShortReviewOption to fetch.
     */
    where?: ShortReviewOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShortReviewOptions to fetch.
     */
    orderBy?: ShortReviewOptionOrderByWithRelationInput | ShortReviewOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShortReviewOptions.
     */
    cursor?: ShortReviewOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShortReviewOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShortReviewOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShortReviewOptions.
     */
    distinct?: ShortReviewOptionScalarFieldEnum | ShortReviewOptionScalarFieldEnum[]
  }

  /**
   * ShortReviewOption findMany
   */
  export type ShortReviewOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * Filter, which ShortReviewOptions to fetch.
     */
    where?: ShortReviewOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShortReviewOptions to fetch.
     */
    orderBy?: ShortReviewOptionOrderByWithRelationInput | ShortReviewOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShortReviewOptions.
     */
    cursor?: ShortReviewOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShortReviewOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShortReviewOptions.
     */
    skip?: number
    distinct?: ShortReviewOptionScalarFieldEnum | ShortReviewOptionScalarFieldEnum[]
  }

  /**
   * ShortReviewOption create
   */
  export type ShortReviewOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a ShortReviewOption.
     */
    data: XOR<ShortReviewOptionCreateInput, ShortReviewOptionUncheckedCreateInput>
  }

  /**
   * ShortReviewOption createMany
   */
  export type ShortReviewOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShortReviewOptions.
     */
    data: ShortReviewOptionCreateManyInput | ShortReviewOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShortReviewOption createManyAndReturn
   */
  export type ShortReviewOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * The data used to create many ShortReviewOptions.
     */
    data: ShortReviewOptionCreateManyInput | ShortReviewOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShortReviewOption update
   */
  export type ShortReviewOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a ShortReviewOption.
     */
    data: XOR<ShortReviewOptionUpdateInput, ShortReviewOptionUncheckedUpdateInput>
    /**
     * Choose, which ShortReviewOption to update.
     */
    where: ShortReviewOptionWhereUniqueInput
  }

  /**
   * ShortReviewOption updateMany
   */
  export type ShortReviewOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShortReviewOptions.
     */
    data: XOR<ShortReviewOptionUpdateManyMutationInput, ShortReviewOptionUncheckedUpdateManyInput>
    /**
     * Filter which ShortReviewOptions to update
     */
    where?: ShortReviewOptionWhereInput
    /**
     * Limit how many ShortReviewOptions to update.
     */
    limit?: number
  }

  /**
   * ShortReviewOption updateManyAndReturn
   */
  export type ShortReviewOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * The data used to update ShortReviewOptions.
     */
    data: XOR<ShortReviewOptionUpdateManyMutationInput, ShortReviewOptionUncheckedUpdateManyInput>
    /**
     * Filter which ShortReviewOptions to update
     */
    where?: ShortReviewOptionWhereInput
    /**
     * Limit how many ShortReviewOptions to update.
     */
    limit?: number
  }

  /**
   * ShortReviewOption upsert
   */
  export type ShortReviewOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the ShortReviewOption to update in case it exists.
     */
    where: ShortReviewOptionWhereUniqueInput
    /**
     * In case the ShortReviewOption found by the `where` argument doesn't exist, create a new ShortReviewOption with this data.
     */
    create: XOR<ShortReviewOptionCreateInput, ShortReviewOptionUncheckedCreateInput>
    /**
     * In case the ShortReviewOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShortReviewOptionUpdateInput, ShortReviewOptionUncheckedUpdateInput>
  }

  /**
   * ShortReviewOption delete
   */
  export type ShortReviewOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
    /**
     * Filter which ShortReviewOption to delete.
     */
    where: ShortReviewOptionWhereUniqueInput
  }

  /**
   * ShortReviewOption deleteMany
   */
  export type ShortReviewOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShortReviewOptions to delete
     */
    where?: ShortReviewOptionWhereInput
    /**
     * Limit how many ShortReviewOptions to delete.
     */
    limit?: number
  }

  /**
   * ShortReviewOption.reviews
   */
  export type ShortReviewOption$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReviewShortReview
     */
    select?: ReviewShortReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReviewShortReview
     */
    omit?: ReviewShortReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewShortReviewInclude<ExtArgs> | null
    where?: ReviewShortReviewWhereInput
    orderBy?: ReviewShortReviewOrderByWithRelationInput | ReviewShortReviewOrderByWithRelationInput[]
    cursor?: ReviewShortReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewShortReviewScalarFieldEnum | ReviewShortReviewScalarFieldEnum[]
  }

  /**
   * ShortReviewOption without action
   */
  export type ShortReviewOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShortReviewOption
     */
    select?: ShortReviewOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShortReviewOption
     */
    omit?: ShortReviewOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShortReviewOptionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: string | null
    isRead: boolean | null
    content: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    isRead: boolean | null
    content: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    isRead: number
    content: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    isRead?: true
    content?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    isRead?: true
    content?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    isRead?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: string
    isRead: boolean
    content: string
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    isRead?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    isRead?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    isRead?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    isRead?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "isRead" | "content" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      isRead: boolean
      content: string
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly content: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model GroupBuyChat
   */

  export type AggregateGroupBuyChat = {
    _count: GroupBuyChatCountAggregateOutputType | null
    _avg: GroupBuyChatAvgAggregateOutputType | null
    _sum: GroupBuyChatSumAggregateOutputType | null
    _min: GroupBuyChatMinAggregateOutputType | null
    _max: GroupBuyChatMaxAggregateOutputType | null
  }

  export type GroupBuyChatAvgAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
  }

  export type GroupBuyChatSumAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
  }

  export type GroupBuyChatMinAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
    createdAt: Date | null
  }

  export type GroupBuyChatMaxAggregateOutputType = {
    id: number | null
    groupBuyId: number | null
    createdAt: Date | null
  }

  export type GroupBuyChatCountAggregateOutputType = {
    id: number
    groupBuyId: number
    createdAt: number
    _all: number
  }


  export type GroupBuyChatAvgAggregateInputType = {
    id?: true
    groupBuyId?: true
  }

  export type GroupBuyChatSumAggregateInputType = {
    id?: true
    groupBuyId?: true
  }

  export type GroupBuyChatMinAggregateInputType = {
    id?: true
    groupBuyId?: true
    createdAt?: true
  }

  export type GroupBuyChatMaxAggregateInputType = {
    id?: true
    groupBuyId?: true
    createdAt?: true
  }

  export type GroupBuyChatCountAggregateInputType = {
    id?: true
    groupBuyId?: true
    createdAt?: true
    _all?: true
  }

  export type GroupBuyChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyChat to aggregate.
     */
    where?: GroupBuyChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChats to fetch.
     */
    orderBy?: GroupBuyChatOrderByWithRelationInput | GroupBuyChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupBuyChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupBuyChats
    **/
    _count?: true | GroupBuyChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupBuyChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupBuyChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupBuyChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupBuyChatMaxAggregateInputType
  }

  export type GetGroupBuyChatAggregateType<T extends GroupBuyChatAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupBuyChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupBuyChat[P]>
      : GetScalarType<T[P], AggregateGroupBuyChat[P]>
  }




  export type GroupBuyChatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyChatWhereInput
    orderBy?: GroupBuyChatOrderByWithAggregationInput | GroupBuyChatOrderByWithAggregationInput[]
    by: GroupBuyChatScalarFieldEnum[] | GroupBuyChatScalarFieldEnum
    having?: GroupBuyChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupBuyChatCountAggregateInputType | true
    _avg?: GroupBuyChatAvgAggregateInputType
    _sum?: GroupBuyChatSumAggregateInputType
    _min?: GroupBuyChatMinAggregateInputType
    _max?: GroupBuyChatMaxAggregateInputType
  }

  export type GroupBuyChatGroupByOutputType = {
    id: number
    groupBuyId: number
    createdAt: Date
    _count: GroupBuyChatCountAggregateOutputType | null
    _avg: GroupBuyChatAvgAggregateOutputType | null
    _sum: GroupBuyChatSumAggregateOutputType | null
    _min: GroupBuyChatMinAggregateOutputType | null
    _max: GroupBuyChatMaxAggregateOutputType | null
  }

  type GetGroupBuyChatGroupByPayload<T extends GroupBuyChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupBuyChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupBuyChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupBuyChatGroupByOutputType[P]>
            : GetScalarType<T[P], GroupBuyChatGroupByOutputType[P]>
        }
      >
    >


  export type GroupBuyChatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupBuyId?: boolean
    createdAt?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
    messages?: boolean | GroupBuyChat$messagesArgs<ExtArgs>
    participants?: boolean | GroupBuyChat$participantsArgs<ExtArgs>
    _count?: boolean | GroupBuyChatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChat"]>

  export type GroupBuyChatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupBuyId?: boolean
    createdAt?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChat"]>

  export type GroupBuyChatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupBuyId?: boolean
    createdAt?: boolean
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChat"]>

  export type GroupBuyChatSelectScalar = {
    id?: boolean
    groupBuyId?: boolean
    createdAt?: boolean
  }

  export type GroupBuyChatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "groupBuyId" | "createdAt", ExtArgs["result"]["groupBuyChat"]>
  export type GroupBuyChatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
    messages?: boolean | GroupBuyChat$messagesArgs<ExtArgs>
    participants?: boolean | GroupBuyChat$participantsArgs<ExtArgs>
    _count?: boolean | GroupBuyChatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GroupBuyChatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }
  export type GroupBuyChatIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuy?: boolean | GroupBuyDefaultArgs<ExtArgs>
  }

  export type $GroupBuyChatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupBuyChat"
    objects: {
      groupBuy: Prisma.$GroupBuyPayload<ExtArgs>
      messages: Prisma.$GroupBuyChatMessagePayload<ExtArgs>[]
      participants: Prisma.$GroupBuyChatParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      groupBuyId: number
      createdAt: Date
    }, ExtArgs["result"]["groupBuyChat"]>
    composites: {}
  }

  type GroupBuyChatGetPayload<S extends boolean | null | undefined | GroupBuyChatDefaultArgs> = $Result.GetResult<Prisma.$GroupBuyChatPayload, S>

  type GroupBuyChatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupBuyChatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupBuyChatCountAggregateInputType | true
    }

  export interface GroupBuyChatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupBuyChat'], meta: { name: 'GroupBuyChat' } }
    /**
     * Find zero or one GroupBuyChat that matches the filter.
     * @param {GroupBuyChatFindUniqueArgs} args - Arguments to find a GroupBuyChat
     * @example
     * // Get one GroupBuyChat
     * const groupBuyChat = await prisma.groupBuyChat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupBuyChatFindUniqueArgs>(args: SelectSubset<T, GroupBuyChatFindUniqueArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GroupBuyChat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupBuyChatFindUniqueOrThrowArgs} args - Arguments to find a GroupBuyChat
     * @example
     * // Get one GroupBuyChat
     * const groupBuyChat = await prisma.groupBuyChat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupBuyChatFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupBuyChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyChat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatFindFirstArgs} args - Arguments to find a GroupBuyChat
     * @example
     * // Get one GroupBuyChat
     * const groupBuyChat = await prisma.groupBuyChat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupBuyChatFindFirstArgs>(args?: SelectSubset<T, GroupBuyChatFindFirstArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyChat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatFindFirstOrThrowArgs} args - Arguments to find a GroupBuyChat
     * @example
     * // Get one GroupBuyChat
     * const groupBuyChat = await prisma.groupBuyChat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupBuyChatFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupBuyChatFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GroupBuyChats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupBuyChats
     * const groupBuyChats = await prisma.groupBuyChat.findMany()
     * 
     * // Get first 10 GroupBuyChats
     * const groupBuyChats = await prisma.groupBuyChat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupBuyChatWithIdOnly = await prisma.groupBuyChat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupBuyChatFindManyArgs>(args?: SelectSubset<T, GroupBuyChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GroupBuyChat.
     * @param {GroupBuyChatCreateArgs} args - Arguments to create a GroupBuyChat.
     * @example
     * // Create one GroupBuyChat
     * const GroupBuyChat = await prisma.groupBuyChat.create({
     *   data: {
     *     // ... data to create a GroupBuyChat
     *   }
     * })
     * 
     */
    create<T extends GroupBuyChatCreateArgs>(args: SelectSubset<T, GroupBuyChatCreateArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GroupBuyChats.
     * @param {GroupBuyChatCreateManyArgs} args - Arguments to create many GroupBuyChats.
     * @example
     * // Create many GroupBuyChats
     * const groupBuyChat = await prisma.groupBuyChat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupBuyChatCreateManyArgs>(args?: SelectSubset<T, GroupBuyChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupBuyChats and returns the data saved in the database.
     * @param {GroupBuyChatCreateManyAndReturnArgs} args - Arguments to create many GroupBuyChats.
     * @example
     * // Create many GroupBuyChats
     * const groupBuyChat = await prisma.groupBuyChat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupBuyChats and only return the `id`
     * const groupBuyChatWithIdOnly = await prisma.groupBuyChat.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupBuyChatCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupBuyChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GroupBuyChat.
     * @param {GroupBuyChatDeleteArgs} args - Arguments to delete one GroupBuyChat.
     * @example
     * // Delete one GroupBuyChat
     * const GroupBuyChat = await prisma.groupBuyChat.delete({
     *   where: {
     *     // ... filter to delete one GroupBuyChat
     *   }
     * })
     * 
     */
    delete<T extends GroupBuyChatDeleteArgs>(args: SelectSubset<T, GroupBuyChatDeleteArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GroupBuyChat.
     * @param {GroupBuyChatUpdateArgs} args - Arguments to update one GroupBuyChat.
     * @example
     * // Update one GroupBuyChat
     * const groupBuyChat = await prisma.groupBuyChat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupBuyChatUpdateArgs>(args: SelectSubset<T, GroupBuyChatUpdateArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GroupBuyChats.
     * @param {GroupBuyChatDeleteManyArgs} args - Arguments to filter GroupBuyChats to delete.
     * @example
     * // Delete a few GroupBuyChats
     * const { count } = await prisma.groupBuyChat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupBuyChatDeleteManyArgs>(args?: SelectSubset<T, GroupBuyChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupBuyChats
     * const groupBuyChat = await prisma.groupBuyChat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupBuyChatUpdateManyArgs>(args: SelectSubset<T, GroupBuyChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyChats and returns the data updated in the database.
     * @param {GroupBuyChatUpdateManyAndReturnArgs} args - Arguments to update many GroupBuyChats.
     * @example
     * // Update many GroupBuyChats
     * const groupBuyChat = await prisma.groupBuyChat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GroupBuyChats and only return the `id`
     * const groupBuyChatWithIdOnly = await prisma.groupBuyChat.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupBuyChatUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupBuyChatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GroupBuyChat.
     * @param {GroupBuyChatUpsertArgs} args - Arguments to update or create a GroupBuyChat.
     * @example
     * // Update or create a GroupBuyChat
     * const groupBuyChat = await prisma.groupBuyChat.upsert({
     *   create: {
     *     // ... data to create a GroupBuyChat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupBuyChat we want to update
     *   }
     * })
     */
    upsert<T extends GroupBuyChatUpsertArgs>(args: SelectSubset<T, GroupBuyChatUpsertArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GroupBuyChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatCountArgs} args - Arguments to filter GroupBuyChats to count.
     * @example
     * // Count the number of GroupBuyChats
     * const count = await prisma.groupBuyChat.count({
     *   where: {
     *     // ... the filter for the GroupBuyChats we want to count
     *   }
     * })
    **/
    count<T extends GroupBuyChatCountArgs>(
      args?: Subset<T, GroupBuyChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupBuyChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupBuyChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupBuyChatAggregateArgs>(args: Subset<T, GroupBuyChatAggregateArgs>): Prisma.PrismaPromise<GetGroupBuyChatAggregateType<T>>

    /**
     * Group by GroupBuyChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupBuyChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupBuyChatGroupByArgs['orderBy'] }
        : { orderBy?: GroupBuyChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupBuyChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupBuyChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupBuyChat model
   */
  readonly fields: GroupBuyChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupBuyChat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupBuyChatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    groupBuy<T extends GroupBuyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuyDefaultArgs<ExtArgs>>): Prisma__GroupBuyClient<$Result.GetResult<Prisma.$GroupBuyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends GroupBuyChat$messagesArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuyChat$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participants<T extends GroupBuyChat$participantsArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuyChat$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupBuyChat model
   */
  interface GroupBuyChatFieldRefs {
    readonly id: FieldRef<"GroupBuyChat", 'Int'>
    readonly groupBuyId: FieldRef<"GroupBuyChat", 'Int'>
    readonly createdAt: FieldRef<"GroupBuyChat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GroupBuyChat findUnique
   */
  export type GroupBuyChatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChat to fetch.
     */
    where: GroupBuyChatWhereUniqueInput
  }

  /**
   * GroupBuyChat findUniqueOrThrow
   */
  export type GroupBuyChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChat to fetch.
     */
    where: GroupBuyChatWhereUniqueInput
  }

  /**
   * GroupBuyChat findFirst
   */
  export type GroupBuyChatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChat to fetch.
     */
    where?: GroupBuyChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChats to fetch.
     */
    orderBy?: GroupBuyChatOrderByWithRelationInput | GroupBuyChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyChats.
     */
    cursor?: GroupBuyChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyChats.
     */
    distinct?: GroupBuyChatScalarFieldEnum | GroupBuyChatScalarFieldEnum[]
  }

  /**
   * GroupBuyChat findFirstOrThrow
   */
  export type GroupBuyChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChat to fetch.
     */
    where?: GroupBuyChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChats to fetch.
     */
    orderBy?: GroupBuyChatOrderByWithRelationInput | GroupBuyChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyChats.
     */
    cursor?: GroupBuyChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyChats.
     */
    distinct?: GroupBuyChatScalarFieldEnum | GroupBuyChatScalarFieldEnum[]
  }

  /**
   * GroupBuyChat findMany
   */
  export type GroupBuyChatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChats to fetch.
     */
    where?: GroupBuyChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChats to fetch.
     */
    orderBy?: GroupBuyChatOrderByWithRelationInput | GroupBuyChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupBuyChats.
     */
    cursor?: GroupBuyChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChats.
     */
    skip?: number
    distinct?: GroupBuyChatScalarFieldEnum | GroupBuyChatScalarFieldEnum[]
  }

  /**
   * GroupBuyChat create
   */
  export type GroupBuyChatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupBuyChat.
     */
    data: XOR<GroupBuyChatCreateInput, GroupBuyChatUncheckedCreateInput>
  }

  /**
   * GroupBuyChat createMany
   */
  export type GroupBuyChatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupBuyChats.
     */
    data: GroupBuyChatCreateManyInput | GroupBuyChatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupBuyChat createManyAndReturn
   */
  export type GroupBuyChatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * The data used to create many GroupBuyChats.
     */
    data: GroupBuyChatCreateManyInput | GroupBuyChatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyChat update
   */
  export type GroupBuyChatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupBuyChat.
     */
    data: XOR<GroupBuyChatUpdateInput, GroupBuyChatUncheckedUpdateInput>
    /**
     * Choose, which GroupBuyChat to update.
     */
    where: GroupBuyChatWhereUniqueInput
  }

  /**
   * GroupBuyChat updateMany
   */
  export type GroupBuyChatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupBuyChats.
     */
    data: XOR<GroupBuyChatUpdateManyMutationInput, GroupBuyChatUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyChats to update
     */
    where?: GroupBuyChatWhereInput
    /**
     * Limit how many GroupBuyChats to update.
     */
    limit?: number
  }

  /**
   * GroupBuyChat updateManyAndReturn
   */
  export type GroupBuyChatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * The data used to update GroupBuyChats.
     */
    data: XOR<GroupBuyChatUpdateManyMutationInput, GroupBuyChatUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyChats to update
     */
    where?: GroupBuyChatWhereInput
    /**
     * Limit how many GroupBuyChats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyChat upsert
   */
  export type GroupBuyChatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupBuyChat to update in case it exists.
     */
    where: GroupBuyChatWhereUniqueInput
    /**
     * In case the GroupBuyChat found by the `where` argument doesn't exist, create a new GroupBuyChat with this data.
     */
    create: XOR<GroupBuyChatCreateInput, GroupBuyChatUncheckedCreateInput>
    /**
     * In case the GroupBuyChat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupBuyChatUpdateInput, GroupBuyChatUncheckedUpdateInput>
  }

  /**
   * GroupBuyChat delete
   */
  export type GroupBuyChatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
    /**
     * Filter which GroupBuyChat to delete.
     */
    where: GroupBuyChatWhereUniqueInput
  }

  /**
   * GroupBuyChat deleteMany
   */
  export type GroupBuyChatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyChats to delete
     */
    where?: GroupBuyChatWhereInput
    /**
     * Limit how many GroupBuyChats to delete.
     */
    limit?: number
  }

  /**
   * GroupBuyChat.messages
   */
  export type GroupBuyChat$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    where?: GroupBuyChatMessageWhereInput
    orderBy?: GroupBuyChatMessageOrderByWithRelationInput | GroupBuyChatMessageOrderByWithRelationInput[]
    cursor?: GroupBuyChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyChatMessageScalarFieldEnum | GroupBuyChatMessageScalarFieldEnum[]
  }

  /**
   * GroupBuyChat.participants
   */
  export type GroupBuyChat$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    where?: GroupBuyChatParticipantWhereInput
    orderBy?: GroupBuyChatParticipantOrderByWithRelationInput | GroupBuyChatParticipantOrderByWithRelationInput[]
    cursor?: GroupBuyChatParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupBuyChatParticipantScalarFieldEnum | GroupBuyChatParticipantScalarFieldEnum[]
  }

  /**
   * GroupBuyChat without action
   */
  export type GroupBuyChatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChat
     */
    select?: GroupBuyChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChat
     */
    omit?: GroupBuyChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatInclude<ExtArgs> | null
  }


  /**
   * Model GroupBuyChatMessage
   */

  export type AggregateGroupBuyChatMessage = {
    _count: GroupBuyChatMessageCountAggregateOutputType | null
    _avg: GroupBuyChatMessageAvgAggregateOutputType | null
    _sum: GroupBuyChatMessageSumAggregateOutputType | null
    _min: GroupBuyChatMessageMinAggregateOutputType | null
    _max: GroupBuyChatMessageMaxAggregateOutputType | null
  }

  export type GroupBuyChatMessageAvgAggregateOutputType = {
    id: number | null
    groupBuyChatId: number | null
  }

  export type GroupBuyChatMessageSumAggregateOutputType = {
    id: number | null
    groupBuyChatId: number | null
  }

  export type GroupBuyChatMessageMinAggregateOutputType = {
    id: number | null
    senderId: string | null
    groupBuyChatId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type GroupBuyChatMessageMaxAggregateOutputType = {
    id: number | null
    senderId: string | null
    groupBuyChatId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type GroupBuyChatMessageCountAggregateOutputType = {
    id: number
    senderId: number
    groupBuyChatId: number
    content: number
    createdAt: number
    _all: number
  }


  export type GroupBuyChatMessageAvgAggregateInputType = {
    id?: true
    groupBuyChatId?: true
  }

  export type GroupBuyChatMessageSumAggregateInputType = {
    id?: true
    groupBuyChatId?: true
  }

  export type GroupBuyChatMessageMinAggregateInputType = {
    id?: true
    senderId?: true
    groupBuyChatId?: true
    content?: true
    createdAt?: true
  }

  export type GroupBuyChatMessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    groupBuyChatId?: true
    content?: true
    createdAt?: true
  }

  export type GroupBuyChatMessageCountAggregateInputType = {
    id?: true
    senderId?: true
    groupBuyChatId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type GroupBuyChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyChatMessage to aggregate.
     */
    where?: GroupBuyChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChatMessages to fetch.
     */
    orderBy?: GroupBuyChatMessageOrderByWithRelationInput | GroupBuyChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupBuyChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupBuyChatMessages
    **/
    _count?: true | GroupBuyChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupBuyChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupBuyChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupBuyChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupBuyChatMessageMaxAggregateInputType
  }

  export type GetGroupBuyChatMessageAggregateType<T extends GroupBuyChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupBuyChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupBuyChatMessage[P]>
      : GetScalarType<T[P], AggregateGroupBuyChatMessage[P]>
  }




  export type GroupBuyChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyChatMessageWhereInput
    orderBy?: GroupBuyChatMessageOrderByWithAggregationInput | GroupBuyChatMessageOrderByWithAggregationInput[]
    by: GroupBuyChatMessageScalarFieldEnum[] | GroupBuyChatMessageScalarFieldEnum
    having?: GroupBuyChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupBuyChatMessageCountAggregateInputType | true
    _avg?: GroupBuyChatMessageAvgAggregateInputType
    _sum?: GroupBuyChatMessageSumAggregateInputType
    _min?: GroupBuyChatMessageMinAggregateInputType
    _max?: GroupBuyChatMessageMaxAggregateInputType
  }

  export type GroupBuyChatMessageGroupByOutputType = {
    id: number
    senderId: string
    groupBuyChatId: number
    content: string
    createdAt: Date
    _count: GroupBuyChatMessageCountAggregateOutputType | null
    _avg: GroupBuyChatMessageAvgAggregateOutputType | null
    _sum: GroupBuyChatMessageSumAggregateOutputType | null
    _min: GroupBuyChatMessageMinAggregateOutputType | null
    _max: GroupBuyChatMessageMaxAggregateOutputType | null
  }

  type GetGroupBuyChatMessageGroupByPayload<T extends GroupBuyChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupBuyChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupBuyChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupBuyChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], GroupBuyChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type GroupBuyChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    groupBuyChatId?: boolean
    content?: boolean
    createdAt?: boolean
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChatMessage"]>

  export type GroupBuyChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    groupBuyChatId?: boolean
    content?: boolean
    createdAt?: boolean
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChatMessage"]>

  export type GroupBuyChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    groupBuyChatId?: boolean
    content?: boolean
    createdAt?: boolean
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChatMessage"]>

  export type GroupBuyChatMessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    groupBuyChatId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type GroupBuyChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderId" | "groupBuyChatId" | "content" | "createdAt", ExtArgs["result"]["groupBuyChatMessage"]>
  export type GroupBuyChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GroupBuyChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GroupBuyChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GroupBuyChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupBuyChatMessage"
    objects: {
      groupBuyChat: Prisma.$GroupBuyChatPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      senderId: string
      groupBuyChatId: number
      content: string
      createdAt: Date
    }, ExtArgs["result"]["groupBuyChatMessage"]>
    composites: {}
  }

  type GroupBuyChatMessageGetPayload<S extends boolean | null | undefined | GroupBuyChatMessageDefaultArgs> = $Result.GetResult<Prisma.$GroupBuyChatMessagePayload, S>

  type GroupBuyChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupBuyChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupBuyChatMessageCountAggregateInputType | true
    }

  export interface GroupBuyChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupBuyChatMessage'], meta: { name: 'GroupBuyChatMessage' } }
    /**
     * Find zero or one GroupBuyChatMessage that matches the filter.
     * @param {GroupBuyChatMessageFindUniqueArgs} args - Arguments to find a GroupBuyChatMessage
     * @example
     * // Get one GroupBuyChatMessage
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupBuyChatMessageFindUniqueArgs>(args: SelectSubset<T, GroupBuyChatMessageFindUniqueArgs<ExtArgs>>): Prisma__GroupBuyChatMessageClient<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GroupBuyChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupBuyChatMessageFindUniqueOrThrowArgs} args - Arguments to find a GroupBuyChatMessage
     * @example
     * // Get one GroupBuyChatMessage
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupBuyChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupBuyChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupBuyChatMessageClient<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatMessageFindFirstArgs} args - Arguments to find a GroupBuyChatMessage
     * @example
     * // Get one GroupBuyChatMessage
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupBuyChatMessageFindFirstArgs>(args?: SelectSubset<T, GroupBuyChatMessageFindFirstArgs<ExtArgs>>): Prisma__GroupBuyChatMessageClient<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatMessageFindFirstOrThrowArgs} args - Arguments to find a GroupBuyChatMessage
     * @example
     * // Get one GroupBuyChatMessage
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupBuyChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupBuyChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupBuyChatMessageClient<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GroupBuyChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupBuyChatMessages
     * const groupBuyChatMessages = await prisma.groupBuyChatMessage.findMany()
     * 
     * // Get first 10 GroupBuyChatMessages
     * const groupBuyChatMessages = await prisma.groupBuyChatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupBuyChatMessageWithIdOnly = await prisma.groupBuyChatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupBuyChatMessageFindManyArgs>(args?: SelectSubset<T, GroupBuyChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GroupBuyChatMessage.
     * @param {GroupBuyChatMessageCreateArgs} args - Arguments to create a GroupBuyChatMessage.
     * @example
     * // Create one GroupBuyChatMessage
     * const GroupBuyChatMessage = await prisma.groupBuyChatMessage.create({
     *   data: {
     *     // ... data to create a GroupBuyChatMessage
     *   }
     * })
     * 
     */
    create<T extends GroupBuyChatMessageCreateArgs>(args: SelectSubset<T, GroupBuyChatMessageCreateArgs<ExtArgs>>): Prisma__GroupBuyChatMessageClient<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GroupBuyChatMessages.
     * @param {GroupBuyChatMessageCreateManyArgs} args - Arguments to create many GroupBuyChatMessages.
     * @example
     * // Create many GroupBuyChatMessages
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupBuyChatMessageCreateManyArgs>(args?: SelectSubset<T, GroupBuyChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupBuyChatMessages and returns the data saved in the database.
     * @param {GroupBuyChatMessageCreateManyAndReturnArgs} args - Arguments to create many GroupBuyChatMessages.
     * @example
     * // Create many GroupBuyChatMessages
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupBuyChatMessages and only return the `id`
     * const groupBuyChatMessageWithIdOnly = await prisma.groupBuyChatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupBuyChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupBuyChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GroupBuyChatMessage.
     * @param {GroupBuyChatMessageDeleteArgs} args - Arguments to delete one GroupBuyChatMessage.
     * @example
     * // Delete one GroupBuyChatMessage
     * const GroupBuyChatMessage = await prisma.groupBuyChatMessage.delete({
     *   where: {
     *     // ... filter to delete one GroupBuyChatMessage
     *   }
     * })
     * 
     */
    delete<T extends GroupBuyChatMessageDeleteArgs>(args: SelectSubset<T, GroupBuyChatMessageDeleteArgs<ExtArgs>>): Prisma__GroupBuyChatMessageClient<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GroupBuyChatMessage.
     * @param {GroupBuyChatMessageUpdateArgs} args - Arguments to update one GroupBuyChatMessage.
     * @example
     * // Update one GroupBuyChatMessage
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupBuyChatMessageUpdateArgs>(args: SelectSubset<T, GroupBuyChatMessageUpdateArgs<ExtArgs>>): Prisma__GroupBuyChatMessageClient<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GroupBuyChatMessages.
     * @param {GroupBuyChatMessageDeleteManyArgs} args - Arguments to filter GroupBuyChatMessages to delete.
     * @example
     * // Delete a few GroupBuyChatMessages
     * const { count } = await prisma.groupBuyChatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupBuyChatMessageDeleteManyArgs>(args?: SelectSubset<T, GroupBuyChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupBuyChatMessages
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupBuyChatMessageUpdateManyArgs>(args: SelectSubset<T, GroupBuyChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyChatMessages and returns the data updated in the database.
     * @param {GroupBuyChatMessageUpdateManyAndReturnArgs} args - Arguments to update many GroupBuyChatMessages.
     * @example
     * // Update many GroupBuyChatMessages
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GroupBuyChatMessages and only return the `id`
     * const groupBuyChatMessageWithIdOnly = await prisma.groupBuyChatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupBuyChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupBuyChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GroupBuyChatMessage.
     * @param {GroupBuyChatMessageUpsertArgs} args - Arguments to update or create a GroupBuyChatMessage.
     * @example
     * // Update or create a GroupBuyChatMessage
     * const groupBuyChatMessage = await prisma.groupBuyChatMessage.upsert({
     *   create: {
     *     // ... data to create a GroupBuyChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupBuyChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends GroupBuyChatMessageUpsertArgs>(args: SelectSubset<T, GroupBuyChatMessageUpsertArgs<ExtArgs>>): Prisma__GroupBuyChatMessageClient<$Result.GetResult<Prisma.$GroupBuyChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GroupBuyChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatMessageCountArgs} args - Arguments to filter GroupBuyChatMessages to count.
     * @example
     * // Count the number of GroupBuyChatMessages
     * const count = await prisma.groupBuyChatMessage.count({
     *   where: {
     *     // ... the filter for the GroupBuyChatMessages we want to count
     *   }
     * })
    **/
    count<T extends GroupBuyChatMessageCountArgs>(
      args?: Subset<T, GroupBuyChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupBuyChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupBuyChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupBuyChatMessageAggregateArgs>(args: Subset<T, GroupBuyChatMessageAggregateArgs>): Prisma.PrismaPromise<GetGroupBuyChatMessageAggregateType<T>>

    /**
     * Group by GroupBuyChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupBuyChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupBuyChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: GroupBuyChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupBuyChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupBuyChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupBuyChatMessage model
   */
  readonly fields: GroupBuyChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupBuyChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupBuyChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    groupBuyChat<T extends GroupBuyChatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuyChatDefaultArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupBuyChatMessage model
   */
  interface GroupBuyChatMessageFieldRefs {
    readonly id: FieldRef<"GroupBuyChatMessage", 'Int'>
    readonly senderId: FieldRef<"GroupBuyChatMessage", 'String'>
    readonly groupBuyChatId: FieldRef<"GroupBuyChatMessage", 'Int'>
    readonly content: FieldRef<"GroupBuyChatMessage", 'String'>
    readonly createdAt: FieldRef<"GroupBuyChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GroupBuyChatMessage findUnique
   */
  export type GroupBuyChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatMessage to fetch.
     */
    where: GroupBuyChatMessageWhereUniqueInput
  }

  /**
   * GroupBuyChatMessage findUniqueOrThrow
   */
  export type GroupBuyChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatMessage to fetch.
     */
    where: GroupBuyChatMessageWhereUniqueInput
  }

  /**
   * GroupBuyChatMessage findFirst
   */
  export type GroupBuyChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatMessage to fetch.
     */
    where?: GroupBuyChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChatMessages to fetch.
     */
    orderBy?: GroupBuyChatMessageOrderByWithRelationInput | GroupBuyChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyChatMessages.
     */
    cursor?: GroupBuyChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyChatMessages.
     */
    distinct?: GroupBuyChatMessageScalarFieldEnum | GroupBuyChatMessageScalarFieldEnum[]
  }

  /**
   * GroupBuyChatMessage findFirstOrThrow
   */
  export type GroupBuyChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatMessage to fetch.
     */
    where?: GroupBuyChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChatMessages to fetch.
     */
    orderBy?: GroupBuyChatMessageOrderByWithRelationInput | GroupBuyChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyChatMessages.
     */
    cursor?: GroupBuyChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyChatMessages.
     */
    distinct?: GroupBuyChatMessageScalarFieldEnum | GroupBuyChatMessageScalarFieldEnum[]
  }

  /**
   * GroupBuyChatMessage findMany
   */
  export type GroupBuyChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatMessages to fetch.
     */
    where?: GroupBuyChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChatMessages to fetch.
     */
    orderBy?: GroupBuyChatMessageOrderByWithRelationInput | GroupBuyChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupBuyChatMessages.
     */
    cursor?: GroupBuyChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChatMessages.
     */
    skip?: number
    distinct?: GroupBuyChatMessageScalarFieldEnum | GroupBuyChatMessageScalarFieldEnum[]
  }

  /**
   * GroupBuyChatMessage create
   */
  export type GroupBuyChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupBuyChatMessage.
     */
    data: XOR<GroupBuyChatMessageCreateInput, GroupBuyChatMessageUncheckedCreateInput>
  }

  /**
   * GroupBuyChatMessage createMany
   */
  export type GroupBuyChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupBuyChatMessages.
     */
    data: GroupBuyChatMessageCreateManyInput | GroupBuyChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupBuyChatMessage createManyAndReturn
   */
  export type GroupBuyChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many GroupBuyChatMessages.
     */
    data: GroupBuyChatMessageCreateManyInput | GroupBuyChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyChatMessage update
   */
  export type GroupBuyChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupBuyChatMessage.
     */
    data: XOR<GroupBuyChatMessageUpdateInput, GroupBuyChatMessageUncheckedUpdateInput>
    /**
     * Choose, which GroupBuyChatMessage to update.
     */
    where: GroupBuyChatMessageWhereUniqueInput
  }

  /**
   * GroupBuyChatMessage updateMany
   */
  export type GroupBuyChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupBuyChatMessages.
     */
    data: XOR<GroupBuyChatMessageUpdateManyMutationInput, GroupBuyChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyChatMessages to update
     */
    where?: GroupBuyChatMessageWhereInput
    /**
     * Limit how many GroupBuyChatMessages to update.
     */
    limit?: number
  }

  /**
   * GroupBuyChatMessage updateManyAndReturn
   */
  export type GroupBuyChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update GroupBuyChatMessages.
     */
    data: XOR<GroupBuyChatMessageUpdateManyMutationInput, GroupBuyChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyChatMessages to update
     */
    where?: GroupBuyChatMessageWhereInput
    /**
     * Limit how many GroupBuyChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyChatMessage upsert
   */
  export type GroupBuyChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupBuyChatMessage to update in case it exists.
     */
    where: GroupBuyChatMessageWhereUniqueInput
    /**
     * In case the GroupBuyChatMessage found by the `where` argument doesn't exist, create a new GroupBuyChatMessage with this data.
     */
    create: XOR<GroupBuyChatMessageCreateInput, GroupBuyChatMessageUncheckedCreateInput>
    /**
     * In case the GroupBuyChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupBuyChatMessageUpdateInput, GroupBuyChatMessageUncheckedUpdateInput>
  }

  /**
   * GroupBuyChatMessage delete
   */
  export type GroupBuyChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
    /**
     * Filter which GroupBuyChatMessage to delete.
     */
    where: GroupBuyChatMessageWhereUniqueInput
  }

  /**
   * GroupBuyChatMessage deleteMany
   */
  export type GroupBuyChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyChatMessages to delete
     */
    where?: GroupBuyChatMessageWhereInput
    /**
     * Limit how many GroupBuyChatMessages to delete.
     */
    limit?: number
  }

  /**
   * GroupBuyChatMessage without action
   */
  export type GroupBuyChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatMessage
     */
    select?: GroupBuyChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatMessage
     */
    omit?: GroupBuyChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model GroupBuyChatParticipant
   */

  export type AggregateGroupBuyChatParticipant = {
    _count: GroupBuyChatParticipantCountAggregateOutputType | null
    _avg: GroupBuyChatParticipantAvgAggregateOutputType | null
    _sum: GroupBuyChatParticipantSumAggregateOutputType | null
    _min: GroupBuyChatParticipantMinAggregateOutputType | null
    _max: GroupBuyChatParticipantMaxAggregateOutputType | null
  }

  export type GroupBuyChatParticipantAvgAggregateOutputType = {
    id: number | null
    lastReadItemId: number | null
    groupBuyChatId: number | null
  }

  export type GroupBuyChatParticipantSumAggregateOutputType = {
    id: number | null
    lastReadItemId: number | null
    groupBuyChatId: number | null
  }

  export type GroupBuyChatParticipantMinAggregateOutputType = {
    id: number | null
    lastReadItemId: number | null
    userId: string | null
    groupBuyChatId: number | null
    joinedAt: Date | null
  }

  export type GroupBuyChatParticipantMaxAggregateOutputType = {
    id: number | null
    lastReadItemId: number | null
    userId: string | null
    groupBuyChatId: number | null
    joinedAt: Date | null
  }

  export type GroupBuyChatParticipantCountAggregateOutputType = {
    id: number
    lastReadItemId: number
    userId: number
    groupBuyChatId: number
    joinedAt: number
    _all: number
  }


  export type GroupBuyChatParticipantAvgAggregateInputType = {
    id?: true
    lastReadItemId?: true
    groupBuyChatId?: true
  }

  export type GroupBuyChatParticipantSumAggregateInputType = {
    id?: true
    lastReadItemId?: true
    groupBuyChatId?: true
  }

  export type GroupBuyChatParticipantMinAggregateInputType = {
    id?: true
    lastReadItemId?: true
    userId?: true
    groupBuyChatId?: true
    joinedAt?: true
  }

  export type GroupBuyChatParticipantMaxAggregateInputType = {
    id?: true
    lastReadItemId?: true
    userId?: true
    groupBuyChatId?: true
    joinedAt?: true
  }

  export type GroupBuyChatParticipantCountAggregateInputType = {
    id?: true
    lastReadItemId?: true
    userId?: true
    groupBuyChatId?: true
    joinedAt?: true
    _all?: true
  }

  export type GroupBuyChatParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyChatParticipant to aggregate.
     */
    where?: GroupBuyChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChatParticipants to fetch.
     */
    orderBy?: GroupBuyChatParticipantOrderByWithRelationInput | GroupBuyChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupBuyChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupBuyChatParticipants
    **/
    _count?: true | GroupBuyChatParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupBuyChatParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupBuyChatParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupBuyChatParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupBuyChatParticipantMaxAggregateInputType
  }

  export type GetGroupBuyChatParticipantAggregateType<T extends GroupBuyChatParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupBuyChatParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupBuyChatParticipant[P]>
      : GetScalarType<T[P], AggregateGroupBuyChatParticipant[P]>
  }




  export type GroupBuyChatParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupBuyChatParticipantWhereInput
    orderBy?: GroupBuyChatParticipantOrderByWithAggregationInput | GroupBuyChatParticipantOrderByWithAggregationInput[]
    by: GroupBuyChatParticipantScalarFieldEnum[] | GroupBuyChatParticipantScalarFieldEnum
    having?: GroupBuyChatParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupBuyChatParticipantCountAggregateInputType | true
    _avg?: GroupBuyChatParticipantAvgAggregateInputType
    _sum?: GroupBuyChatParticipantSumAggregateInputType
    _min?: GroupBuyChatParticipantMinAggregateInputType
    _max?: GroupBuyChatParticipantMaxAggregateInputType
  }

  export type GroupBuyChatParticipantGroupByOutputType = {
    id: number
    lastReadItemId: number | null
    userId: string
    groupBuyChatId: number
    joinedAt: Date
    _count: GroupBuyChatParticipantCountAggregateOutputType | null
    _avg: GroupBuyChatParticipantAvgAggregateOutputType | null
    _sum: GroupBuyChatParticipantSumAggregateOutputType | null
    _min: GroupBuyChatParticipantMinAggregateOutputType | null
    _max: GroupBuyChatParticipantMaxAggregateOutputType | null
  }

  type GetGroupBuyChatParticipantGroupByPayload<T extends GroupBuyChatParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupBuyChatParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupBuyChatParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupBuyChatParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], GroupBuyChatParticipantGroupByOutputType[P]>
        }
      >
    >


  export type GroupBuyChatParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastReadItemId?: boolean
    userId?: boolean
    groupBuyChatId?: boolean
    joinedAt?: boolean
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChatParticipant"]>

  export type GroupBuyChatParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastReadItemId?: boolean
    userId?: boolean
    groupBuyChatId?: boolean
    joinedAt?: boolean
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChatParticipant"]>

  export type GroupBuyChatParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastReadItemId?: boolean
    userId?: boolean
    groupBuyChatId?: boolean
    joinedAt?: boolean
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupBuyChatParticipant"]>

  export type GroupBuyChatParticipantSelectScalar = {
    id?: boolean
    lastReadItemId?: boolean
    userId?: boolean
    groupBuyChatId?: boolean
    joinedAt?: boolean
  }

  export type GroupBuyChatParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lastReadItemId" | "userId" | "groupBuyChatId" | "joinedAt", ExtArgs["result"]["groupBuyChatParticipant"]>
  export type GroupBuyChatParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GroupBuyChatParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GroupBuyChatParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groupBuyChat?: boolean | GroupBuyChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GroupBuyChatParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupBuyChatParticipant"
    objects: {
      groupBuyChat: Prisma.$GroupBuyChatPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lastReadItemId: number | null
      userId: string
      groupBuyChatId: number
      joinedAt: Date
    }, ExtArgs["result"]["groupBuyChatParticipant"]>
    composites: {}
  }

  type GroupBuyChatParticipantGetPayload<S extends boolean | null | undefined | GroupBuyChatParticipantDefaultArgs> = $Result.GetResult<Prisma.$GroupBuyChatParticipantPayload, S>

  type GroupBuyChatParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GroupBuyChatParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GroupBuyChatParticipantCountAggregateInputType | true
    }

  export interface GroupBuyChatParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupBuyChatParticipant'], meta: { name: 'GroupBuyChatParticipant' } }
    /**
     * Find zero or one GroupBuyChatParticipant that matches the filter.
     * @param {GroupBuyChatParticipantFindUniqueArgs} args - Arguments to find a GroupBuyChatParticipant
     * @example
     * // Get one GroupBuyChatParticipant
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GroupBuyChatParticipantFindUniqueArgs>(args: SelectSubset<T, GroupBuyChatParticipantFindUniqueArgs<ExtArgs>>): Prisma__GroupBuyChatParticipantClient<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GroupBuyChatParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GroupBuyChatParticipantFindUniqueOrThrowArgs} args - Arguments to find a GroupBuyChatParticipant
     * @example
     * // Get one GroupBuyChatParticipant
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GroupBuyChatParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, GroupBuyChatParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GroupBuyChatParticipantClient<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyChatParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatParticipantFindFirstArgs} args - Arguments to find a GroupBuyChatParticipant
     * @example
     * // Get one GroupBuyChatParticipant
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GroupBuyChatParticipantFindFirstArgs>(args?: SelectSubset<T, GroupBuyChatParticipantFindFirstArgs<ExtArgs>>): Prisma__GroupBuyChatParticipantClient<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GroupBuyChatParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatParticipantFindFirstOrThrowArgs} args - Arguments to find a GroupBuyChatParticipant
     * @example
     * // Get one GroupBuyChatParticipant
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GroupBuyChatParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, GroupBuyChatParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__GroupBuyChatParticipantClient<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GroupBuyChatParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupBuyChatParticipants
     * const groupBuyChatParticipants = await prisma.groupBuyChatParticipant.findMany()
     * 
     * // Get first 10 GroupBuyChatParticipants
     * const groupBuyChatParticipants = await prisma.groupBuyChatParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupBuyChatParticipantWithIdOnly = await prisma.groupBuyChatParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GroupBuyChatParticipantFindManyArgs>(args?: SelectSubset<T, GroupBuyChatParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GroupBuyChatParticipant.
     * @param {GroupBuyChatParticipantCreateArgs} args - Arguments to create a GroupBuyChatParticipant.
     * @example
     * // Create one GroupBuyChatParticipant
     * const GroupBuyChatParticipant = await prisma.groupBuyChatParticipant.create({
     *   data: {
     *     // ... data to create a GroupBuyChatParticipant
     *   }
     * })
     * 
     */
    create<T extends GroupBuyChatParticipantCreateArgs>(args: SelectSubset<T, GroupBuyChatParticipantCreateArgs<ExtArgs>>): Prisma__GroupBuyChatParticipantClient<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GroupBuyChatParticipants.
     * @param {GroupBuyChatParticipantCreateManyArgs} args - Arguments to create many GroupBuyChatParticipants.
     * @example
     * // Create many GroupBuyChatParticipants
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GroupBuyChatParticipantCreateManyArgs>(args?: SelectSubset<T, GroupBuyChatParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GroupBuyChatParticipants and returns the data saved in the database.
     * @param {GroupBuyChatParticipantCreateManyAndReturnArgs} args - Arguments to create many GroupBuyChatParticipants.
     * @example
     * // Create many GroupBuyChatParticipants
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GroupBuyChatParticipants and only return the `id`
     * const groupBuyChatParticipantWithIdOnly = await prisma.groupBuyChatParticipant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GroupBuyChatParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, GroupBuyChatParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GroupBuyChatParticipant.
     * @param {GroupBuyChatParticipantDeleteArgs} args - Arguments to delete one GroupBuyChatParticipant.
     * @example
     * // Delete one GroupBuyChatParticipant
     * const GroupBuyChatParticipant = await prisma.groupBuyChatParticipant.delete({
     *   where: {
     *     // ... filter to delete one GroupBuyChatParticipant
     *   }
     * })
     * 
     */
    delete<T extends GroupBuyChatParticipantDeleteArgs>(args: SelectSubset<T, GroupBuyChatParticipantDeleteArgs<ExtArgs>>): Prisma__GroupBuyChatParticipantClient<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GroupBuyChatParticipant.
     * @param {GroupBuyChatParticipantUpdateArgs} args - Arguments to update one GroupBuyChatParticipant.
     * @example
     * // Update one GroupBuyChatParticipant
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GroupBuyChatParticipantUpdateArgs>(args: SelectSubset<T, GroupBuyChatParticipantUpdateArgs<ExtArgs>>): Prisma__GroupBuyChatParticipantClient<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GroupBuyChatParticipants.
     * @param {GroupBuyChatParticipantDeleteManyArgs} args - Arguments to filter GroupBuyChatParticipants to delete.
     * @example
     * // Delete a few GroupBuyChatParticipants
     * const { count } = await prisma.groupBuyChatParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GroupBuyChatParticipantDeleteManyArgs>(args?: SelectSubset<T, GroupBuyChatParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyChatParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupBuyChatParticipants
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GroupBuyChatParticipantUpdateManyArgs>(args: SelectSubset<T, GroupBuyChatParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupBuyChatParticipants and returns the data updated in the database.
     * @param {GroupBuyChatParticipantUpdateManyAndReturnArgs} args - Arguments to update many GroupBuyChatParticipants.
     * @example
     * // Update many GroupBuyChatParticipants
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GroupBuyChatParticipants and only return the `id`
     * const groupBuyChatParticipantWithIdOnly = await prisma.groupBuyChatParticipant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GroupBuyChatParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, GroupBuyChatParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GroupBuyChatParticipant.
     * @param {GroupBuyChatParticipantUpsertArgs} args - Arguments to update or create a GroupBuyChatParticipant.
     * @example
     * // Update or create a GroupBuyChatParticipant
     * const groupBuyChatParticipant = await prisma.groupBuyChatParticipant.upsert({
     *   create: {
     *     // ... data to create a GroupBuyChatParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupBuyChatParticipant we want to update
     *   }
     * })
     */
    upsert<T extends GroupBuyChatParticipantUpsertArgs>(args: SelectSubset<T, GroupBuyChatParticipantUpsertArgs<ExtArgs>>): Prisma__GroupBuyChatParticipantClient<$Result.GetResult<Prisma.$GroupBuyChatParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GroupBuyChatParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatParticipantCountArgs} args - Arguments to filter GroupBuyChatParticipants to count.
     * @example
     * // Count the number of GroupBuyChatParticipants
     * const count = await prisma.groupBuyChatParticipant.count({
     *   where: {
     *     // ... the filter for the GroupBuyChatParticipants we want to count
     *   }
     * })
    **/
    count<T extends GroupBuyChatParticipantCountArgs>(
      args?: Subset<T, GroupBuyChatParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupBuyChatParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupBuyChatParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupBuyChatParticipantAggregateArgs>(args: Subset<T, GroupBuyChatParticipantAggregateArgs>): Prisma.PrismaPromise<GetGroupBuyChatParticipantAggregateType<T>>

    /**
     * Group by GroupBuyChatParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupBuyChatParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupBuyChatParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupBuyChatParticipantGroupByArgs['orderBy'] }
        : { orderBy?: GroupBuyChatParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupBuyChatParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupBuyChatParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupBuyChatParticipant model
   */
  readonly fields: GroupBuyChatParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupBuyChatParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupBuyChatParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    groupBuyChat<T extends GroupBuyChatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupBuyChatDefaultArgs<ExtArgs>>): Prisma__GroupBuyChatClient<$Result.GetResult<Prisma.$GroupBuyChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GroupBuyChatParticipant model
   */
  interface GroupBuyChatParticipantFieldRefs {
    readonly id: FieldRef<"GroupBuyChatParticipant", 'Int'>
    readonly lastReadItemId: FieldRef<"GroupBuyChatParticipant", 'Int'>
    readonly userId: FieldRef<"GroupBuyChatParticipant", 'String'>
    readonly groupBuyChatId: FieldRef<"GroupBuyChatParticipant", 'Int'>
    readonly joinedAt: FieldRef<"GroupBuyChatParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GroupBuyChatParticipant findUnique
   */
  export type GroupBuyChatParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatParticipant to fetch.
     */
    where: GroupBuyChatParticipantWhereUniqueInput
  }

  /**
   * GroupBuyChatParticipant findUniqueOrThrow
   */
  export type GroupBuyChatParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatParticipant to fetch.
     */
    where: GroupBuyChatParticipantWhereUniqueInput
  }

  /**
   * GroupBuyChatParticipant findFirst
   */
  export type GroupBuyChatParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatParticipant to fetch.
     */
    where?: GroupBuyChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChatParticipants to fetch.
     */
    orderBy?: GroupBuyChatParticipantOrderByWithRelationInput | GroupBuyChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyChatParticipants.
     */
    cursor?: GroupBuyChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyChatParticipants.
     */
    distinct?: GroupBuyChatParticipantScalarFieldEnum | GroupBuyChatParticipantScalarFieldEnum[]
  }

  /**
   * GroupBuyChatParticipant findFirstOrThrow
   */
  export type GroupBuyChatParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatParticipant to fetch.
     */
    where?: GroupBuyChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChatParticipants to fetch.
     */
    orderBy?: GroupBuyChatParticipantOrderByWithRelationInput | GroupBuyChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupBuyChatParticipants.
     */
    cursor?: GroupBuyChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupBuyChatParticipants.
     */
    distinct?: GroupBuyChatParticipantScalarFieldEnum | GroupBuyChatParticipantScalarFieldEnum[]
  }

  /**
   * GroupBuyChatParticipant findMany
   */
  export type GroupBuyChatParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which GroupBuyChatParticipants to fetch.
     */
    where?: GroupBuyChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupBuyChatParticipants to fetch.
     */
    orderBy?: GroupBuyChatParticipantOrderByWithRelationInput | GroupBuyChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupBuyChatParticipants.
     */
    cursor?: GroupBuyChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupBuyChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupBuyChatParticipants.
     */
    skip?: number
    distinct?: GroupBuyChatParticipantScalarFieldEnum | GroupBuyChatParticipantScalarFieldEnum[]
  }

  /**
   * GroupBuyChatParticipant create
   */
  export type GroupBuyChatParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupBuyChatParticipant.
     */
    data: XOR<GroupBuyChatParticipantCreateInput, GroupBuyChatParticipantUncheckedCreateInput>
  }

  /**
   * GroupBuyChatParticipant createMany
   */
  export type GroupBuyChatParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GroupBuyChatParticipants.
     */
    data: GroupBuyChatParticipantCreateManyInput | GroupBuyChatParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GroupBuyChatParticipant createManyAndReturn
   */
  export type GroupBuyChatParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many GroupBuyChatParticipants.
     */
    data: GroupBuyChatParticipantCreateManyInput | GroupBuyChatParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyChatParticipant update
   */
  export type GroupBuyChatParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupBuyChatParticipant.
     */
    data: XOR<GroupBuyChatParticipantUpdateInput, GroupBuyChatParticipantUncheckedUpdateInput>
    /**
     * Choose, which GroupBuyChatParticipant to update.
     */
    where: GroupBuyChatParticipantWhereUniqueInput
  }

  /**
   * GroupBuyChatParticipant updateMany
   */
  export type GroupBuyChatParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupBuyChatParticipants.
     */
    data: XOR<GroupBuyChatParticipantUpdateManyMutationInput, GroupBuyChatParticipantUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyChatParticipants to update
     */
    where?: GroupBuyChatParticipantWhereInput
    /**
     * Limit how many GroupBuyChatParticipants to update.
     */
    limit?: number
  }

  /**
   * GroupBuyChatParticipant updateManyAndReturn
   */
  export type GroupBuyChatParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * The data used to update GroupBuyChatParticipants.
     */
    data: XOR<GroupBuyChatParticipantUpdateManyMutationInput, GroupBuyChatParticipantUncheckedUpdateManyInput>
    /**
     * Filter which GroupBuyChatParticipants to update
     */
    where?: GroupBuyChatParticipantWhereInput
    /**
     * Limit how many GroupBuyChatParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GroupBuyChatParticipant upsert
   */
  export type GroupBuyChatParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupBuyChatParticipant to update in case it exists.
     */
    where: GroupBuyChatParticipantWhereUniqueInput
    /**
     * In case the GroupBuyChatParticipant found by the `where` argument doesn't exist, create a new GroupBuyChatParticipant with this data.
     */
    create: XOR<GroupBuyChatParticipantCreateInput, GroupBuyChatParticipantUncheckedCreateInput>
    /**
     * In case the GroupBuyChatParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupBuyChatParticipantUpdateInput, GroupBuyChatParticipantUncheckedUpdateInput>
  }

  /**
   * GroupBuyChatParticipant delete
   */
  export type GroupBuyChatParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
    /**
     * Filter which GroupBuyChatParticipant to delete.
     */
    where: GroupBuyChatParticipantWhereUniqueInput
  }

  /**
   * GroupBuyChatParticipant deleteMany
   */
  export type GroupBuyChatParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupBuyChatParticipants to delete
     */
    where?: GroupBuyChatParticipantWhereInput
    /**
     * Limit how many GroupBuyChatParticipants to delete.
     */
    limit?: number
  }

  /**
   * GroupBuyChatParticipant without action
   */
  export type GroupBuyChatParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupBuyChatParticipant
     */
    select?: GroupBuyChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GroupBuyChatParticipant
     */
    omit?: GroupBuyChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupBuyChatParticipantInclude<ExtArgs> | null
  }


  /**
   * Model ShareChat
   */

  export type AggregateShareChat = {
    _count: ShareChatCountAggregateOutputType | null
    _avg: ShareChatAvgAggregateOutputType | null
    _sum: ShareChatSumAggregateOutputType | null
    _min: ShareChatMinAggregateOutputType | null
    _max: ShareChatMaxAggregateOutputType | null
  }

  export type ShareChatAvgAggregateOutputType = {
    id: number | null
    shareId: number | null
  }

  export type ShareChatSumAggregateOutputType = {
    id: number | null
    shareId: number | null
  }

  export type ShareChatMinAggregateOutputType = {
    id: number | null
    shareId: number | null
    createdAt: Date | null
  }

  export type ShareChatMaxAggregateOutputType = {
    id: number | null
    shareId: number | null
    createdAt: Date | null
  }

  export type ShareChatCountAggregateOutputType = {
    id: number
    shareId: number
    createdAt: number
    _all: number
  }


  export type ShareChatAvgAggregateInputType = {
    id?: true
    shareId?: true
  }

  export type ShareChatSumAggregateInputType = {
    id?: true
    shareId?: true
  }

  export type ShareChatMinAggregateInputType = {
    id?: true
    shareId?: true
    createdAt?: true
  }

  export type ShareChatMaxAggregateInputType = {
    id?: true
    shareId?: true
    createdAt?: true
  }

  export type ShareChatCountAggregateInputType = {
    id?: true
    shareId?: true
    createdAt?: true
    _all?: true
  }

  export type ShareChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareChat to aggregate.
     */
    where?: ShareChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChats to fetch.
     */
    orderBy?: ShareChatOrderByWithRelationInput | ShareChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareChats
    **/
    _count?: true | ShareChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareChatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareChatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareChatMaxAggregateInputType
  }

  export type GetShareChatAggregateType<T extends ShareChatAggregateArgs> = {
        [P in keyof T & keyof AggregateShareChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareChat[P]>
      : GetScalarType<T[P], AggregateShareChat[P]>
  }




  export type ShareChatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareChatWhereInput
    orderBy?: ShareChatOrderByWithAggregationInput | ShareChatOrderByWithAggregationInput[]
    by: ShareChatScalarFieldEnum[] | ShareChatScalarFieldEnum
    having?: ShareChatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareChatCountAggregateInputType | true
    _avg?: ShareChatAvgAggregateInputType
    _sum?: ShareChatSumAggregateInputType
    _min?: ShareChatMinAggregateInputType
    _max?: ShareChatMaxAggregateInputType
  }

  export type ShareChatGroupByOutputType = {
    id: number
    shareId: number
    createdAt: Date
    _count: ShareChatCountAggregateOutputType | null
    _avg: ShareChatAvgAggregateOutputType | null
    _sum: ShareChatSumAggregateOutputType | null
    _min: ShareChatMinAggregateOutputType | null
    _max: ShareChatMaxAggregateOutputType | null
  }

  type GetShareChatGroupByPayload<T extends ShareChatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareChatGroupByOutputType[P]>
            : GetScalarType<T[P], ShareChatGroupByOutputType[P]>
        }
      >
    >


  export type ShareChatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    createdAt?: boolean
    share?: boolean | ShareDefaultArgs<ExtArgs>
    messages?: boolean | ShareChat$messagesArgs<ExtArgs>
    participants?: boolean | ShareChat$participantsArgs<ExtArgs>
    _count?: boolean | ShareChatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChat"]>

  export type ShareChatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    createdAt?: boolean
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChat"]>

  export type ShareChatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareId?: boolean
    createdAt?: boolean
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChat"]>

  export type ShareChatSelectScalar = {
    id?: boolean
    shareId?: boolean
    createdAt?: boolean
  }

  export type ShareChatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shareId" | "createdAt", ExtArgs["result"]["shareChat"]>
  export type ShareChatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ShareDefaultArgs<ExtArgs>
    messages?: boolean | ShareChat$messagesArgs<ExtArgs>
    participants?: boolean | ShareChat$participantsArgs<ExtArgs>
    _count?: boolean | ShareChatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ShareChatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }
  export type ShareChatIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    share?: boolean | ShareDefaultArgs<ExtArgs>
  }

  export type $ShareChatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareChat"
    objects: {
      share: Prisma.$SharePayload<ExtArgs>
      messages: Prisma.$ShareChatMessagePayload<ExtArgs>[]
      participants: Prisma.$ShareChatParticipantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shareId: number
      createdAt: Date
    }, ExtArgs["result"]["shareChat"]>
    composites: {}
  }

  type ShareChatGetPayload<S extends boolean | null | undefined | ShareChatDefaultArgs> = $Result.GetResult<Prisma.$ShareChatPayload, S>

  type ShareChatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShareChatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShareChatCountAggregateInputType | true
    }

  export interface ShareChatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareChat'], meta: { name: 'ShareChat' } }
    /**
     * Find zero or one ShareChat that matches the filter.
     * @param {ShareChatFindUniqueArgs} args - Arguments to find a ShareChat
     * @example
     * // Get one ShareChat
     * const shareChat = await prisma.shareChat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareChatFindUniqueArgs>(args: SelectSubset<T, ShareChatFindUniqueArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShareChat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShareChatFindUniqueOrThrowArgs} args - Arguments to find a ShareChat
     * @example
     * // Get one ShareChat
     * const shareChat = await prisma.shareChat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareChatFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareChatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareChat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatFindFirstArgs} args - Arguments to find a ShareChat
     * @example
     * // Get one ShareChat
     * const shareChat = await prisma.shareChat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareChatFindFirstArgs>(args?: SelectSubset<T, ShareChatFindFirstArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareChat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatFindFirstOrThrowArgs} args - Arguments to find a ShareChat
     * @example
     * // Get one ShareChat
     * const shareChat = await prisma.shareChat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareChatFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareChatFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShareChats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareChats
     * const shareChats = await prisma.shareChat.findMany()
     * 
     * // Get first 10 ShareChats
     * const shareChats = await prisma.shareChat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareChatWithIdOnly = await prisma.shareChat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareChatFindManyArgs>(args?: SelectSubset<T, ShareChatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShareChat.
     * @param {ShareChatCreateArgs} args - Arguments to create a ShareChat.
     * @example
     * // Create one ShareChat
     * const ShareChat = await prisma.shareChat.create({
     *   data: {
     *     // ... data to create a ShareChat
     *   }
     * })
     * 
     */
    create<T extends ShareChatCreateArgs>(args: SelectSubset<T, ShareChatCreateArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShareChats.
     * @param {ShareChatCreateManyArgs} args - Arguments to create many ShareChats.
     * @example
     * // Create many ShareChats
     * const shareChat = await prisma.shareChat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareChatCreateManyArgs>(args?: SelectSubset<T, ShareChatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShareChats and returns the data saved in the database.
     * @param {ShareChatCreateManyAndReturnArgs} args - Arguments to create many ShareChats.
     * @example
     * // Create many ShareChats
     * const shareChat = await prisma.shareChat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShareChats and only return the `id`
     * const shareChatWithIdOnly = await prisma.shareChat.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShareChatCreateManyAndReturnArgs>(args?: SelectSubset<T, ShareChatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShareChat.
     * @param {ShareChatDeleteArgs} args - Arguments to delete one ShareChat.
     * @example
     * // Delete one ShareChat
     * const ShareChat = await prisma.shareChat.delete({
     *   where: {
     *     // ... filter to delete one ShareChat
     *   }
     * })
     * 
     */
    delete<T extends ShareChatDeleteArgs>(args: SelectSubset<T, ShareChatDeleteArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShareChat.
     * @param {ShareChatUpdateArgs} args - Arguments to update one ShareChat.
     * @example
     * // Update one ShareChat
     * const shareChat = await prisma.shareChat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareChatUpdateArgs>(args: SelectSubset<T, ShareChatUpdateArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShareChats.
     * @param {ShareChatDeleteManyArgs} args - Arguments to filter ShareChats to delete.
     * @example
     * // Delete a few ShareChats
     * const { count } = await prisma.shareChat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareChatDeleteManyArgs>(args?: SelectSubset<T, ShareChatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareChats
     * const shareChat = await prisma.shareChat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareChatUpdateManyArgs>(args: SelectSubset<T, ShareChatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareChats and returns the data updated in the database.
     * @param {ShareChatUpdateManyAndReturnArgs} args - Arguments to update many ShareChats.
     * @example
     * // Update many ShareChats
     * const shareChat = await prisma.shareChat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShareChats and only return the `id`
     * const shareChatWithIdOnly = await prisma.shareChat.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShareChatUpdateManyAndReturnArgs>(args: SelectSubset<T, ShareChatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShareChat.
     * @param {ShareChatUpsertArgs} args - Arguments to update or create a ShareChat.
     * @example
     * // Update or create a ShareChat
     * const shareChat = await prisma.shareChat.upsert({
     *   create: {
     *     // ... data to create a ShareChat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareChat we want to update
     *   }
     * })
     */
    upsert<T extends ShareChatUpsertArgs>(args: SelectSubset<T, ShareChatUpsertArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShareChats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatCountArgs} args - Arguments to filter ShareChats to count.
     * @example
     * // Count the number of ShareChats
     * const count = await prisma.shareChat.count({
     *   where: {
     *     // ... the filter for the ShareChats we want to count
     *   }
     * })
    **/
    count<T extends ShareChatCountArgs>(
      args?: Subset<T, ShareChatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareChatAggregateArgs>(args: Subset<T, ShareChatAggregateArgs>): Prisma.PrismaPromise<GetShareChatAggregateType<T>>

    /**
     * Group by ShareChat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareChatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareChatGroupByArgs['orderBy'] }
        : { orderBy?: ShareChatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareChatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareChat model
   */
  readonly fields: ShareChatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareChat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareChatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    share<T extends ShareDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareDefaultArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends ShareChat$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ShareChat$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    participants<T extends ShareChat$participantsArgs<ExtArgs> = {}>(args?: Subset<T, ShareChat$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareChat model
   */
  interface ShareChatFieldRefs {
    readonly id: FieldRef<"ShareChat", 'Int'>
    readonly shareId: FieldRef<"ShareChat", 'Int'>
    readonly createdAt: FieldRef<"ShareChat", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShareChat findUnique
   */
  export type ShareChatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * Filter, which ShareChat to fetch.
     */
    where: ShareChatWhereUniqueInput
  }

  /**
   * ShareChat findUniqueOrThrow
   */
  export type ShareChatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * Filter, which ShareChat to fetch.
     */
    where: ShareChatWhereUniqueInput
  }

  /**
   * ShareChat findFirst
   */
  export type ShareChatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * Filter, which ShareChat to fetch.
     */
    where?: ShareChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChats to fetch.
     */
    orderBy?: ShareChatOrderByWithRelationInput | ShareChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareChats.
     */
    cursor?: ShareChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareChats.
     */
    distinct?: ShareChatScalarFieldEnum | ShareChatScalarFieldEnum[]
  }

  /**
   * ShareChat findFirstOrThrow
   */
  export type ShareChatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * Filter, which ShareChat to fetch.
     */
    where?: ShareChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChats to fetch.
     */
    orderBy?: ShareChatOrderByWithRelationInput | ShareChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareChats.
     */
    cursor?: ShareChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareChats.
     */
    distinct?: ShareChatScalarFieldEnum | ShareChatScalarFieldEnum[]
  }

  /**
   * ShareChat findMany
   */
  export type ShareChatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * Filter, which ShareChats to fetch.
     */
    where?: ShareChatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChats to fetch.
     */
    orderBy?: ShareChatOrderByWithRelationInput | ShareChatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareChats.
     */
    cursor?: ShareChatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChats.
     */
    skip?: number
    distinct?: ShareChatScalarFieldEnum | ShareChatScalarFieldEnum[]
  }

  /**
   * ShareChat create
   */
  export type ShareChatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareChat.
     */
    data: XOR<ShareChatCreateInput, ShareChatUncheckedCreateInput>
  }

  /**
   * ShareChat createMany
   */
  export type ShareChatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareChats.
     */
    data: ShareChatCreateManyInput | ShareChatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareChat createManyAndReturn
   */
  export type ShareChatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * The data used to create many ShareChats.
     */
    data: ShareChatCreateManyInput | ShareChatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareChat update
   */
  export type ShareChatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareChat.
     */
    data: XOR<ShareChatUpdateInput, ShareChatUncheckedUpdateInput>
    /**
     * Choose, which ShareChat to update.
     */
    where: ShareChatWhereUniqueInput
  }

  /**
   * ShareChat updateMany
   */
  export type ShareChatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareChats.
     */
    data: XOR<ShareChatUpdateManyMutationInput, ShareChatUncheckedUpdateManyInput>
    /**
     * Filter which ShareChats to update
     */
    where?: ShareChatWhereInput
    /**
     * Limit how many ShareChats to update.
     */
    limit?: number
  }

  /**
   * ShareChat updateManyAndReturn
   */
  export type ShareChatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * The data used to update ShareChats.
     */
    data: XOR<ShareChatUpdateManyMutationInput, ShareChatUncheckedUpdateManyInput>
    /**
     * Filter which ShareChats to update
     */
    where?: ShareChatWhereInput
    /**
     * Limit how many ShareChats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareChat upsert
   */
  export type ShareChatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareChat to update in case it exists.
     */
    where: ShareChatWhereUniqueInput
    /**
     * In case the ShareChat found by the `where` argument doesn't exist, create a new ShareChat with this data.
     */
    create: XOR<ShareChatCreateInput, ShareChatUncheckedCreateInput>
    /**
     * In case the ShareChat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareChatUpdateInput, ShareChatUncheckedUpdateInput>
  }

  /**
   * ShareChat delete
   */
  export type ShareChatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
    /**
     * Filter which ShareChat to delete.
     */
    where: ShareChatWhereUniqueInput
  }

  /**
   * ShareChat deleteMany
   */
  export type ShareChatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareChats to delete
     */
    where?: ShareChatWhereInput
    /**
     * Limit how many ShareChats to delete.
     */
    limit?: number
  }

  /**
   * ShareChat.messages
   */
  export type ShareChat$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    where?: ShareChatMessageWhereInput
    orderBy?: ShareChatMessageOrderByWithRelationInput | ShareChatMessageOrderByWithRelationInput[]
    cursor?: ShareChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareChatMessageScalarFieldEnum | ShareChatMessageScalarFieldEnum[]
  }

  /**
   * ShareChat.participants
   */
  export type ShareChat$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    where?: ShareChatParticipantWhereInput
    orderBy?: ShareChatParticipantOrderByWithRelationInput | ShareChatParticipantOrderByWithRelationInput[]
    cursor?: ShareChatParticipantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareChatParticipantScalarFieldEnum | ShareChatParticipantScalarFieldEnum[]
  }

  /**
   * ShareChat without action
   */
  export type ShareChatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChat
     */
    select?: ShareChatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChat
     */
    omit?: ShareChatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatInclude<ExtArgs> | null
  }


  /**
   * Model ShareChatMessage
   */

  export type AggregateShareChatMessage = {
    _count: ShareChatMessageCountAggregateOutputType | null
    _avg: ShareChatMessageAvgAggregateOutputType | null
    _sum: ShareChatMessageSumAggregateOutputType | null
    _min: ShareChatMessageMinAggregateOutputType | null
    _max: ShareChatMessageMaxAggregateOutputType | null
  }

  export type ShareChatMessageAvgAggregateOutputType = {
    id: number | null
    shareChatId: number | null
  }

  export type ShareChatMessageSumAggregateOutputType = {
    id: number | null
    shareChatId: number | null
  }

  export type ShareChatMessageMinAggregateOutputType = {
    id: number | null
    senderId: string | null
    shareChatId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type ShareChatMessageMaxAggregateOutputType = {
    id: number | null
    senderId: string | null
    shareChatId: number | null
    content: string | null
    createdAt: Date | null
  }

  export type ShareChatMessageCountAggregateOutputType = {
    id: number
    senderId: number
    shareChatId: number
    content: number
    createdAt: number
    _all: number
  }


  export type ShareChatMessageAvgAggregateInputType = {
    id?: true
    shareChatId?: true
  }

  export type ShareChatMessageSumAggregateInputType = {
    id?: true
    shareChatId?: true
  }

  export type ShareChatMessageMinAggregateInputType = {
    id?: true
    senderId?: true
    shareChatId?: true
    content?: true
    createdAt?: true
  }

  export type ShareChatMessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    shareChatId?: true
    content?: true
    createdAt?: true
  }

  export type ShareChatMessageCountAggregateInputType = {
    id?: true
    senderId?: true
    shareChatId?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type ShareChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareChatMessage to aggregate.
     */
    where?: ShareChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChatMessages to fetch.
     */
    orderBy?: ShareChatMessageOrderByWithRelationInput | ShareChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareChatMessages
    **/
    _count?: true | ShareChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareChatMessageMaxAggregateInputType
  }

  export type GetShareChatMessageAggregateType<T extends ShareChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateShareChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareChatMessage[P]>
      : GetScalarType<T[P], AggregateShareChatMessage[P]>
  }




  export type ShareChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareChatMessageWhereInput
    orderBy?: ShareChatMessageOrderByWithAggregationInput | ShareChatMessageOrderByWithAggregationInput[]
    by: ShareChatMessageScalarFieldEnum[] | ShareChatMessageScalarFieldEnum
    having?: ShareChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareChatMessageCountAggregateInputType | true
    _avg?: ShareChatMessageAvgAggregateInputType
    _sum?: ShareChatMessageSumAggregateInputType
    _min?: ShareChatMessageMinAggregateInputType
    _max?: ShareChatMessageMaxAggregateInputType
  }

  export type ShareChatMessageGroupByOutputType = {
    id: number
    senderId: string
    shareChatId: number
    content: string
    createdAt: Date
    _count: ShareChatMessageCountAggregateOutputType | null
    _avg: ShareChatMessageAvgAggregateOutputType | null
    _sum: ShareChatMessageSumAggregateOutputType | null
    _min: ShareChatMessageMinAggregateOutputType | null
    _max: ShareChatMessageMaxAggregateOutputType | null
  }

  type GetShareChatMessageGroupByPayload<T extends ShareChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ShareChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ShareChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    shareChatId?: boolean
    content?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChatMessage"]>

  export type ShareChatMessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    shareChatId?: boolean
    content?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChatMessage"]>

  export type ShareChatMessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    shareChatId?: boolean
    content?: boolean
    createdAt?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChatMessage"]>

  export type ShareChatMessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    shareChatId?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type ShareChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "senderId" | "shareChatId" | "content" | "createdAt", ExtArgs["result"]["shareChatMessage"]>
  export type ShareChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
  }
  export type ShareChatMessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
  }
  export type ShareChatMessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
  }

  export type $ShareChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareChatMessage"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      shareChat: Prisma.$ShareChatPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      senderId: string
      shareChatId: number
      content: string
      createdAt: Date
    }, ExtArgs["result"]["shareChatMessage"]>
    composites: {}
  }

  type ShareChatMessageGetPayload<S extends boolean | null | undefined | ShareChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ShareChatMessagePayload, S>

  type ShareChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShareChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShareChatMessageCountAggregateInputType | true
    }

  export interface ShareChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareChatMessage'], meta: { name: 'ShareChatMessage' } }
    /**
     * Find zero or one ShareChatMessage that matches the filter.
     * @param {ShareChatMessageFindUniqueArgs} args - Arguments to find a ShareChatMessage
     * @example
     * // Get one ShareChatMessage
     * const shareChatMessage = await prisma.shareChatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareChatMessageFindUniqueArgs>(args: SelectSubset<T, ShareChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ShareChatMessageClient<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShareChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShareChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ShareChatMessage
     * @example
     * // Get one ShareChatMessage
     * const shareChatMessage = await prisma.shareChatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareChatMessageClient<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatMessageFindFirstArgs} args - Arguments to find a ShareChatMessage
     * @example
     * // Get one ShareChatMessage
     * const shareChatMessage = await prisma.shareChatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareChatMessageFindFirstArgs>(args?: SelectSubset<T, ShareChatMessageFindFirstArgs<ExtArgs>>): Prisma__ShareChatMessageClient<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatMessageFindFirstOrThrowArgs} args - Arguments to find a ShareChatMessage
     * @example
     * // Get one ShareChatMessage
     * const shareChatMessage = await prisma.shareChatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareChatMessageClient<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShareChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareChatMessages
     * const shareChatMessages = await prisma.shareChatMessage.findMany()
     * 
     * // Get first 10 ShareChatMessages
     * const shareChatMessages = await prisma.shareChatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareChatMessageWithIdOnly = await prisma.shareChatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareChatMessageFindManyArgs>(args?: SelectSubset<T, ShareChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShareChatMessage.
     * @param {ShareChatMessageCreateArgs} args - Arguments to create a ShareChatMessage.
     * @example
     * // Create one ShareChatMessage
     * const ShareChatMessage = await prisma.shareChatMessage.create({
     *   data: {
     *     // ... data to create a ShareChatMessage
     *   }
     * })
     * 
     */
    create<T extends ShareChatMessageCreateArgs>(args: SelectSubset<T, ShareChatMessageCreateArgs<ExtArgs>>): Prisma__ShareChatMessageClient<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShareChatMessages.
     * @param {ShareChatMessageCreateManyArgs} args - Arguments to create many ShareChatMessages.
     * @example
     * // Create many ShareChatMessages
     * const shareChatMessage = await prisma.shareChatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareChatMessageCreateManyArgs>(args?: SelectSubset<T, ShareChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShareChatMessages and returns the data saved in the database.
     * @param {ShareChatMessageCreateManyAndReturnArgs} args - Arguments to create many ShareChatMessages.
     * @example
     * // Create many ShareChatMessages
     * const shareChatMessage = await prisma.shareChatMessage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShareChatMessages and only return the `id`
     * const shareChatMessageWithIdOnly = await prisma.shareChatMessage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShareChatMessageCreateManyAndReturnArgs>(args?: SelectSubset<T, ShareChatMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShareChatMessage.
     * @param {ShareChatMessageDeleteArgs} args - Arguments to delete one ShareChatMessage.
     * @example
     * // Delete one ShareChatMessage
     * const ShareChatMessage = await prisma.shareChatMessage.delete({
     *   where: {
     *     // ... filter to delete one ShareChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ShareChatMessageDeleteArgs>(args: SelectSubset<T, ShareChatMessageDeleteArgs<ExtArgs>>): Prisma__ShareChatMessageClient<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShareChatMessage.
     * @param {ShareChatMessageUpdateArgs} args - Arguments to update one ShareChatMessage.
     * @example
     * // Update one ShareChatMessage
     * const shareChatMessage = await prisma.shareChatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareChatMessageUpdateArgs>(args: SelectSubset<T, ShareChatMessageUpdateArgs<ExtArgs>>): Prisma__ShareChatMessageClient<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShareChatMessages.
     * @param {ShareChatMessageDeleteManyArgs} args - Arguments to filter ShareChatMessages to delete.
     * @example
     * // Delete a few ShareChatMessages
     * const { count } = await prisma.shareChatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareChatMessageDeleteManyArgs>(args?: SelectSubset<T, ShareChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareChatMessages
     * const shareChatMessage = await prisma.shareChatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareChatMessageUpdateManyArgs>(args: SelectSubset<T, ShareChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareChatMessages and returns the data updated in the database.
     * @param {ShareChatMessageUpdateManyAndReturnArgs} args - Arguments to update many ShareChatMessages.
     * @example
     * // Update many ShareChatMessages
     * const shareChatMessage = await prisma.shareChatMessage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShareChatMessages and only return the `id`
     * const shareChatMessageWithIdOnly = await prisma.shareChatMessage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShareChatMessageUpdateManyAndReturnArgs>(args: SelectSubset<T, ShareChatMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShareChatMessage.
     * @param {ShareChatMessageUpsertArgs} args - Arguments to update or create a ShareChatMessage.
     * @example
     * // Update or create a ShareChatMessage
     * const shareChatMessage = await prisma.shareChatMessage.upsert({
     *   create: {
     *     // ... data to create a ShareChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ShareChatMessageUpsertArgs>(args: SelectSubset<T, ShareChatMessageUpsertArgs<ExtArgs>>): Prisma__ShareChatMessageClient<$Result.GetResult<Prisma.$ShareChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShareChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatMessageCountArgs} args - Arguments to filter ShareChatMessages to count.
     * @example
     * // Count the number of ShareChatMessages
     * const count = await prisma.shareChatMessage.count({
     *   where: {
     *     // ... the filter for the ShareChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ShareChatMessageCountArgs>(
      args?: Subset<T, ShareChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareChatMessageAggregateArgs>(args: Subset<T, ShareChatMessageAggregateArgs>): Prisma.PrismaPromise<GetShareChatMessageAggregateType<T>>

    /**
     * Group by ShareChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ShareChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareChatMessage model
   */
  readonly fields: ShareChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    shareChat<T extends ShareChatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareChatDefaultArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareChatMessage model
   */
  interface ShareChatMessageFieldRefs {
    readonly id: FieldRef<"ShareChatMessage", 'Int'>
    readonly senderId: FieldRef<"ShareChatMessage", 'String'>
    readonly shareChatId: FieldRef<"ShareChatMessage", 'Int'>
    readonly content: FieldRef<"ShareChatMessage", 'String'>
    readonly createdAt: FieldRef<"ShareChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShareChatMessage findUnique
   */
  export type ShareChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatMessage to fetch.
     */
    where: ShareChatMessageWhereUniqueInput
  }

  /**
   * ShareChatMessage findUniqueOrThrow
   */
  export type ShareChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatMessage to fetch.
     */
    where: ShareChatMessageWhereUniqueInput
  }

  /**
   * ShareChatMessage findFirst
   */
  export type ShareChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatMessage to fetch.
     */
    where?: ShareChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChatMessages to fetch.
     */
    orderBy?: ShareChatMessageOrderByWithRelationInput | ShareChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareChatMessages.
     */
    cursor?: ShareChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareChatMessages.
     */
    distinct?: ShareChatMessageScalarFieldEnum | ShareChatMessageScalarFieldEnum[]
  }

  /**
   * ShareChatMessage findFirstOrThrow
   */
  export type ShareChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatMessage to fetch.
     */
    where?: ShareChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChatMessages to fetch.
     */
    orderBy?: ShareChatMessageOrderByWithRelationInput | ShareChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareChatMessages.
     */
    cursor?: ShareChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareChatMessages.
     */
    distinct?: ShareChatMessageScalarFieldEnum | ShareChatMessageScalarFieldEnum[]
  }

  /**
   * ShareChatMessage findMany
   */
  export type ShareChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatMessages to fetch.
     */
    where?: ShareChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChatMessages to fetch.
     */
    orderBy?: ShareChatMessageOrderByWithRelationInput | ShareChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareChatMessages.
     */
    cursor?: ShareChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChatMessages.
     */
    skip?: number
    distinct?: ShareChatMessageScalarFieldEnum | ShareChatMessageScalarFieldEnum[]
  }

  /**
   * ShareChatMessage create
   */
  export type ShareChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareChatMessage.
     */
    data: XOR<ShareChatMessageCreateInput, ShareChatMessageUncheckedCreateInput>
  }

  /**
   * ShareChatMessage createMany
   */
  export type ShareChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareChatMessages.
     */
    data: ShareChatMessageCreateManyInput | ShareChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareChatMessage createManyAndReturn
   */
  export type ShareChatMessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * The data used to create many ShareChatMessages.
     */
    data: ShareChatMessageCreateManyInput | ShareChatMessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareChatMessage update
   */
  export type ShareChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareChatMessage.
     */
    data: XOR<ShareChatMessageUpdateInput, ShareChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ShareChatMessage to update.
     */
    where: ShareChatMessageWhereUniqueInput
  }

  /**
   * ShareChatMessage updateMany
   */
  export type ShareChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareChatMessages.
     */
    data: XOR<ShareChatMessageUpdateManyMutationInput, ShareChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ShareChatMessages to update
     */
    where?: ShareChatMessageWhereInput
    /**
     * Limit how many ShareChatMessages to update.
     */
    limit?: number
  }

  /**
   * ShareChatMessage updateManyAndReturn
   */
  export type ShareChatMessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * The data used to update ShareChatMessages.
     */
    data: XOR<ShareChatMessageUpdateManyMutationInput, ShareChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ShareChatMessages to update
     */
    where?: ShareChatMessageWhereInput
    /**
     * Limit how many ShareChatMessages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareChatMessage upsert
   */
  export type ShareChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareChatMessage to update in case it exists.
     */
    where: ShareChatMessageWhereUniqueInput
    /**
     * In case the ShareChatMessage found by the `where` argument doesn't exist, create a new ShareChatMessage with this data.
     */
    create: XOR<ShareChatMessageCreateInput, ShareChatMessageUncheckedCreateInput>
    /**
     * In case the ShareChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareChatMessageUpdateInput, ShareChatMessageUncheckedUpdateInput>
  }

  /**
   * ShareChatMessage delete
   */
  export type ShareChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ShareChatMessage to delete.
     */
    where: ShareChatMessageWhereUniqueInput
  }

  /**
   * ShareChatMessage deleteMany
   */
  export type ShareChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareChatMessages to delete
     */
    where?: ShareChatMessageWhereInput
    /**
     * Limit how many ShareChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ShareChatMessage without action
   */
  export type ShareChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatMessage
     */
    select?: ShareChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatMessage
     */
    omit?: ShareChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model ShareChatParticipant
   */

  export type AggregateShareChatParticipant = {
    _count: ShareChatParticipantCountAggregateOutputType | null
    _avg: ShareChatParticipantAvgAggregateOutputType | null
    _sum: ShareChatParticipantSumAggregateOutputType | null
    _min: ShareChatParticipantMinAggregateOutputType | null
    _max: ShareChatParticipantMaxAggregateOutputType | null
  }

  export type ShareChatParticipantAvgAggregateOutputType = {
    id: number | null
    lastReadItemId: number | null
    shareChatId: number | null
  }

  export type ShareChatParticipantSumAggregateOutputType = {
    id: number | null
    lastReadItemId: number | null
    shareChatId: number | null
  }

  export type ShareChatParticipantMinAggregateOutputType = {
    id: number | null
    lastReadItemId: number | null
    userId: string | null
    shareChatId: number | null
    joinedAt: Date | null
  }

  export type ShareChatParticipantMaxAggregateOutputType = {
    id: number | null
    lastReadItemId: number | null
    userId: string | null
    shareChatId: number | null
    joinedAt: Date | null
  }

  export type ShareChatParticipantCountAggregateOutputType = {
    id: number
    lastReadItemId: number
    userId: number
    shareChatId: number
    joinedAt: number
    _all: number
  }


  export type ShareChatParticipantAvgAggregateInputType = {
    id?: true
    lastReadItemId?: true
    shareChatId?: true
  }

  export type ShareChatParticipantSumAggregateInputType = {
    id?: true
    lastReadItemId?: true
    shareChatId?: true
  }

  export type ShareChatParticipantMinAggregateInputType = {
    id?: true
    lastReadItemId?: true
    userId?: true
    shareChatId?: true
    joinedAt?: true
  }

  export type ShareChatParticipantMaxAggregateInputType = {
    id?: true
    lastReadItemId?: true
    userId?: true
    shareChatId?: true
    joinedAt?: true
  }

  export type ShareChatParticipantCountAggregateInputType = {
    id?: true
    lastReadItemId?: true
    userId?: true
    shareChatId?: true
    joinedAt?: true
    _all?: true
  }

  export type ShareChatParticipantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareChatParticipant to aggregate.
     */
    where?: ShareChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChatParticipants to fetch.
     */
    orderBy?: ShareChatParticipantOrderByWithRelationInput | ShareChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareChatParticipants
    **/
    _count?: true | ShareChatParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareChatParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareChatParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareChatParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareChatParticipantMaxAggregateInputType
  }

  export type GetShareChatParticipantAggregateType<T extends ShareChatParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateShareChatParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareChatParticipant[P]>
      : GetScalarType<T[P], AggregateShareChatParticipant[P]>
  }




  export type ShareChatParticipantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareChatParticipantWhereInput
    orderBy?: ShareChatParticipantOrderByWithAggregationInput | ShareChatParticipantOrderByWithAggregationInput[]
    by: ShareChatParticipantScalarFieldEnum[] | ShareChatParticipantScalarFieldEnum
    having?: ShareChatParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareChatParticipantCountAggregateInputType | true
    _avg?: ShareChatParticipantAvgAggregateInputType
    _sum?: ShareChatParticipantSumAggregateInputType
    _min?: ShareChatParticipantMinAggregateInputType
    _max?: ShareChatParticipantMaxAggregateInputType
  }

  export type ShareChatParticipantGroupByOutputType = {
    id: number
    lastReadItemId: number | null
    userId: string
    shareChatId: number
    joinedAt: Date
    _count: ShareChatParticipantCountAggregateOutputType | null
    _avg: ShareChatParticipantAvgAggregateOutputType | null
    _sum: ShareChatParticipantSumAggregateOutputType | null
    _min: ShareChatParticipantMinAggregateOutputType | null
    _max: ShareChatParticipantMaxAggregateOutputType | null
  }

  type GetShareChatParticipantGroupByPayload<T extends ShareChatParticipantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareChatParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareChatParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareChatParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ShareChatParticipantGroupByOutputType[P]>
        }
      >
    >


  export type ShareChatParticipantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastReadItemId?: boolean
    userId?: boolean
    shareChatId?: boolean
    joinedAt?: boolean
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChatParticipant"]>

  export type ShareChatParticipantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastReadItemId?: boolean
    userId?: boolean
    shareChatId?: boolean
    joinedAt?: boolean
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChatParticipant"]>

  export type ShareChatParticipantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lastReadItemId?: boolean
    userId?: boolean
    shareChatId?: boolean
    joinedAt?: boolean
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareChatParticipant"]>

  export type ShareChatParticipantSelectScalar = {
    id?: boolean
    lastReadItemId?: boolean
    userId?: boolean
    shareChatId?: boolean
    joinedAt?: boolean
  }

  export type ShareChatParticipantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "lastReadItemId" | "userId" | "shareChatId" | "joinedAt", ExtArgs["result"]["shareChatParticipant"]>
  export type ShareChatParticipantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShareChatParticipantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ShareChatParticipantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareChat?: boolean | ShareChatDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ShareChatParticipantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareChatParticipant"
    objects: {
      shareChat: Prisma.$ShareChatPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lastReadItemId: number | null
      userId: string
      shareChatId: number
      joinedAt: Date
    }, ExtArgs["result"]["shareChatParticipant"]>
    composites: {}
  }

  type ShareChatParticipantGetPayload<S extends boolean | null | undefined | ShareChatParticipantDefaultArgs> = $Result.GetResult<Prisma.$ShareChatParticipantPayload, S>

  type ShareChatParticipantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ShareChatParticipantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ShareChatParticipantCountAggregateInputType | true
    }

  export interface ShareChatParticipantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareChatParticipant'], meta: { name: 'ShareChatParticipant' } }
    /**
     * Find zero or one ShareChatParticipant that matches the filter.
     * @param {ShareChatParticipantFindUniqueArgs} args - Arguments to find a ShareChatParticipant
     * @example
     * // Get one ShareChatParticipant
     * const shareChatParticipant = await prisma.shareChatParticipant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareChatParticipantFindUniqueArgs>(args: SelectSubset<T, ShareChatParticipantFindUniqueArgs<ExtArgs>>): Prisma__ShareChatParticipantClient<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ShareChatParticipant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ShareChatParticipantFindUniqueOrThrowArgs} args - Arguments to find a ShareChatParticipant
     * @example
     * // Get one ShareChatParticipant
     * const shareChatParticipant = await prisma.shareChatParticipant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareChatParticipantFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareChatParticipantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareChatParticipantClient<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareChatParticipant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatParticipantFindFirstArgs} args - Arguments to find a ShareChatParticipant
     * @example
     * // Get one ShareChatParticipant
     * const shareChatParticipant = await prisma.shareChatParticipant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareChatParticipantFindFirstArgs>(args?: SelectSubset<T, ShareChatParticipantFindFirstArgs<ExtArgs>>): Prisma__ShareChatParticipantClient<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ShareChatParticipant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatParticipantFindFirstOrThrowArgs} args - Arguments to find a ShareChatParticipant
     * @example
     * // Get one ShareChatParticipant
     * const shareChatParticipant = await prisma.shareChatParticipant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareChatParticipantFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareChatParticipantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareChatParticipantClient<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ShareChatParticipants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatParticipantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareChatParticipants
     * const shareChatParticipants = await prisma.shareChatParticipant.findMany()
     * 
     * // Get first 10 ShareChatParticipants
     * const shareChatParticipants = await prisma.shareChatParticipant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareChatParticipantWithIdOnly = await prisma.shareChatParticipant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareChatParticipantFindManyArgs>(args?: SelectSubset<T, ShareChatParticipantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ShareChatParticipant.
     * @param {ShareChatParticipantCreateArgs} args - Arguments to create a ShareChatParticipant.
     * @example
     * // Create one ShareChatParticipant
     * const ShareChatParticipant = await prisma.shareChatParticipant.create({
     *   data: {
     *     // ... data to create a ShareChatParticipant
     *   }
     * })
     * 
     */
    create<T extends ShareChatParticipantCreateArgs>(args: SelectSubset<T, ShareChatParticipantCreateArgs<ExtArgs>>): Prisma__ShareChatParticipantClient<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ShareChatParticipants.
     * @param {ShareChatParticipantCreateManyArgs} args - Arguments to create many ShareChatParticipants.
     * @example
     * // Create many ShareChatParticipants
     * const shareChatParticipant = await prisma.shareChatParticipant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareChatParticipantCreateManyArgs>(args?: SelectSubset<T, ShareChatParticipantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ShareChatParticipants and returns the data saved in the database.
     * @param {ShareChatParticipantCreateManyAndReturnArgs} args - Arguments to create many ShareChatParticipants.
     * @example
     * // Create many ShareChatParticipants
     * const shareChatParticipant = await prisma.shareChatParticipant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ShareChatParticipants and only return the `id`
     * const shareChatParticipantWithIdOnly = await prisma.shareChatParticipant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ShareChatParticipantCreateManyAndReturnArgs>(args?: SelectSubset<T, ShareChatParticipantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ShareChatParticipant.
     * @param {ShareChatParticipantDeleteArgs} args - Arguments to delete one ShareChatParticipant.
     * @example
     * // Delete one ShareChatParticipant
     * const ShareChatParticipant = await prisma.shareChatParticipant.delete({
     *   where: {
     *     // ... filter to delete one ShareChatParticipant
     *   }
     * })
     * 
     */
    delete<T extends ShareChatParticipantDeleteArgs>(args: SelectSubset<T, ShareChatParticipantDeleteArgs<ExtArgs>>): Prisma__ShareChatParticipantClient<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ShareChatParticipant.
     * @param {ShareChatParticipantUpdateArgs} args - Arguments to update one ShareChatParticipant.
     * @example
     * // Update one ShareChatParticipant
     * const shareChatParticipant = await prisma.shareChatParticipant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareChatParticipantUpdateArgs>(args: SelectSubset<T, ShareChatParticipantUpdateArgs<ExtArgs>>): Prisma__ShareChatParticipantClient<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ShareChatParticipants.
     * @param {ShareChatParticipantDeleteManyArgs} args - Arguments to filter ShareChatParticipants to delete.
     * @example
     * // Delete a few ShareChatParticipants
     * const { count } = await prisma.shareChatParticipant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareChatParticipantDeleteManyArgs>(args?: SelectSubset<T, ShareChatParticipantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareChatParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareChatParticipants
     * const shareChatParticipant = await prisma.shareChatParticipant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareChatParticipantUpdateManyArgs>(args: SelectSubset<T, ShareChatParticipantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareChatParticipants and returns the data updated in the database.
     * @param {ShareChatParticipantUpdateManyAndReturnArgs} args - Arguments to update many ShareChatParticipants.
     * @example
     * // Update many ShareChatParticipants
     * const shareChatParticipant = await prisma.shareChatParticipant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ShareChatParticipants and only return the `id`
     * const shareChatParticipantWithIdOnly = await prisma.shareChatParticipant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ShareChatParticipantUpdateManyAndReturnArgs>(args: SelectSubset<T, ShareChatParticipantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ShareChatParticipant.
     * @param {ShareChatParticipantUpsertArgs} args - Arguments to update or create a ShareChatParticipant.
     * @example
     * // Update or create a ShareChatParticipant
     * const shareChatParticipant = await prisma.shareChatParticipant.upsert({
     *   create: {
     *     // ... data to create a ShareChatParticipant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareChatParticipant we want to update
     *   }
     * })
     */
    upsert<T extends ShareChatParticipantUpsertArgs>(args: SelectSubset<T, ShareChatParticipantUpsertArgs<ExtArgs>>): Prisma__ShareChatParticipantClient<$Result.GetResult<Prisma.$ShareChatParticipantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ShareChatParticipants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatParticipantCountArgs} args - Arguments to filter ShareChatParticipants to count.
     * @example
     * // Count the number of ShareChatParticipants
     * const count = await prisma.shareChatParticipant.count({
     *   where: {
     *     // ... the filter for the ShareChatParticipants we want to count
     *   }
     * })
    **/
    count<T extends ShareChatParticipantCountArgs>(
      args?: Subset<T, ShareChatParticipantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareChatParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareChatParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareChatParticipantAggregateArgs>(args: Subset<T, ShareChatParticipantAggregateArgs>): Prisma.PrismaPromise<GetShareChatParticipantAggregateType<T>>

    /**
     * Group by ShareChatParticipant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareChatParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareChatParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareChatParticipantGroupByArgs['orderBy'] }
        : { orderBy?: ShareChatParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareChatParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareChatParticipantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareChatParticipant model
   */
  readonly fields: ShareChatParticipantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareChatParticipant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareChatParticipantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shareChat<T extends ShareChatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareChatDefaultArgs<ExtArgs>>): Prisma__ShareChatClient<$Result.GetResult<Prisma.$ShareChatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareChatParticipant model
   */
  interface ShareChatParticipantFieldRefs {
    readonly id: FieldRef<"ShareChatParticipant", 'Int'>
    readonly lastReadItemId: FieldRef<"ShareChatParticipant", 'Int'>
    readonly userId: FieldRef<"ShareChatParticipant", 'String'>
    readonly shareChatId: FieldRef<"ShareChatParticipant", 'Int'>
    readonly joinedAt: FieldRef<"ShareChatParticipant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShareChatParticipant findUnique
   */
  export type ShareChatParticipantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatParticipant to fetch.
     */
    where: ShareChatParticipantWhereUniqueInput
  }

  /**
   * ShareChatParticipant findUniqueOrThrow
   */
  export type ShareChatParticipantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatParticipant to fetch.
     */
    where: ShareChatParticipantWhereUniqueInput
  }

  /**
   * ShareChatParticipant findFirst
   */
  export type ShareChatParticipantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatParticipant to fetch.
     */
    where?: ShareChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChatParticipants to fetch.
     */
    orderBy?: ShareChatParticipantOrderByWithRelationInput | ShareChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareChatParticipants.
     */
    cursor?: ShareChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareChatParticipants.
     */
    distinct?: ShareChatParticipantScalarFieldEnum | ShareChatParticipantScalarFieldEnum[]
  }

  /**
   * ShareChatParticipant findFirstOrThrow
   */
  export type ShareChatParticipantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatParticipant to fetch.
     */
    where?: ShareChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChatParticipants to fetch.
     */
    orderBy?: ShareChatParticipantOrderByWithRelationInput | ShareChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareChatParticipants.
     */
    cursor?: ShareChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChatParticipants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareChatParticipants.
     */
    distinct?: ShareChatParticipantScalarFieldEnum | ShareChatParticipantScalarFieldEnum[]
  }

  /**
   * ShareChatParticipant findMany
   */
  export type ShareChatParticipantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * Filter, which ShareChatParticipants to fetch.
     */
    where?: ShareChatParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareChatParticipants to fetch.
     */
    orderBy?: ShareChatParticipantOrderByWithRelationInput | ShareChatParticipantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareChatParticipants.
     */
    cursor?: ShareChatParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareChatParticipants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareChatParticipants.
     */
    skip?: number
    distinct?: ShareChatParticipantScalarFieldEnum | ShareChatParticipantScalarFieldEnum[]
  }

  /**
   * ShareChatParticipant create
   */
  export type ShareChatParticipantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareChatParticipant.
     */
    data: XOR<ShareChatParticipantCreateInput, ShareChatParticipantUncheckedCreateInput>
  }

  /**
   * ShareChatParticipant createMany
   */
  export type ShareChatParticipantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareChatParticipants.
     */
    data: ShareChatParticipantCreateManyInput | ShareChatParticipantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareChatParticipant createManyAndReturn
   */
  export type ShareChatParticipantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * The data used to create many ShareChatParticipants.
     */
    data: ShareChatParticipantCreateManyInput | ShareChatParticipantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareChatParticipant update
   */
  export type ShareChatParticipantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareChatParticipant.
     */
    data: XOR<ShareChatParticipantUpdateInput, ShareChatParticipantUncheckedUpdateInput>
    /**
     * Choose, which ShareChatParticipant to update.
     */
    where: ShareChatParticipantWhereUniqueInput
  }

  /**
   * ShareChatParticipant updateMany
   */
  export type ShareChatParticipantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareChatParticipants.
     */
    data: XOR<ShareChatParticipantUpdateManyMutationInput, ShareChatParticipantUncheckedUpdateManyInput>
    /**
     * Filter which ShareChatParticipants to update
     */
    where?: ShareChatParticipantWhereInput
    /**
     * Limit how many ShareChatParticipants to update.
     */
    limit?: number
  }

  /**
   * ShareChatParticipant updateManyAndReturn
   */
  export type ShareChatParticipantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * The data used to update ShareChatParticipants.
     */
    data: XOR<ShareChatParticipantUpdateManyMutationInput, ShareChatParticipantUncheckedUpdateManyInput>
    /**
     * Filter which ShareChatParticipants to update
     */
    where?: ShareChatParticipantWhereInput
    /**
     * Limit how many ShareChatParticipants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ShareChatParticipant upsert
   */
  export type ShareChatParticipantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareChatParticipant to update in case it exists.
     */
    where: ShareChatParticipantWhereUniqueInput
    /**
     * In case the ShareChatParticipant found by the `where` argument doesn't exist, create a new ShareChatParticipant with this data.
     */
    create: XOR<ShareChatParticipantCreateInput, ShareChatParticipantUncheckedCreateInput>
    /**
     * In case the ShareChatParticipant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareChatParticipantUpdateInput, ShareChatParticipantUncheckedUpdateInput>
  }

  /**
   * ShareChatParticipant delete
   */
  export type ShareChatParticipantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
    /**
     * Filter which ShareChatParticipant to delete.
     */
    where: ShareChatParticipantWhereUniqueInput
  }

  /**
   * ShareChatParticipant deleteMany
   */
  export type ShareChatParticipantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareChatParticipants to delete
     */
    where?: ShareChatParticipantWhereInput
    /**
     * Limit how many ShareChatParticipants to delete.
     */
    limit?: number
  }

  /**
   * ShareChatParticipant without action
   */
  export type ShareChatParticipantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareChatParticipant
     */
    select?: ShareChatParticipantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ShareChatParticipant
     */
    omit?: ShareChatParticipantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareChatParticipantInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NeighborhoodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    district: 'district',
    lat: 'lat',
    lng: 'lng'
  };

  export type NeighborhoodScalarFieldEnum = (typeof NeighborhoodScalarFieldEnum)[keyof typeof NeighborhoodScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    neighborhoodId: 'neighborhoodId',
    email: 'email',
    nickname: 'nickname',
    profileUrl: 'profileUrl',
    address: 'address',
    createdAt: 'createdAt',
    shareScore: 'shareScore',
    publicId: 'publicId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const GroupBuyScalarFieldEnum: {
    id: 'id',
    organizerId: 'organizerId',
    neighborhoodId: 'neighborhoodId',
    title: 'title',
    capacity: 'capacity',
    desiredItem: 'desiredItem',
    meetingDate: 'meetingDate',
    createdAt: 'createdAt',
    locationAddress: 'locationAddress',
    locationNote: 'locationNote',
    description: 'description',
    status: 'status'
  };

  export type GroupBuyScalarFieldEnum = (typeof GroupBuyScalarFieldEnum)[keyof typeof GroupBuyScalarFieldEnum]


  export const GroupBuyParticipantScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    groupBuyId: 'groupBuyId',
    createdAt: 'createdAt'
  };

  export type GroupBuyParticipantScalarFieldEnum = (typeof GroupBuyParticipantScalarFieldEnum)[keyof typeof GroupBuyParticipantScalarFieldEnum]


  export const GroupBuyImageScalarFieldEnum: {
    id: 'id',
    groupBuyId: 'groupBuyId',
    url: 'url'
  };

  export type GroupBuyImageScalarFieldEnum = (typeof GroupBuyImageScalarFieldEnum)[keyof typeof GroupBuyImageScalarFieldEnum]


  export const ShareScalarFieldEnum: {
    id: 'id',
    shareItemId: 'shareItemId',
    neighborhoodId: 'neighborhoodId',
    ownerId: 'ownerId',
    recipientId: 'recipientId',
    title: 'title',
    createdAt: 'createdAt',
    meetingDate: 'meetingDate',
    lat: 'lat',
    lng: 'lng',
    locationAddress: 'locationAddress',
    locationNote: 'locationNote',
    description: 'description',
    status: 'status'
  };

  export type ShareScalarFieldEnum = (typeof ShareScalarFieldEnum)[keyof typeof ShareScalarFieldEnum]


  export const ShareImageScalarFieldEnum: {
    id: 'id',
    shareId: 'shareId',
    url: 'url'
  };

  export type ShareImageScalarFieldEnum = (typeof ShareImageScalarFieldEnum)[keyof typeof ShareImageScalarFieldEnum]


  export const ShareItemScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ShareItemScalarFieldEnum = (typeof ShareItemScalarFieldEnum)[keyof typeof ShareItemScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    writerId: 'writerId',
    recipientId: 'recipientId',
    shareId: 'shareId',
    grade: 'grade',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const ReviewShortReviewScalarFieldEnum: {
    id: 'id',
    reviewId: 'reviewId',
    shortReviewOptionId: 'shortReviewOptionId'
  };

  export type ReviewShortReviewScalarFieldEnum = (typeof ReviewShortReviewScalarFieldEnum)[keyof typeof ReviewShortReviewScalarFieldEnum]


  export const ShortReviewOptionScalarFieldEnum: {
    id: 'id',
    content: 'content'
  };

  export type ShortReviewOptionScalarFieldEnum = (typeof ShortReviewOptionScalarFieldEnum)[keyof typeof ShortReviewOptionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    isRead: 'isRead',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const GroupBuyChatScalarFieldEnum: {
    id: 'id',
    groupBuyId: 'groupBuyId',
    createdAt: 'createdAt'
  };

  export type GroupBuyChatScalarFieldEnum = (typeof GroupBuyChatScalarFieldEnum)[keyof typeof GroupBuyChatScalarFieldEnum]


  export const GroupBuyChatMessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    groupBuyChatId: 'groupBuyChatId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type GroupBuyChatMessageScalarFieldEnum = (typeof GroupBuyChatMessageScalarFieldEnum)[keyof typeof GroupBuyChatMessageScalarFieldEnum]


  export const GroupBuyChatParticipantScalarFieldEnum: {
    id: 'id',
    lastReadItemId: 'lastReadItemId',
    userId: 'userId',
    groupBuyChatId: 'groupBuyChatId',
    joinedAt: 'joinedAt'
  };

  export type GroupBuyChatParticipantScalarFieldEnum = (typeof GroupBuyChatParticipantScalarFieldEnum)[keyof typeof GroupBuyChatParticipantScalarFieldEnum]


  export const ShareChatScalarFieldEnum: {
    id: 'id',
    shareId: 'shareId',
    createdAt: 'createdAt'
  };

  export type ShareChatScalarFieldEnum = (typeof ShareChatScalarFieldEnum)[keyof typeof ShareChatScalarFieldEnum]


  export const ShareChatMessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    shareChatId: 'shareChatId',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type ShareChatMessageScalarFieldEnum = (typeof ShareChatMessageScalarFieldEnum)[keyof typeof ShareChatMessageScalarFieldEnum]


  export const ShareChatParticipantScalarFieldEnum: {
    id: 'id',
    lastReadItemId: 'lastReadItemId',
    userId: 'userId',
    shareChatId: 'shareChatId',
    joinedAt: 'joinedAt'
  };

  export type ShareChatParticipantScalarFieldEnum = (typeof ShareChatParticipantScalarFieldEnum)[keyof typeof ShareChatParticipantScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type NeighborhoodWhereInput = {
    AND?: NeighborhoodWhereInput | NeighborhoodWhereInput[]
    OR?: NeighborhoodWhereInput[]
    NOT?: NeighborhoodWhereInput | NeighborhoodWhereInput[]
    id?: IntFilter<"Neighborhood"> | number
    name?: StringFilter<"Neighborhood"> | string
    district?: StringFilter<"Neighborhood"> | string
    lat?: FloatFilter<"Neighborhood"> | number
    lng?: FloatFilter<"Neighborhood"> | number
    grouBuys?: GroupBuyListRelationFilter
    shares?: ShareListRelationFilter
    users?: UserListRelationFilter
  }

  export type NeighborhoodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    district?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    grouBuys?: GroupBuyOrderByRelationAggregateInput
    shares?: ShareOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type NeighborhoodWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: NeighborhoodWhereInput | NeighborhoodWhereInput[]
    OR?: NeighborhoodWhereInput[]
    NOT?: NeighborhoodWhereInput | NeighborhoodWhereInput[]
    district?: StringFilter<"Neighborhood"> | string
    lat?: FloatFilter<"Neighborhood"> | number
    lng?: FloatFilter<"Neighborhood"> | number
    grouBuys?: GroupBuyListRelationFilter
    shares?: ShareListRelationFilter
    users?: UserListRelationFilter
  }, "id" | "name">

  export type NeighborhoodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    district?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    _count?: NeighborhoodCountOrderByAggregateInput
    _avg?: NeighborhoodAvgOrderByAggregateInput
    _max?: NeighborhoodMaxOrderByAggregateInput
    _min?: NeighborhoodMinOrderByAggregateInput
    _sum?: NeighborhoodSumOrderByAggregateInput
  }

  export type NeighborhoodScalarWhereWithAggregatesInput = {
    AND?: NeighborhoodScalarWhereWithAggregatesInput | NeighborhoodScalarWhereWithAggregatesInput[]
    OR?: NeighborhoodScalarWhereWithAggregatesInput[]
    NOT?: NeighborhoodScalarWhereWithAggregatesInput | NeighborhoodScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Neighborhood"> | number
    name?: StringWithAggregatesFilter<"Neighborhood"> | string
    district?: StringWithAggregatesFilter<"Neighborhood"> | string
    lat?: FloatWithAggregatesFilter<"Neighborhood"> | number
    lng?: FloatWithAggregatesFilter<"Neighborhood"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    neighborhoodId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    nickname?: StringFilter<"User"> | string
    profileUrl?: StringNullableFilter<"User"> | string | null
    address?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    shareScore?: IntFilter<"User"> | number
    publicId?: IntFilter<"User"> | number
    grouBuys?: GroupBuyListRelationFilter
    groupBuyChatMessages?: GroupBuyChatMessageListRelationFilter
    groupBuyChatParticipants?: GroupBuyChatParticipantListRelationFilter
    groupBuyParticipants?: GroupBuyParticipantListRelationFilter
    notifications?: NotificationListRelationFilter
    receivedReviews?: ReviewListRelationFilter
    writtenReviews?: ReviewListRelationFilter
    ownedShares?: ShareListRelationFilter
    receivedShares?: ShareListRelationFilter
    shareChatMessages?: ShareChatMessageListRelationFilter
    shareChatParticipants?: ShareChatParticipantListRelationFilter
    neighborhood?: XOR<NeighborhoodScalarRelationFilter, NeighborhoodWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    neighborhoodId?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profileUrl?: SortOrderInput | SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    shareScore?: SortOrder
    publicId?: SortOrder
    grouBuys?: GroupBuyOrderByRelationAggregateInput
    groupBuyChatMessages?: GroupBuyChatMessageOrderByRelationAggregateInput
    groupBuyChatParticipants?: GroupBuyChatParticipantOrderByRelationAggregateInput
    groupBuyParticipants?: GroupBuyParticipantOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    receivedReviews?: ReviewOrderByRelationAggregateInput
    writtenReviews?: ReviewOrderByRelationAggregateInput
    ownedShares?: ShareOrderByRelationAggregateInput
    receivedShares?: ShareOrderByRelationAggregateInput
    shareChatMessages?: ShareChatMessageOrderByRelationAggregateInput
    shareChatParticipants?: ShareChatParticipantOrderByRelationAggregateInput
    neighborhood?: NeighborhoodOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    publicId?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    neighborhoodId?: IntFilter<"User"> | number
    nickname?: StringFilter<"User"> | string
    profileUrl?: StringNullableFilter<"User"> | string | null
    address?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    shareScore?: IntFilter<"User"> | number
    grouBuys?: GroupBuyListRelationFilter
    groupBuyChatMessages?: GroupBuyChatMessageListRelationFilter
    groupBuyChatParticipants?: GroupBuyChatParticipantListRelationFilter
    groupBuyParticipants?: GroupBuyParticipantListRelationFilter
    notifications?: NotificationListRelationFilter
    receivedReviews?: ReviewListRelationFilter
    writtenReviews?: ReviewListRelationFilter
    ownedShares?: ShareListRelationFilter
    receivedShares?: ShareListRelationFilter
    shareChatMessages?: ShareChatMessageListRelationFilter
    shareChatParticipants?: ShareChatParticipantListRelationFilter
    neighborhood?: XOR<NeighborhoodScalarRelationFilter, NeighborhoodWhereInput>
  }, "id" | "email" | "publicId">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    neighborhoodId?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profileUrl?: SortOrderInput | SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    shareScore?: SortOrder
    publicId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    neighborhoodId?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    nickname?: StringWithAggregatesFilter<"User"> | string
    profileUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    shareScore?: IntWithAggregatesFilter<"User"> | number
    publicId?: IntWithAggregatesFilter<"User"> | number
  }

  export type GroupBuyWhereInput = {
    AND?: GroupBuyWhereInput | GroupBuyWhereInput[]
    OR?: GroupBuyWhereInput[]
    NOT?: GroupBuyWhereInput | GroupBuyWhereInput[]
    id?: IntFilter<"GroupBuy"> | number
    organizerId?: StringFilter<"GroupBuy"> | string
    neighborhoodId?: IntFilter<"GroupBuy"> | number
    title?: StringFilter<"GroupBuy"> | string
    capacity?: IntFilter<"GroupBuy"> | number
    desiredItem?: StringFilter<"GroupBuy"> | string
    meetingDate?: DateTimeFilter<"GroupBuy"> | Date | string
    createdAt?: DateTimeFilter<"GroupBuy"> | Date | string
    locationAddress?: StringFilter<"GroupBuy"> | string
    locationNote?: StringFilter<"GroupBuy"> | string
    description?: StringFilter<"GroupBuy"> | string
    status?: IntFilter<"GroupBuy"> | number
    neighborhood?: XOR<NeighborhoodScalarRelationFilter, NeighborhoodWhereInput>
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
    chats?: GroupBuyChatListRelationFilter
    images?: GroupBuyImageListRelationFilter
    participants?: GroupBuyParticipantListRelationFilter
  }

  export type GroupBuyOrderByWithRelationInput = {
    id?: SortOrder
    organizerId?: SortOrder
    neighborhoodId?: SortOrder
    title?: SortOrder
    capacity?: SortOrder
    desiredItem?: SortOrder
    meetingDate?: SortOrder
    createdAt?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
    neighborhood?: NeighborhoodOrderByWithRelationInput
    organizer?: UserOrderByWithRelationInput
    chats?: GroupBuyChatOrderByRelationAggregateInput
    images?: GroupBuyImageOrderByRelationAggregateInput
    participants?: GroupBuyParticipantOrderByRelationAggregateInput
  }

  export type GroupBuyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupBuyWhereInput | GroupBuyWhereInput[]
    OR?: GroupBuyWhereInput[]
    NOT?: GroupBuyWhereInput | GroupBuyWhereInput[]
    organizerId?: StringFilter<"GroupBuy"> | string
    neighborhoodId?: IntFilter<"GroupBuy"> | number
    title?: StringFilter<"GroupBuy"> | string
    capacity?: IntFilter<"GroupBuy"> | number
    desiredItem?: StringFilter<"GroupBuy"> | string
    meetingDate?: DateTimeFilter<"GroupBuy"> | Date | string
    createdAt?: DateTimeFilter<"GroupBuy"> | Date | string
    locationAddress?: StringFilter<"GroupBuy"> | string
    locationNote?: StringFilter<"GroupBuy"> | string
    description?: StringFilter<"GroupBuy"> | string
    status?: IntFilter<"GroupBuy"> | number
    neighborhood?: XOR<NeighborhoodScalarRelationFilter, NeighborhoodWhereInput>
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
    chats?: GroupBuyChatListRelationFilter
    images?: GroupBuyImageListRelationFilter
    participants?: GroupBuyParticipantListRelationFilter
  }, "id">

  export type GroupBuyOrderByWithAggregationInput = {
    id?: SortOrder
    organizerId?: SortOrder
    neighborhoodId?: SortOrder
    title?: SortOrder
    capacity?: SortOrder
    desiredItem?: SortOrder
    meetingDate?: SortOrder
    createdAt?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
    _count?: GroupBuyCountOrderByAggregateInput
    _avg?: GroupBuyAvgOrderByAggregateInput
    _max?: GroupBuyMaxOrderByAggregateInput
    _min?: GroupBuyMinOrderByAggregateInput
    _sum?: GroupBuySumOrderByAggregateInput
  }

  export type GroupBuyScalarWhereWithAggregatesInput = {
    AND?: GroupBuyScalarWhereWithAggregatesInput | GroupBuyScalarWhereWithAggregatesInput[]
    OR?: GroupBuyScalarWhereWithAggregatesInput[]
    NOT?: GroupBuyScalarWhereWithAggregatesInput | GroupBuyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GroupBuy"> | number
    organizerId?: StringWithAggregatesFilter<"GroupBuy"> | string
    neighborhoodId?: IntWithAggregatesFilter<"GroupBuy"> | number
    title?: StringWithAggregatesFilter<"GroupBuy"> | string
    capacity?: IntWithAggregatesFilter<"GroupBuy"> | number
    desiredItem?: StringWithAggregatesFilter<"GroupBuy"> | string
    meetingDate?: DateTimeWithAggregatesFilter<"GroupBuy"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"GroupBuy"> | Date | string
    locationAddress?: StringWithAggregatesFilter<"GroupBuy"> | string
    locationNote?: StringWithAggregatesFilter<"GroupBuy"> | string
    description?: StringWithAggregatesFilter<"GroupBuy"> | string
    status?: IntWithAggregatesFilter<"GroupBuy"> | number
  }

  export type GroupBuyParticipantWhereInput = {
    AND?: GroupBuyParticipantWhereInput | GroupBuyParticipantWhereInput[]
    OR?: GroupBuyParticipantWhereInput[]
    NOT?: GroupBuyParticipantWhereInput | GroupBuyParticipantWhereInput[]
    id?: IntFilter<"GroupBuyParticipant"> | number
    userId?: StringFilter<"GroupBuyParticipant"> | string
    groupBuyId?: IntFilter<"GroupBuyParticipant"> | number
    createdAt?: DateTimeFilter<"GroupBuyParticipant"> | Date | string
    groupBuy?: XOR<GroupBuyScalarRelationFilter, GroupBuyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GroupBuyParticipantOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
    groupBuy?: GroupBuyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GroupBuyParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupBuyParticipantWhereInput | GroupBuyParticipantWhereInput[]
    OR?: GroupBuyParticipantWhereInput[]
    NOT?: GroupBuyParticipantWhereInput | GroupBuyParticipantWhereInput[]
    userId?: StringFilter<"GroupBuyParticipant"> | string
    groupBuyId?: IntFilter<"GroupBuyParticipant"> | number
    createdAt?: DateTimeFilter<"GroupBuyParticipant"> | Date | string
    groupBuy?: XOR<GroupBuyScalarRelationFilter, GroupBuyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GroupBuyParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
    _count?: GroupBuyParticipantCountOrderByAggregateInput
    _avg?: GroupBuyParticipantAvgOrderByAggregateInput
    _max?: GroupBuyParticipantMaxOrderByAggregateInput
    _min?: GroupBuyParticipantMinOrderByAggregateInput
    _sum?: GroupBuyParticipantSumOrderByAggregateInput
  }

  export type GroupBuyParticipantScalarWhereWithAggregatesInput = {
    AND?: GroupBuyParticipantScalarWhereWithAggregatesInput | GroupBuyParticipantScalarWhereWithAggregatesInput[]
    OR?: GroupBuyParticipantScalarWhereWithAggregatesInput[]
    NOT?: GroupBuyParticipantScalarWhereWithAggregatesInput | GroupBuyParticipantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GroupBuyParticipant"> | number
    userId?: StringWithAggregatesFilter<"GroupBuyParticipant"> | string
    groupBuyId?: IntWithAggregatesFilter<"GroupBuyParticipant"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GroupBuyParticipant"> | Date | string
  }

  export type GroupBuyImageWhereInput = {
    AND?: GroupBuyImageWhereInput | GroupBuyImageWhereInput[]
    OR?: GroupBuyImageWhereInput[]
    NOT?: GroupBuyImageWhereInput | GroupBuyImageWhereInput[]
    id?: IntFilter<"GroupBuyImage"> | number
    groupBuyId?: IntFilter<"GroupBuyImage"> | number
    url?: StringFilter<"GroupBuyImage"> | string
    groupBuy?: XOR<GroupBuyScalarRelationFilter, GroupBuyWhereInput>
  }

  export type GroupBuyImageOrderByWithRelationInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    url?: SortOrder
    groupBuy?: GroupBuyOrderByWithRelationInput
  }

  export type GroupBuyImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupBuyImageWhereInput | GroupBuyImageWhereInput[]
    OR?: GroupBuyImageWhereInput[]
    NOT?: GroupBuyImageWhereInput | GroupBuyImageWhereInput[]
    groupBuyId?: IntFilter<"GroupBuyImage"> | number
    url?: StringFilter<"GroupBuyImage"> | string
    groupBuy?: XOR<GroupBuyScalarRelationFilter, GroupBuyWhereInput>
  }, "id">

  export type GroupBuyImageOrderByWithAggregationInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    url?: SortOrder
    _count?: GroupBuyImageCountOrderByAggregateInput
    _avg?: GroupBuyImageAvgOrderByAggregateInput
    _max?: GroupBuyImageMaxOrderByAggregateInput
    _min?: GroupBuyImageMinOrderByAggregateInput
    _sum?: GroupBuyImageSumOrderByAggregateInput
  }

  export type GroupBuyImageScalarWhereWithAggregatesInput = {
    AND?: GroupBuyImageScalarWhereWithAggregatesInput | GroupBuyImageScalarWhereWithAggregatesInput[]
    OR?: GroupBuyImageScalarWhereWithAggregatesInput[]
    NOT?: GroupBuyImageScalarWhereWithAggregatesInput | GroupBuyImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GroupBuyImage"> | number
    groupBuyId?: IntWithAggregatesFilter<"GroupBuyImage"> | number
    url?: StringWithAggregatesFilter<"GroupBuyImage"> | string
  }

  export type ShareWhereInput = {
    AND?: ShareWhereInput | ShareWhereInput[]
    OR?: ShareWhereInput[]
    NOT?: ShareWhereInput | ShareWhereInput[]
    id?: IntFilter<"Share"> | number
    shareItemId?: IntFilter<"Share"> | number
    neighborhoodId?: IntFilter<"Share"> | number
    ownerId?: StringFilter<"Share"> | string
    recipientId?: StringNullableFilter<"Share"> | string | null
    title?: StringFilter<"Share"> | string
    createdAt?: DateTimeFilter<"Share"> | Date | string
    meetingDate?: DateTimeNullableFilter<"Share"> | Date | string | null
    lat?: FloatFilter<"Share"> | number
    lng?: FloatFilter<"Share"> | number
    locationAddress?: StringFilter<"Share"> | string
    locationNote?: StringFilter<"Share"> | string
    description?: StringFilter<"Share"> | string
    status?: IntFilter<"Share"> | number
    reviews?: ReviewListRelationFilter
    neighborhood?: XOR<NeighborhoodScalarRelationFilter, NeighborhoodWhereInput>
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    recipient?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    shareItem?: XOR<ShareItemScalarRelationFilter, ShareItemWhereInput>
    chats?: ShareChatListRelationFilter
    images?: ShareImageListRelationFilter
  }

  export type ShareOrderByWithRelationInput = {
    id?: SortOrder
    shareItemId?: SortOrder
    neighborhoodId?: SortOrder
    ownerId?: SortOrder
    recipientId?: SortOrderInput | SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    meetingDate?: SortOrderInput | SortOrder
    lat?: SortOrder
    lng?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
    reviews?: ReviewOrderByRelationAggregateInput
    neighborhood?: NeighborhoodOrderByWithRelationInput
    owner?: UserOrderByWithRelationInput
    recipient?: UserOrderByWithRelationInput
    shareItem?: ShareItemOrderByWithRelationInput
    chats?: ShareChatOrderByRelationAggregateInput
    images?: ShareImageOrderByRelationAggregateInput
  }

  export type ShareWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareWhereInput | ShareWhereInput[]
    OR?: ShareWhereInput[]
    NOT?: ShareWhereInput | ShareWhereInput[]
    shareItemId?: IntFilter<"Share"> | number
    neighborhoodId?: IntFilter<"Share"> | number
    ownerId?: StringFilter<"Share"> | string
    recipientId?: StringNullableFilter<"Share"> | string | null
    title?: StringFilter<"Share"> | string
    createdAt?: DateTimeFilter<"Share"> | Date | string
    meetingDate?: DateTimeNullableFilter<"Share"> | Date | string | null
    lat?: FloatFilter<"Share"> | number
    lng?: FloatFilter<"Share"> | number
    locationAddress?: StringFilter<"Share"> | string
    locationNote?: StringFilter<"Share"> | string
    description?: StringFilter<"Share"> | string
    status?: IntFilter<"Share"> | number
    reviews?: ReviewListRelationFilter
    neighborhood?: XOR<NeighborhoodScalarRelationFilter, NeighborhoodWhereInput>
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    recipient?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    shareItem?: XOR<ShareItemScalarRelationFilter, ShareItemWhereInput>
    chats?: ShareChatListRelationFilter
    images?: ShareImageListRelationFilter
  }, "id">

  export type ShareOrderByWithAggregationInput = {
    id?: SortOrder
    shareItemId?: SortOrder
    neighborhoodId?: SortOrder
    ownerId?: SortOrder
    recipientId?: SortOrderInput | SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    meetingDate?: SortOrderInput | SortOrder
    lat?: SortOrder
    lng?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
    _count?: ShareCountOrderByAggregateInput
    _avg?: ShareAvgOrderByAggregateInput
    _max?: ShareMaxOrderByAggregateInput
    _min?: ShareMinOrderByAggregateInput
    _sum?: ShareSumOrderByAggregateInput
  }

  export type ShareScalarWhereWithAggregatesInput = {
    AND?: ShareScalarWhereWithAggregatesInput | ShareScalarWhereWithAggregatesInput[]
    OR?: ShareScalarWhereWithAggregatesInput[]
    NOT?: ShareScalarWhereWithAggregatesInput | ShareScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Share"> | number
    shareItemId?: IntWithAggregatesFilter<"Share"> | number
    neighborhoodId?: IntWithAggregatesFilter<"Share"> | number
    ownerId?: StringWithAggregatesFilter<"Share"> | string
    recipientId?: StringNullableWithAggregatesFilter<"Share"> | string | null
    title?: StringWithAggregatesFilter<"Share"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Share"> | Date | string
    meetingDate?: DateTimeNullableWithAggregatesFilter<"Share"> | Date | string | null
    lat?: FloatWithAggregatesFilter<"Share"> | number
    lng?: FloatWithAggregatesFilter<"Share"> | number
    locationAddress?: StringWithAggregatesFilter<"Share"> | string
    locationNote?: StringWithAggregatesFilter<"Share"> | string
    description?: StringWithAggregatesFilter<"Share"> | string
    status?: IntWithAggregatesFilter<"Share"> | number
  }

  export type ShareImageWhereInput = {
    AND?: ShareImageWhereInput | ShareImageWhereInput[]
    OR?: ShareImageWhereInput[]
    NOT?: ShareImageWhereInput | ShareImageWhereInput[]
    id?: IntFilter<"ShareImage"> | number
    shareId?: IntFilter<"ShareImage"> | number
    url?: StringFilter<"ShareImage"> | string
    share?: XOR<ShareScalarRelationFilter, ShareWhereInput>
  }

  export type ShareImageOrderByWithRelationInput = {
    id?: SortOrder
    shareId?: SortOrder
    url?: SortOrder
    share?: ShareOrderByWithRelationInput
  }

  export type ShareImageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareImageWhereInput | ShareImageWhereInput[]
    OR?: ShareImageWhereInput[]
    NOT?: ShareImageWhereInput | ShareImageWhereInput[]
    shareId?: IntFilter<"ShareImage"> | number
    url?: StringFilter<"ShareImage"> | string
    share?: XOR<ShareScalarRelationFilter, ShareWhereInput>
  }, "id">

  export type ShareImageOrderByWithAggregationInput = {
    id?: SortOrder
    shareId?: SortOrder
    url?: SortOrder
    _count?: ShareImageCountOrderByAggregateInput
    _avg?: ShareImageAvgOrderByAggregateInput
    _max?: ShareImageMaxOrderByAggregateInput
    _min?: ShareImageMinOrderByAggregateInput
    _sum?: ShareImageSumOrderByAggregateInput
  }

  export type ShareImageScalarWhereWithAggregatesInput = {
    AND?: ShareImageScalarWhereWithAggregatesInput | ShareImageScalarWhereWithAggregatesInput[]
    OR?: ShareImageScalarWhereWithAggregatesInput[]
    NOT?: ShareImageScalarWhereWithAggregatesInput | ShareImageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShareImage"> | number
    shareId?: IntWithAggregatesFilter<"ShareImage"> | number
    url?: StringWithAggregatesFilter<"ShareImage"> | string
  }

  export type ShareItemWhereInput = {
    AND?: ShareItemWhereInput | ShareItemWhereInput[]
    OR?: ShareItemWhereInput[]
    NOT?: ShareItemWhereInput | ShareItemWhereInput[]
    id?: IntFilter<"ShareItem"> | number
    name?: StringFilter<"ShareItem"> | string
    shares?: ShareListRelationFilter
  }

  export type ShareItemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    shares?: ShareOrderByRelationAggregateInput
  }

  export type ShareItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareItemWhereInput | ShareItemWhereInput[]
    OR?: ShareItemWhereInput[]
    NOT?: ShareItemWhereInput | ShareItemWhereInput[]
    name?: StringFilter<"ShareItem"> | string
    shares?: ShareListRelationFilter
  }, "id">

  export type ShareItemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ShareItemCountOrderByAggregateInput
    _avg?: ShareItemAvgOrderByAggregateInput
    _max?: ShareItemMaxOrderByAggregateInput
    _min?: ShareItemMinOrderByAggregateInput
    _sum?: ShareItemSumOrderByAggregateInput
  }

  export type ShareItemScalarWhereWithAggregatesInput = {
    AND?: ShareItemScalarWhereWithAggregatesInput | ShareItemScalarWhereWithAggregatesInput[]
    OR?: ShareItemScalarWhereWithAggregatesInput[]
    NOT?: ShareItemScalarWhereWithAggregatesInput | ShareItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShareItem"> | number
    name?: StringWithAggregatesFilter<"ShareItem"> | string
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    writerId?: StringFilter<"Review"> | string
    recipientId?: StringFilter<"Review"> | string
    shareId?: IntFilter<"Review"> | number
    grade?: IntFilter<"Review"> | number
    content?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    recipient?: XOR<UserScalarRelationFilter, UserWhereInput>
    share?: XOR<ShareScalarRelationFilter, ShareWhereInput>
    writer?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviews?: ReviewShortReviewListRelationFilter
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    writerId?: SortOrder
    recipientId?: SortOrder
    shareId?: SortOrder
    grade?: SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    recipient?: UserOrderByWithRelationInput
    share?: ShareOrderByWithRelationInput
    writer?: UserOrderByWithRelationInput
    reviews?: ReviewShortReviewOrderByRelationAggregateInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    writerId?: StringFilter<"Review"> | string
    recipientId?: StringFilter<"Review"> | string
    shareId?: IntFilter<"Review"> | number
    grade?: IntFilter<"Review"> | number
    content?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
    recipient?: XOR<UserScalarRelationFilter, UserWhereInput>
    share?: XOR<ShareScalarRelationFilter, ShareWhereInput>
    writer?: XOR<UserScalarRelationFilter, UserWhereInput>
    reviews?: ReviewShortReviewListRelationFilter
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    writerId?: SortOrder
    recipientId?: SortOrder
    shareId?: SortOrder
    grade?: SortOrder
    content?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    writerId?: StringWithAggregatesFilter<"Review"> | string
    recipientId?: StringWithAggregatesFilter<"Review"> | string
    shareId?: IntWithAggregatesFilter<"Review"> | number
    grade?: IntWithAggregatesFilter<"Review"> | number
    content?: StringNullableWithAggregatesFilter<"Review"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Review"> | Date | string
  }

  export type ReviewShortReviewWhereInput = {
    AND?: ReviewShortReviewWhereInput | ReviewShortReviewWhereInput[]
    OR?: ReviewShortReviewWhereInput[]
    NOT?: ReviewShortReviewWhereInput | ReviewShortReviewWhereInput[]
    id?: IntFilter<"ReviewShortReview"> | number
    reviewId?: IntFilter<"ReviewShortReview"> | number
    shortReviewOptionId?: IntFilter<"ReviewShortReview"> | number
    review?: XOR<ReviewScalarRelationFilter, ReviewWhereInput>
    shortReviewOption?: XOR<ShortReviewOptionScalarRelationFilter, ShortReviewOptionWhereInput>
  }

  export type ReviewShortReviewOrderByWithRelationInput = {
    id?: SortOrder
    reviewId?: SortOrder
    shortReviewOptionId?: SortOrder
    review?: ReviewOrderByWithRelationInput
    shortReviewOption?: ShortReviewOptionOrderByWithRelationInput
  }

  export type ReviewShortReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewShortReviewWhereInput | ReviewShortReviewWhereInput[]
    OR?: ReviewShortReviewWhereInput[]
    NOT?: ReviewShortReviewWhereInput | ReviewShortReviewWhereInput[]
    reviewId?: IntFilter<"ReviewShortReview"> | number
    shortReviewOptionId?: IntFilter<"ReviewShortReview"> | number
    review?: XOR<ReviewScalarRelationFilter, ReviewWhereInput>
    shortReviewOption?: XOR<ShortReviewOptionScalarRelationFilter, ShortReviewOptionWhereInput>
  }, "id">

  export type ReviewShortReviewOrderByWithAggregationInput = {
    id?: SortOrder
    reviewId?: SortOrder
    shortReviewOptionId?: SortOrder
    _count?: ReviewShortReviewCountOrderByAggregateInput
    _avg?: ReviewShortReviewAvgOrderByAggregateInput
    _max?: ReviewShortReviewMaxOrderByAggregateInput
    _min?: ReviewShortReviewMinOrderByAggregateInput
    _sum?: ReviewShortReviewSumOrderByAggregateInput
  }

  export type ReviewShortReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewShortReviewScalarWhereWithAggregatesInput | ReviewShortReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewShortReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewShortReviewScalarWhereWithAggregatesInput | ReviewShortReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ReviewShortReview"> | number
    reviewId?: IntWithAggregatesFilter<"ReviewShortReview"> | number
    shortReviewOptionId?: IntWithAggregatesFilter<"ReviewShortReview"> | number
  }

  export type ShortReviewOptionWhereInput = {
    AND?: ShortReviewOptionWhereInput | ShortReviewOptionWhereInput[]
    OR?: ShortReviewOptionWhereInput[]
    NOT?: ShortReviewOptionWhereInput | ShortReviewOptionWhereInput[]
    id?: IntFilter<"ShortReviewOption"> | number
    content?: StringFilter<"ShortReviewOption"> | string
    reviews?: ReviewShortReviewListRelationFilter
  }

  export type ShortReviewOptionOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    reviews?: ReviewShortReviewOrderByRelationAggregateInput
  }

  export type ShortReviewOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShortReviewOptionWhereInput | ShortReviewOptionWhereInput[]
    OR?: ShortReviewOptionWhereInput[]
    NOT?: ShortReviewOptionWhereInput | ShortReviewOptionWhereInput[]
    content?: StringFilter<"ShortReviewOption"> | string
    reviews?: ReviewShortReviewListRelationFilter
  }, "id">

  export type ShortReviewOptionOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    _count?: ShortReviewOptionCountOrderByAggregateInput
    _avg?: ShortReviewOptionAvgOrderByAggregateInput
    _max?: ShortReviewOptionMaxOrderByAggregateInput
    _min?: ShortReviewOptionMinOrderByAggregateInput
    _sum?: ShortReviewOptionSumOrderByAggregateInput
  }

  export type ShortReviewOptionScalarWhereWithAggregatesInput = {
    AND?: ShortReviewOptionScalarWhereWithAggregatesInput | ShortReviewOptionScalarWhereWithAggregatesInput[]
    OR?: ShortReviewOptionScalarWhereWithAggregatesInput[]
    NOT?: ShortReviewOptionScalarWhereWithAggregatesInput | ShortReviewOptionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShortReviewOption"> | number
    content?: StringWithAggregatesFilter<"ShortReviewOption"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    content?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    isRead?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    content?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    isRead?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    content?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type GroupBuyChatWhereInput = {
    AND?: GroupBuyChatWhereInput | GroupBuyChatWhereInput[]
    OR?: GroupBuyChatWhereInput[]
    NOT?: GroupBuyChatWhereInput | GroupBuyChatWhereInput[]
    id?: IntFilter<"GroupBuyChat"> | number
    groupBuyId?: IntFilter<"GroupBuyChat"> | number
    createdAt?: DateTimeFilter<"GroupBuyChat"> | Date | string
    groupBuy?: XOR<GroupBuyScalarRelationFilter, GroupBuyWhereInput>
    messages?: GroupBuyChatMessageListRelationFilter
    participants?: GroupBuyChatParticipantListRelationFilter
  }

  export type GroupBuyChatOrderByWithRelationInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
    groupBuy?: GroupBuyOrderByWithRelationInput
    messages?: GroupBuyChatMessageOrderByRelationAggregateInput
    participants?: GroupBuyChatParticipantOrderByRelationAggregateInput
  }

  export type GroupBuyChatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupBuyChatWhereInput | GroupBuyChatWhereInput[]
    OR?: GroupBuyChatWhereInput[]
    NOT?: GroupBuyChatWhereInput | GroupBuyChatWhereInput[]
    groupBuyId?: IntFilter<"GroupBuyChat"> | number
    createdAt?: DateTimeFilter<"GroupBuyChat"> | Date | string
    groupBuy?: XOR<GroupBuyScalarRelationFilter, GroupBuyWhereInput>
    messages?: GroupBuyChatMessageListRelationFilter
    participants?: GroupBuyChatParticipantListRelationFilter
  }, "id">

  export type GroupBuyChatOrderByWithAggregationInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
    _count?: GroupBuyChatCountOrderByAggregateInput
    _avg?: GroupBuyChatAvgOrderByAggregateInput
    _max?: GroupBuyChatMaxOrderByAggregateInput
    _min?: GroupBuyChatMinOrderByAggregateInput
    _sum?: GroupBuyChatSumOrderByAggregateInput
  }

  export type GroupBuyChatScalarWhereWithAggregatesInput = {
    AND?: GroupBuyChatScalarWhereWithAggregatesInput | GroupBuyChatScalarWhereWithAggregatesInput[]
    OR?: GroupBuyChatScalarWhereWithAggregatesInput[]
    NOT?: GroupBuyChatScalarWhereWithAggregatesInput | GroupBuyChatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GroupBuyChat"> | number
    groupBuyId?: IntWithAggregatesFilter<"GroupBuyChat"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GroupBuyChat"> | Date | string
  }

  export type GroupBuyChatMessageWhereInput = {
    AND?: GroupBuyChatMessageWhereInput | GroupBuyChatMessageWhereInput[]
    OR?: GroupBuyChatMessageWhereInput[]
    NOT?: GroupBuyChatMessageWhereInput | GroupBuyChatMessageWhereInput[]
    id?: IntFilter<"GroupBuyChatMessage"> | number
    senderId?: StringFilter<"GroupBuyChatMessage"> | string
    groupBuyChatId?: IntFilter<"GroupBuyChatMessage"> | number
    content?: StringFilter<"GroupBuyChatMessage"> | string
    createdAt?: DateTimeFilter<"GroupBuyChatMessage"> | Date | string
    groupBuyChat?: XOR<GroupBuyChatScalarRelationFilter, GroupBuyChatWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GroupBuyChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupBuyChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    groupBuyChat?: GroupBuyChatOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type GroupBuyChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupBuyChatMessageWhereInput | GroupBuyChatMessageWhereInput[]
    OR?: GroupBuyChatMessageWhereInput[]
    NOT?: GroupBuyChatMessageWhereInput | GroupBuyChatMessageWhereInput[]
    senderId?: StringFilter<"GroupBuyChatMessage"> | string
    groupBuyChatId?: IntFilter<"GroupBuyChatMessage"> | number
    content?: StringFilter<"GroupBuyChatMessage"> | string
    createdAt?: DateTimeFilter<"GroupBuyChatMessage"> | Date | string
    groupBuyChat?: XOR<GroupBuyChatScalarRelationFilter, GroupBuyChatWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GroupBuyChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupBuyChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: GroupBuyChatMessageCountOrderByAggregateInput
    _avg?: GroupBuyChatMessageAvgOrderByAggregateInput
    _max?: GroupBuyChatMessageMaxOrderByAggregateInput
    _min?: GroupBuyChatMessageMinOrderByAggregateInput
    _sum?: GroupBuyChatMessageSumOrderByAggregateInput
  }

  export type GroupBuyChatMessageScalarWhereWithAggregatesInput = {
    AND?: GroupBuyChatMessageScalarWhereWithAggregatesInput | GroupBuyChatMessageScalarWhereWithAggregatesInput[]
    OR?: GroupBuyChatMessageScalarWhereWithAggregatesInput[]
    NOT?: GroupBuyChatMessageScalarWhereWithAggregatesInput | GroupBuyChatMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GroupBuyChatMessage"> | number
    senderId?: StringWithAggregatesFilter<"GroupBuyChatMessage"> | string
    groupBuyChatId?: IntWithAggregatesFilter<"GroupBuyChatMessage"> | number
    content?: StringWithAggregatesFilter<"GroupBuyChatMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GroupBuyChatMessage"> | Date | string
  }

  export type GroupBuyChatParticipantWhereInput = {
    AND?: GroupBuyChatParticipantWhereInput | GroupBuyChatParticipantWhereInput[]
    OR?: GroupBuyChatParticipantWhereInput[]
    NOT?: GroupBuyChatParticipantWhereInput | GroupBuyChatParticipantWhereInput[]
    id?: IntFilter<"GroupBuyChatParticipant"> | number
    lastReadItemId?: IntNullableFilter<"GroupBuyChatParticipant"> | number | null
    userId?: StringFilter<"GroupBuyChatParticipant"> | string
    groupBuyChatId?: IntFilter<"GroupBuyChatParticipant"> | number
    joinedAt?: DateTimeFilter<"GroupBuyChatParticipant"> | Date | string
    groupBuyChat?: XOR<GroupBuyChatScalarRelationFilter, GroupBuyChatWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type GroupBuyChatParticipantOrderByWithRelationInput = {
    id?: SortOrder
    lastReadItemId?: SortOrderInput | SortOrder
    userId?: SortOrder
    groupBuyChatId?: SortOrder
    joinedAt?: SortOrder
    groupBuyChat?: GroupBuyChatOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type GroupBuyChatParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupBuyChatParticipantWhereInput | GroupBuyChatParticipantWhereInput[]
    OR?: GroupBuyChatParticipantWhereInput[]
    NOT?: GroupBuyChatParticipantWhereInput | GroupBuyChatParticipantWhereInput[]
    lastReadItemId?: IntNullableFilter<"GroupBuyChatParticipant"> | number | null
    userId?: StringFilter<"GroupBuyChatParticipant"> | string
    groupBuyChatId?: IntFilter<"GroupBuyChatParticipant"> | number
    joinedAt?: DateTimeFilter<"GroupBuyChatParticipant"> | Date | string
    groupBuyChat?: XOR<GroupBuyChatScalarRelationFilter, GroupBuyChatWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type GroupBuyChatParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    lastReadItemId?: SortOrderInput | SortOrder
    userId?: SortOrder
    groupBuyChatId?: SortOrder
    joinedAt?: SortOrder
    _count?: GroupBuyChatParticipantCountOrderByAggregateInput
    _avg?: GroupBuyChatParticipantAvgOrderByAggregateInput
    _max?: GroupBuyChatParticipantMaxOrderByAggregateInput
    _min?: GroupBuyChatParticipantMinOrderByAggregateInput
    _sum?: GroupBuyChatParticipantSumOrderByAggregateInput
  }

  export type GroupBuyChatParticipantScalarWhereWithAggregatesInput = {
    AND?: GroupBuyChatParticipantScalarWhereWithAggregatesInput | GroupBuyChatParticipantScalarWhereWithAggregatesInput[]
    OR?: GroupBuyChatParticipantScalarWhereWithAggregatesInput[]
    NOT?: GroupBuyChatParticipantScalarWhereWithAggregatesInput | GroupBuyChatParticipantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GroupBuyChatParticipant"> | number
    lastReadItemId?: IntNullableWithAggregatesFilter<"GroupBuyChatParticipant"> | number | null
    userId?: StringWithAggregatesFilter<"GroupBuyChatParticipant"> | string
    groupBuyChatId?: IntWithAggregatesFilter<"GroupBuyChatParticipant"> | number
    joinedAt?: DateTimeWithAggregatesFilter<"GroupBuyChatParticipant"> | Date | string
  }

  export type ShareChatWhereInput = {
    AND?: ShareChatWhereInput | ShareChatWhereInput[]
    OR?: ShareChatWhereInput[]
    NOT?: ShareChatWhereInput | ShareChatWhereInput[]
    id?: IntFilter<"ShareChat"> | number
    shareId?: IntFilter<"ShareChat"> | number
    createdAt?: DateTimeFilter<"ShareChat"> | Date | string
    share?: XOR<ShareScalarRelationFilter, ShareWhereInput>
    messages?: ShareChatMessageListRelationFilter
    participants?: ShareChatParticipantListRelationFilter
  }

  export type ShareChatOrderByWithRelationInput = {
    id?: SortOrder
    shareId?: SortOrder
    createdAt?: SortOrder
    share?: ShareOrderByWithRelationInput
    messages?: ShareChatMessageOrderByRelationAggregateInput
    participants?: ShareChatParticipantOrderByRelationAggregateInput
  }

  export type ShareChatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareChatWhereInput | ShareChatWhereInput[]
    OR?: ShareChatWhereInput[]
    NOT?: ShareChatWhereInput | ShareChatWhereInput[]
    shareId?: IntFilter<"ShareChat"> | number
    createdAt?: DateTimeFilter<"ShareChat"> | Date | string
    share?: XOR<ShareScalarRelationFilter, ShareWhereInput>
    messages?: ShareChatMessageListRelationFilter
    participants?: ShareChatParticipantListRelationFilter
  }, "id">

  export type ShareChatOrderByWithAggregationInput = {
    id?: SortOrder
    shareId?: SortOrder
    createdAt?: SortOrder
    _count?: ShareChatCountOrderByAggregateInput
    _avg?: ShareChatAvgOrderByAggregateInput
    _max?: ShareChatMaxOrderByAggregateInput
    _min?: ShareChatMinOrderByAggregateInput
    _sum?: ShareChatSumOrderByAggregateInput
  }

  export type ShareChatScalarWhereWithAggregatesInput = {
    AND?: ShareChatScalarWhereWithAggregatesInput | ShareChatScalarWhereWithAggregatesInput[]
    OR?: ShareChatScalarWhereWithAggregatesInput[]
    NOT?: ShareChatScalarWhereWithAggregatesInput | ShareChatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShareChat"> | number
    shareId?: IntWithAggregatesFilter<"ShareChat"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ShareChat"> | Date | string
  }

  export type ShareChatMessageWhereInput = {
    AND?: ShareChatMessageWhereInput | ShareChatMessageWhereInput[]
    OR?: ShareChatMessageWhereInput[]
    NOT?: ShareChatMessageWhereInput | ShareChatMessageWhereInput[]
    id?: IntFilter<"ShareChatMessage"> | number
    senderId?: StringFilter<"ShareChatMessage"> | string
    shareChatId?: IntFilter<"ShareChatMessage"> | number
    content?: StringFilter<"ShareChatMessage"> | string
    createdAt?: DateTimeFilter<"ShareChatMessage"> | Date | string
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    shareChat?: XOR<ShareChatScalarRelationFilter, ShareChatWhereInput>
  }

  export type ShareChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    shareChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    sender?: UserOrderByWithRelationInput
    shareChat?: ShareChatOrderByWithRelationInput
  }

  export type ShareChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareChatMessageWhereInput | ShareChatMessageWhereInput[]
    OR?: ShareChatMessageWhereInput[]
    NOT?: ShareChatMessageWhereInput | ShareChatMessageWhereInput[]
    senderId?: StringFilter<"ShareChatMessage"> | string
    shareChatId?: IntFilter<"ShareChatMessage"> | number
    content?: StringFilter<"ShareChatMessage"> | string
    createdAt?: DateTimeFilter<"ShareChatMessage"> | Date | string
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    shareChat?: XOR<ShareChatScalarRelationFilter, ShareChatWhereInput>
  }, "id">

  export type ShareChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    shareChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: ShareChatMessageCountOrderByAggregateInput
    _avg?: ShareChatMessageAvgOrderByAggregateInput
    _max?: ShareChatMessageMaxOrderByAggregateInput
    _min?: ShareChatMessageMinOrderByAggregateInput
    _sum?: ShareChatMessageSumOrderByAggregateInput
  }

  export type ShareChatMessageScalarWhereWithAggregatesInput = {
    AND?: ShareChatMessageScalarWhereWithAggregatesInput | ShareChatMessageScalarWhereWithAggregatesInput[]
    OR?: ShareChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ShareChatMessageScalarWhereWithAggregatesInput | ShareChatMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShareChatMessage"> | number
    senderId?: StringWithAggregatesFilter<"ShareChatMessage"> | string
    shareChatId?: IntWithAggregatesFilter<"ShareChatMessage"> | number
    content?: StringWithAggregatesFilter<"ShareChatMessage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ShareChatMessage"> | Date | string
  }

  export type ShareChatParticipantWhereInput = {
    AND?: ShareChatParticipantWhereInput | ShareChatParticipantWhereInput[]
    OR?: ShareChatParticipantWhereInput[]
    NOT?: ShareChatParticipantWhereInput | ShareChatParticipantWhereInput[]
    id?: IntFilter<"ShareChatParticipant"> | number
    lastReadItemId?: IntNullableFilter<"ShareChatParticipant"> | number | null
    userId?: StringFilter<"ShareChatParticipant"> | string
    shareChatId?: IntFilter<"ShareChatParticipant"> | number
    joinedAt?: DateTimeFilter<"ShareChatParticipant"> | Date | string
    shareChat?: XOR<ShareChatScalarRelationFilter, ShareChatWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ShareChatParticipantOrderByWithRelationInput = {
    id?: SortOrder
    lastReadItemId?: SortOrderInput | SortOrder
    userId?: SortOrder
    shareChatId?: SortOrder
    joinedAt?: SortOrder
    shareChat?: ShareChatOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ShareChatParticipantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareChatParticipantWhereInput | ShareChatParticipantWhereInput[]
    OR?: ShareChatParticipantWhereInput[]
    NOT?: ShareChatParticipantWhereInput | ShareChatParticipantWhereInput[]
    lastReadItemId?: IntNullableFilter<"ShareChatParticipant"> | number | null
    userId?: StringFilter<"ShareChatParticipant"> | string
    shareChatId?: IntFilter<"ShareChatParticipant"> | number
    joinedAt?: DateTimeFilter<"ShareChatParticipant"> | Date | string
    shareChat?: XOR<ShareChatScalarRelationFilter, ShareChatWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ShareChatParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    lastReadItemId?: SortOrderInput | SortOrder
    userId?: SortOrder
    shareChatId?: SortOrder
    joinedAt?: SortOrder
    _count?: ShareChatParticipantCountOrderByAggregateInput
    _avg?: ShareChatParticipantAvgOrderByAggregateInput
    _max?: ShareChatParticipantMaxOrderByAggregateInput
    _min?: ShareChatParticipantMinOrderByAggregateInput
    _sum?: ShareChatParticipantSumOrderByAggregateInput
  }

  export type ShareChatParticipantScalarWhereWithAggregatesInput = {
    AND?: ShareChatParticipantScalarWhereWithAggregatesInput | ShareChatParticipantScalarWhereWithAggregatesInput[]
    OR?: ShareChatParticipantScalarWhereWithAggregatesInput[]
    NOT?: ShareChatParticipantScalarWhereWithAggregatesInput | ShareChatParticipantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShareChatParticipant"> | number
    lastReadItemId?: IntNullableWithAggregatesFilter<"ShareChatParticipant"> | number | null
    userId?: StringWithAggregatesFilter<"ShareChatParticipant"> | string
    shareChatId?: IntWithAggregatesFilter<"ShareChatParticipant"> | number
    joinedAt?: DateTimeWithAggregatesFilter<"ShareChatParticipant"> | Date | string
  }

  export type NeighborhoodCreateInput = {
    name: string
    district: string
    lat: number
    lng: number
    grouBuys?: GroupBuyCreateNestedManyWithoutNeighborhoodInput
    shares?: ShareCreateNestedManyWithoutNeighborhoodInput
    users?: UserCreateNestedManyWithoutNeighborhoodInput
  }

  export type NeighborhoodUncheckedCreateInput = {
    id?: number
    name: string
    district: string
    lat: number
    lng: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutNeighborhoodInput
    shares?: ShareUncheckedCreateNestedManyWithoutNeighborhoodInput
    users?: UserUncheckedCreateNestedManyWithoutNeighborhoodInput
  }

  export type NeighborhoodUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutNeighborhoodNestedInput
    shares?: ShareUpdateManyWithoutNeighborhoodNestedInput
    users?: UserUpdateManyWithoutNeighborhoodNestedInput
  }

  export type NeighborhoodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutNeighborhoodNestedInput
    shares?: ShareUncheckedUpdateManyWithoutNeighborhoodNestedInput
    users?: UserUncheckedUpdateManyWithoutNeighborhoodNestedInput
  }

  export type NeighborhoodCreateManyInput = {
    id?: number
    name: string
    district: string
    lat: number
    lng: number
  }

  export type NeighborhoodUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
  }

  export type NeighborhoodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupBuyCreateInput = {
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    neighborhood: NeighborhoodCreateNestedOneWithoutGrouBuysInput
    organizer: UserCreateNestedOneWithoutGrouBuysInput
    chats?: GroupBuyChatCreateNestedManyWithoutGroupBuyInput
    images?: GroupBuyImageCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyUncheckedCreateInput = {
    id?: number
    organizerId: string
    neighborhoodId: number
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    chats?: GroupBuyChatUncheckedCreateNestedManyWithoutGroupBuyInput
    images?: GroupBuyImageUncheckedCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutGrouBuysNestedInput
    organizer?: UserUpdateOneRequiredWithoutGrouBuysNestedInput
    chats?: GroupBuyChatUpdateManyWithoutGroupBuyNestedInput
    images?: GroupBuyImageUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizerId?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    chats?: GroupBuyChatUncheckedUpdateManyWithoutGroupBuyNestedInput
    images?: GroupBuyImageUncheckedUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUncheckedUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyCreateManyInput = {
    id?: number
    organizerId: string
    neighborhoodId: number
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
  }

  export type GroupBuyUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type GroupBuyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizerId?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type GroupBuyParticipantCreateInput = {
    createdAt?: Date | string
    groupBuy: GroupBuyCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutGroupBuyParticipantsInput
  }

  export type GroupBuyParticipantUncheckedCreateInput = {
    id?: number
    userId: string
    groupBuyId: number
    createdAt?: Date | string
  }

  export type GroupBuyParticipantUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuy?: GroupBuyUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutGroupBuyParticipantsNestedInput
  }

  export type GroupBuyParticipantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    groupBuyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyParticipantCreateManyInput = {
    id?: number
    userId: string
    groupBuyId: number
    createdAt?: Date | string
  }

  export type GroupBuyParticipantUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyParticipantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    groupBuyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyImageCreateInput = {
    url: string
    groupBuy: GroupBuyCreateNestedOneWithoutImagesInput
  }

  export type GroupBuyImageUncheckedCreateInput = {
    id?: number
    groupBuyId: number
    url: string
  }

  export type GroupBuyImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    groupBuy?: GroupBuyUpdateOneRequiredWithoutImagesNestedInput
  }

  export type GroupBuyImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GroupBuyImageCreateManyInput = {
    id?: number
    groupBuyId: number
    url: string
  }

  export type GroupBuyImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GroupBuyImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShareCreateInput = {
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewCreateNestedManyWithoutShareInput
    neighborhood: NeighborhoodCreateNestedOneWithoutSharesInput
    owner: UserCreateNestedOneWithoutOwnedSharesInput
    recipient?: UserCreateNestedOneWithoutReceivedSharesInput
    shareItem: ShareItemCreateNestedOneWithoutSharesInput
    chats?: ShareChatCreateNestedManyWithoutShareInput
    images?: ShareImageCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutShareInput
    chats?: ShareChatUncheckedCreateNestedManyWithoutShareInput
    images?: ShareImageUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutShareNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutSharesNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedSharesNestedInput
    recipient?: UserUpdateOneWithoutReceivedSharesNestedInput
    shareItem?: ShareItemUpdateOneRequiredWithoutSharesNestedInput
    chats?: ShareChatUpdateManyWithoutShareNestedInput
    images?: ShareImageUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutShareNestedInput
    chats?: ShareChatUncheckedUpdateManyWithoutShareNestedInput
    images?: ShareImageUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ShareCreateManyInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
  }

  export type ShareUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ShareUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ShareImageCreateInput = {
    url: string
    share: ShareCreateNestedOneWithoutImagesInput
  }

  export type ShareImageUncheckedCreateInput = {
    id?: number
    shareId: number
    url: string
  }

  export type ShareImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    share?: ShareUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ShareImageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShareImageCreateManyInput = {
    id?: number
    shareId: number
    url: string
  }

  export type ShareImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShareImageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShareItemCreateInput = {
    name: string
    shares?: ShareCreateNestedManyWithoutShareItemInput
  }

  export type ShareItemUncheckedCreateInput = {
    id?: number
    name: string
    shares?: ShareUncheckedCreateNestedManyWithoutShareItemInput
  }

  export type ShareItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    shares?: ShareUpdateManyWithoutShareItemNestedInput
  }

  export type ShareItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    shares?: ShareUncheckedUpdateManyWithoutShareItemNestedInput
  }

  export type ShareItemCreateManyInput = {
    id?: number
    name: string
  }

  export type ShareItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ShareItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewCreateInput = {
    grade: number
    content?: string | null
    createdAt?: Date | string
    recipient: UserCreateNestedOneWithoutReceivedReviewsInput
    share: ShareCreateNestedOneWithoutReviewsInput
    writer: UserCreateNestedOneWithoutWrittenReviewsInput
    reviews?: ReviewShortReviewCreateNestedManyWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    writerId: string
    recipientId: string
    shareId: number
    grade: number
    content?: string | null
    createdAt?: Date | string
    reviews?: ReviewShortReviewUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewUpdateInput = {
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipient?: UserUpdateOneRequiredWithoutReceivedReviewsNestedInput
    share?: ShareUpdateOneRequiredWithoutReviewsNestedInput
    writer?: UserUpdateOneRequiredWithoutWrittenReviewsNestedInput
    reviews?: ReviewShortReviewUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    writerId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    shareId?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewShortReviewUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewCreateManyInput = {
    id?: number
    writerId: string
    recipientId: string
    shareId: number
    grade: number
    content?: string | null
    createdAt?: Date | string
  }

  export type ReviewUpdateManyMutationInput = {
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    writerId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    shareId?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewShortReviewCreateInput = {
    review: ReviewCreateNestedOneWithoutReviewsInput
    shortReviewOption: ShortReviewOptionCreateNestedOneWithoutReviewsInput
  }

  export type ReviewShortReviewUncheckedCreateInput = {
    id?: number
    reviewId: number
    shortReviewOptionId: number
  }

  export type ReviewShortReviewUpdateInput = {
    review?: ReviewUpdateOneRequiredWithoutReviewsNestedInput
    shortReviewOption?: ShortReviewOptionUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewShortReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
    shortReviewOptionId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewShortReviewCreateManyInput = {
    id?: number
    reviewId: number
    shortReviewOptionId: number
  }

  export type ReviewShortReviewUpdateManyMutationInput = {

  }

  export type ReviewShortReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
    shortReviewOptionId?: IntFieldUpdateOperationsInput | number
  }

  export type ShortReviewOptionCreateInput = {
    content: string
    reviews?: ReviewShortReviewCreateNestedManyWithoutShortReviewOptionInput
  }

  export type ShortReviewOptionUncheckedCreateInput = {
    id?: number
    content: string
    reviews?: ReviewShortReviewUncheckedCreateNestedManyWithoutShortReviewOptionInput
  }

  export type ShortReviewOptionUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewShortReviewUpdateManyWithoutShortReviewOptionNestedInput
  }

  export type ShortReviewOptionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    reviews?: ReviewShortReviewUncheckedUpdateManyWithoutShortReviewOptionNestedInput
  }

  export type ShortReviewOptionCreateManyInput = {
    id?: number
    content: string
  }

  export type ShortReviewOptionUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ShortReviewOptionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    isRead?: boolean
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: string
    isRead?: boolean
    content: string
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    isRead?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: string
    isRead?: boolean
    content: string
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    isRead?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatCreateInput = {
    createdAt?: Date | string
    groupBuy: GroupBuyCreateNestedOneWithoutChatsInput
    messages?: GroupBuyChatMessageCreateNestedManyWithoutGroupBuyChatInput
    participants?: GroupBuyChatParticipantCreateNestedManyWithoutGroupBuyChatInput
  }

  export type GroupBuyChatUncheckedCreateInput = {
    id?: number
    groupBuyId: number
    createdAt?: Date | string
    messages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutGroupBuyChatInput
    participants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutGroupBuyChatInput
  }

  export type GroupBuyChatUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuy?: GroupBuyUpdateOneRequiredWithoutChatsNestedInput
    messages?: GroupBuyChatMessageUpdateManyWithoutGroupBuyChatNestedInput
    participants?: GroupBuyChatParticipantUpdateManyWithoutGroupBuyChatNestedInput
  }

  export type GroupBuyChatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: GroupBuyChatMessageUncheckedUpdateManyWithoutGroupBuyChatNestedInput
    participants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutGroupBuyChatNestedInput
  }

  export type GroupBuyChatCreateManyInput = {
    id?: number
    groupBuyId: number
    createdAt?: Date | string
  }

  export type GroupBuyChatUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatMessageCreateInput = {
    content: string
    createdAt?: Date | string
    groupBuyChat: GroupBuyChatCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutGroupBuyChatMessagesInput
  }

  export type GroupBuyChatMessageUncheckedCreateInput = {
    id?: number
    senderId: string
    groupBuyChatId: number
    content: string
    createdAt?: Date | string
  }

  export type GroupBuyChatMessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuyChat?: GroupBuyChatUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutGroupBuyChatMessagesNestedInput
  }

  export type GroupBuyChatMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    groupBuyChatId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatMessageCreateManyInput = {
    id?: number
    senderId: string
    groupBuyChatId: number
    content: string
    createdAt?: Date | string
  }

  export type GroupBuyChatMessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    groupBuyChatId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatParticipantCreateInput = {
    lastReadItemId?: number | null
    joinedAt?: Date | string
    groupBuyChat: GroupBuyChatCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutGroupBuyChatParticipantsInput
  }

  export type GroupBuyChatParticipantUncheckedCreateInput = {
    id?: number
    lastReadItemId?: number | null
    userId: string
    groupBuyChatId: number
    joinedAt?: Date | string
  }

  export type GroupBuyChatParticipantUpdateInput = {
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuyChat?: GroupBuyChatUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutGroupBuyChatParticipantsNestedInput
  }

  export type GroupBuyChatParticipantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    groupBuyChatId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatParticipantCreateManyInput = {
    id?: number
    lastReadItemId?: number | null
    userId: string
    groupBuyChatId: number
    joinedAt?: Date | string
  }

  export type GroupBuyChatParticipantUpdateManyMutationInput = {
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatParticipantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    groupBuyChatId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatCreateInput = {
    createdAt?: Date | string
    share: ShareCreateNestedOneWithoutChatsInput
    messages?: ShareChatMessageCreateNestedManyWithoutShareChatInput
    participants?: ShareChatParticipantCreateNestedManyWithoutShareChatInput
  }

  export type ShareChatUncheckedCreateInput = {
    id?: number
    shareId: number
    createdAt?: Date | string
    messages?: ShareChatMessageUncheckedCreateNestedManyWithoutShareChatInput
    participants?: ShareChatParticipantUncheckedCreateNestedManyWithoutShareChatInput
  }

  export type ShareChatUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    share?: ShareUpdateOneRequiredWithoutChatsNestedInput
    messages?: ShareChatMessageUpdateManyWithoutShareChatNestedInput
    participants?: ShareChatParticipantUpdateManyWithoutShareChatNestedInput
  }

  export type ShareChatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ShareChatMessageUncheckedUpdateManyWithoutShareChatNestedInput
    participants?: ShareChatParticipantUncheckedUpdateManyWithoutShareChatNestedInput
  }

  export type ShareChatCreateManyInput = {
    id?: number
    shareId: number
    createdAt?: Date | string
  }

  export type ShareChatUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatMessageCreateInput = {
    content: string
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutShareChatMessagesInput
    shareChat: ShareChatCreateNestedOneWithoutMessagesInput
  }

  export type ShareChatMessageUncheckedCreateInput = {
    id?: number
    senderId: string
    shareChatId: number
    content: string
    createdAt?: Date | string
  }

  export type ShareChatMessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutShareChatMessagesNestedInput
    shareChat?: ShareChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ShareChatMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    shareChatId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatMessageCreateManyInput = {
    id?: number
    senderId: string
    shareChatId: number
    content: string
    createdAt?: Date | string
  }

  export type ShareChatMessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    shareChatId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatParticipantCreateInput = {
    lastReadItemId?: number | null
    joinedAt?: Date | string
    shareChat: ShareChatCreateNestedOneWithoutParticipantsInput
    user: UserCreateNestedOneWithoutShareChatParticipantsInput
  }

  export type ShareChatParticipantUncheckedCreateInput = {
    id?: number
    lastReadItemId?: number | null
    userId: string
    shareChatId: number
    joinedAt?: Date | string
  }

  export type ShareChatParticipantUpdateInput = {
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareChat?: ShareChatUpdateOneRequiredWithoutParticipantsNestedInput
    user?: UserUpdateOneRequiredWithoutShareChatParticipantsNestedInput
  }

  export type ShareChatParticipantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    shareChatId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatParticipantCreateManyInput = {
    id?: number
    lastReadItemId?: number | null
    userId: string
    shareChatId: number
    joinedAt?: Date | string
  }

  export type ShareChatParticipantUpdateManyMutationInput = {
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatParticipantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    shareChatId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type GroupBuyListRelationFilter = {
    every?: GroupBuyWhereInput
    some?: GroupBuyWhereInput
    none?: GroupBuyWhereInput
  }

  export type ShareListRelationFilter = {
    every?: ShareWhereInput
    some?: ShareWhereInput
    none?: ShareWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type GroupBuyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NeighborhoodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    district?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type NeighborhoodAvgOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type NeighborhoodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    district?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type NeighborhoodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    district?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type NeighborhoodSumOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GroupBuyChatMessageListRelationFilter = {
    every?: GroupBuyChatMessageWhereInput
    some?: GroupBuyChatMessageWhereInput
    none?: GroupBuyChatMessageWhereInput
  }

  export type GroupBuyChatParticipantListRelationFilter = {
    every?: GroupBuyChatParticipantWhereInput
    some?: GroupBuyChatParticipantWhereInput
    none?: GroupBuyChatParticipantWhereInput
  }

  export type GroupBuyParticipantListRelationFilter = {
    every?: GroupBuyParticipantWhereInput
    some?: GroupBuyParticipantWhereInput
    none?: GroupBuyParticipantWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ShareChatMessageListRelationFilter = {
    every?: ShareChatMessageWhereInput
    some?: ShareChatMessageWhereInput
    none?: ShareChatMessageWhereInput
  }

  export type ShareChatParticipantListRelationFilter = {
    every?: ShareChatParticipantWhereInput
    some?: ShareChatParticipantWhereInput
    none?: ShareChatParticipantWhereInput
  }

  export type NeighborhoodScalarRelationFilter = {
    is?: NeighborhoodWhereInput
    isNot?: NeighborhoodWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type GroupBuyChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupBuyChatParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupBuyParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareChatParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    neighborhoodId?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profileUrl?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    shareScore?: SortOrder
    publicId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    neighborhoodId?: SortOrder
    shareScore?: SortOrder
    publicId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    neighborhoodId?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profileUrl?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    shareScore?: SortOrder
    publicId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    neighborhoodId?: SortOrder
    email?: SortOrder
    nickname?: SortOrder
    profileUrl?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    shareScore?: SortOrder
    publicId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    neighborhoodId?: SortOrder
    shareScore?: SortOrder
    publicId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type GroupBuyChatListRelationFilter = {
    every?: GroupBuyChatWhereInput
    some?: GroupBuyChatWhereInput
    none?: GroupBuyChatWhereInput
  }

  export type GroupBuyImageListRelationFilter = {
    every?: GroupBuyImageWhereInput
    some?: GroupBuyImageWhereInput
    none?: GroupBuyImageWhereInput
  }

  export type GroupBuyChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupBuyImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupBuyCountOrderByAggregateInput = {
    id?: SortOrder
    organizerId?: SortOrder
    neighborhoodId?: SortOrder
    title?: SortOrder
    capacity?: SortOrder
    desiredItem?: SortOrder
    meetingDate?: SortOrder
    createdAt?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
  }

  export type GroupBuyAvgOrderByAggregateInput = {
    id?: SortOrder
    neighborhoodId?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
  }

  export type GroupBuyMaxOrderByAggregateInput = {
    id?: SortOrder
    organizerId?: SortOrder
    neighborhoodId?: SortOrder
    title?: SortOrder
    capacity?: SortOrder
    desiredItem?: SortOrder
    meetingDate?: SortOrder
    createdAt?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
  }

  export type GroupBuyMinOrderByAggregateInput = {
    id?: SortOrder
    organizerId?: SortOrder
    neighborhoodId?: SortOrder
    title?: SortOrder
    capacity?: SortOrder
    desiredItem?: SortOrder
    meetingDate?: SortOrder
    createdAt?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
  }

  export type GroupBuySumOrderByAggregateInput = {
    id?: SortOrder
    neighborhoodId?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
  }

  export type GroupBuyScalarRelationFilter = {
    is?: GroupBuyWhereInput
    isNot?: GroupBuyWhereInput
  }

  export type GroupBuyParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyParticipantAvgOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
  }

  export type GroupBuyParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyParticipantSumOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
  }

  export type GroupBuyImageCountOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    url?: SortOrder
  }

  export type GroupBuyImageAvgOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
  }

  export type GroupBuyImageMaxOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    url?: SortOrder
  }

  export type GroupBuyImageMinOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    url?: SortOrder
  }

  export type GroupBuyImageSumOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ShareItemScalarRelationFilter = {
    is?: ShareItemWhereInput
    isNot?: ShareItemWhereInput
  }

  export type ShareChatListRelationFilter = {
    every?: ShareChatWhereInput
    some?: ShareChatWhereInput
    none?: ShareChatWhereInput
  }

  export type ShareImageListRelationFilter = {
    every?: ShareImageWhereInput
    some?: ShareImageWhereInput
    none?: ShareImageWhereInput
  }

  export type ShareChatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareCountOrderByAggregateInput = {
    id?: SortOrder
    shareItemId?: SortOrder
    neighborhoodId?: SortOrder
    ownerId?: SortOrder
    recipientId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    meetingDate?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
  }

  export type ShareAvgOrderByAggregateInput = {
    id?: SortOrder
    shareItemId?: SortOrder
    neighborhoodId?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    status?: SortOrder
  }

  export type ShareMaxOrderByAggregateInput = {
    id?: SortOrder
    shareItemId?: SortOrder
    neighborhoodId?: SortOrder
    ownerId?: SortOrder
    recipientId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    meetingDate?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
  }

  export type ShareMinOrderByAggregateInput = {
    id?: SortOrder
    shareItemId?: SortOrder
    neighborhoodId?: SortOrder
    ownerId?: SortOrder
    recipientId?: SortOrder
    title?: SortOrder
    createdAt?: SortOrder
    meetingDate?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    locationAddress?: SortOrder
    locationNote?: SortOrder
    description?: SortOrder
    status?: SortOrder
  }

  export type ShareSumOrderByAggregateInput = {
    id?: SortOrder
    shareItemId?: SortOrder
    neighborhoodId?: SortOrder
    lat?: SortOrder
    lng?: SortOrder
    status?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ShareScalarRelationFilter = {
    is?: ShareWhereInput
    isNot?: ShareWhereInput
  }

  export type ShareImageCountOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    url?: SortOrder
  }

  export type ShareImageAvgOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
  }

  export type ShareImageMaxOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    url?: SortOrder
  }

  export type ShareImageMinOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    url?: SortOrder
  }

  export type ShareImageSumOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
  }

  export type ShareItemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ShareItemAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShareItemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ShareItemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ShareItemSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ReviewShortReviewListRelationFilter = {
    every?: ReviewShortReviewWhereInput
    some?: ReviewShortReviewWhereInput
    none?: ReviewShortReviewWhereInput
  }

  export type ReviewShortReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    writerId?: SortOrder
    recipientId?: SortOrder
    shareId?: SortOrder
    grade?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    grade?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    writerId?: SortOrder
    recipientId?: SortOrder
    shareId?: SortOrder
    grade?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    writerId?: SortOrder
    recipientId?: SortOrder
    shareId?: SortOrder
    grade?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    grade?: SortOrder
  }

  export type ReviewScalarRelationFilter = {
    is?: ReviewWhereInput
    isNot?: ReviewWhereInput
  }

  export type ShortReviewOptionScalarRelationFilter = {
    is?: ShortReviewOptionWhereInput
    isNot?: ShortReviewOptionWhereInput
  }

  export type ReviewShortReviewCountOrderByAggregateInput = {
    id?: SortOrder
    reviewId?: SortOrder
    shortReviewOptionId?: SortOrder
  }

  export type ReviewShortReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    reviewId?: SortOrder
    shortReviewOptionId?: SortOrder
  }

  export type ReviewShortReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    reviewId?: SortOrder
    shortReviewOptionId?: SortOrder
  }

  export type ReviewShortReviewMinOrderByAggregateInput = {
    id?: SortOrder
    reviewId?: SortOrder
    shortReviewOptionId?: SortOrder
  }

  export type ReviewShortReviewSumOrderByAggregateInput = {
    id?: SortOrder
    reviewId?: SortOrder
    shortReviewOptionId?: SortOrder
  }

  export type ShortReviewOptionCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
  }

  export type ShortReviewOptionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShortReviewOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
  }

  export type ShortReviewOptionMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
  }

  export type ShortReviewOptionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    isRead?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    isRead?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    isRead?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type GroupBuyChatCountOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyChatAvgOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
  }

  export type GroupBuyChatMaxOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyChatMinOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyChatSumOrderByAggregateInput = {
    id?: SortOrder
    groupBuyId?: SortOrder
  }

  export type GroupBuyChatScalarRelationFilter = {
    is?: GroupBuyChatWhereInput
    isNot?: GroupBuyChatWhereInput
  }

  export type GroupBuyChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupBuyChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyChatMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    groupBuyChatId?: SortOrder
  }

  export type GroupBuyChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupBuyChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    groupBuyChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type GroupBuyChatMessageSumOrderByAggregateInput = {
    id?: SortOrder
    groupBuyChatId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type GroupBuyChatParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    userId?: SortOrder
    groupBuyChatId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GroupBuyChatParticipantAvgOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    groupBuyChatId?: SortOrder
  }

  export type GroupBuyChatParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    userId?: SortOrder
    groupBuyChatId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GroupBuyChatParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    userId?: SortOrder
    groupBuyChatId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GroupBuyChatParticipantSumOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    groupBuyChatId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ShareChatCountOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    createdAt?: SortOrder
  }

  export type ShareChatAvgOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
  }

  export type ShareChatMaxOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    createdAt?: SortOrder
  }

  export type ShareChatMinOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
    createdAt?: SortOrder
  }

  export type ShareChatSumOrderByAggregateInput = {
    id?: SortOrder
    shareId?: SortOrder
  }

  export type ShareChatScalarRelationFilter = {
    is?: ShareChatWhereInput
    isNot?: ShareChatWhereInput
  }

  export type ShareChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    shareChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ShareChatMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    shareChatId?: SortOrder
  }

  export type ShareChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    shareChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ShareChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    shareChatId?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type ShareChatMessageSumOrderByAggregateInput = {
    id?: SortOrder
    shareChatId?: SortOrder
  }

  export type ShareChatParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    userId?: SortOrder
    shareChatId?: SortOrder
    joinedAt?: SortOrder
  }

  export type ShareChatParticipantAvgOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    shareChatId?: SortOrder
  }

  export type ShareChatParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    userId?: SortOrder
    shareChatId?: SortOrder
    joinedAt?: SortOrder
  }

  export type ShareChatParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    userId?: SortOrder
    shareChatId?: SortOrder
    joinedAt?: SortOrder
  }

  export type ShareChatParticipantSumOrderByAggregateInput = {
    id?: SortOrder
    lastReadItemId?: SortOrder
    shareChatId?: SortOrder
  }

  export type GroupBuyCreateNestedManyWithoutNeighborhoodInput = {
    create?: XOR<GroupBuyCreateWithoutNeighborhoodInput, GroupBuyUncheckedCreateWithoutNeighborhoodInput> | GroupBuyCreateWithoutNeighborhoodInput[] | GroupBuyUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: GroupBuyCreateOrConnectWithoutNeighborhoodInput | GroupBuyCreateOrConnectWithoutNeighborhoodInput[]
    createMany?: GroupBuyCreateManyNeighborhoodInputEnvelope
    connect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
  }

  export type ShareCreateNestedManyWithoutNeighborhoodInput = {
    create?: XOR<ShareCreateWithoutNeighborhoodInput, ShareUncheckedCreateWithoutNeighborhoodInput> | ShareCreateWithoutNeighborhoodInput[] | ShareUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutNeighborhoodInput | ShareCreateOrConnectWithoutNeighborhoodInput[]
    createMany?: ShareCreateManyNeighborhoodInputEnvelope
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutNeighborhoodInput = {
    create?: XOR<UserCreateWithoutNeighborhoodInput, UserUncheckedCreateWithoutNeighborhoodInput> | UserCreateWithoutNeighborhoodInput[] | UserUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: UserCreateOrConnectWithoutNeighborhoodInput | UserCreateOrConnectWithoutNeighborhoodInput[]
    createMany?: UserCreateManyNeighborhoodInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type GroupBuyUncheckedCreateNestedManyWithoutNeighborhoodInput = {
    create?: XOR<GroupBuyCreateWithoutNeighborhoodInput, GroupBuyUncheckedCreateWithoutNeighborhoodInput> | GroupBuyCreateWithoutNeighborhoodInput[] | GroupBuyUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: GroupBuyCreateOrConnectWithoutNeighborhoodInput | GroupBuyCreateOrConnectWithoutNeighborhoodInput[]
    createMany?: GroupBuyCreateManyNeighborhoodInputEnvelope
    connect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
  }

  export type ShareUncheckedCreateNestedManyWithoutNeighborhoodInput = {
    create?: XOR<ShareCreateWithoutNeighborhoodInput, ShareUncheckedCreateWithoutNeighborhoodInput> | ShareCreateWithoutNeighborhoodInput[] | ShareUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutNeighborhoodInput | ShareCreateOrConnectWithoutNeighborhoodInput[]
    createMany?: ShareCreateManyNeighborhoodInputEnvelope
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutNeighborhoodInput = {
    create?: XOR<UserCreateWithoutNeighborhoodInput, UserUncheckedCreateWithoutNeighborhoodInput> | UserCreateWithoutNeighborhoodInput[] | UserUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: UserCreateOrConnectWithoutNeighborhoodInput | UserCreateOrConnectWithoutNeighborhoodInput[]
    createMany?: UserCreateManyNeighborhoodInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GroupBuyUpdateManyWithoutNeighborhoodNestedInput = {
    create?: XOR<GroupBuyCreateWithoutNeighborhoodInput, GroupBuyUncheckedCreateWithoutNeighborhoodInput> | GroupBuyCreateWithoutNeighborhoodInput[] | GroupBuyUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: GroupBuyCreateOrConnectWithoutNeighborhoodInput | GroupBuyCreateOrConnectWithoutNeighborhoodInput[]
    upsert?: GroupBuyUpsertWithWhereUniqueWithoutNeighborhoodInput | GroupBuyUpsertWithWhereUniqueWithoutNeighborhoodInput[]
    createMany?: GroupBuyCreateManyNeighborhoodInputEnvelope
    set?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    disconnect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    delete?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    connect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    update?: GroupBuyUpdateWithWhereUniqueWithoutNeighborhoodInput | GroupBuyUpdateWithWhereUniqueWithoutNeighborhoodInput[]
    updateMany?: GroupBuyUpdateManyWithWhereWithoutNeighborhoodInput | GroupBuyUpdateManyWithWhereWithoutNeighborhoodInput[]
    deleteMany?: GroupBuyScalarWhereInput | GroupBuyScalarWhereInput[]
  }

  export type ShareUpdateManyWithoutNeighborhoodNestedInput = {
    create?: XOR<ShareCreateWithoutNeighborhoodInput, ShareUncheckedCreateWithoutNeighborhoodInput> | ShareCreateWithoutNeighborhoodInput[] | ShareUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutNeighborhoodInput | ShareCreateOrConnectWithoutNeighborhoodInput[]
    upsert?: ShareUpsertWithWhereUniqueWithoutNeighborhoodInput | ShareUpsertWithWhereUniqueWithoutNeighborhoodInput[]
    createMany?: ShareCreateManyNeighborhoodInputEnvelope
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    update?: ShareUpdateWithWhereUniqueWithoutNeighborhoodInput | ShareUpdateWithWhereUniqueWithoutNeighborhoodInput[]
    updateMany?: ShareUpdateManyWithWhereWithoutNeighborhoodInput | ShareUpdateManyWithWhereWithoutNeighborhoodInput[]
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[]
  }

  export type UserUpdateManyWithoutNeighborhoodNestedInput = {
    create?: XOR<UserCreateWithoutNeighborhoodInput, UserUncheckedCreateWithoutNeighborhoodInput> | UserCreateWithoutNeighborhoodInput[] | UserUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: UserCreateOrConnectWithoutNeighborhoodInput | UserCreateOrConnectWithoutNeighborhoodInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutNeighborhoodInput | UserUpsertWithWhereUniqueWithoutNeighborhoodInput[]
    createMany?: UserCreateManyNeighborhoodInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutNeighborhoodInput | UserUpdateWithWhereUniqueWithoutNeighborhoodInput[]
    updateMany?: UserUpdateManyWithWhereWithoutNeighborhoodInput | UserUpdateManyWithWhereWithoutNeighborhoodInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GroupBuyUncheckedUpdateManyWithoutNeighborhoodNestedInput = {
    create?: XOR<GroupBuyCreateWithoutNeighborhoodInput, GroupBuyUncheckedCreateWithoutNeighborhoodInput> | GroupBuyCreateWithoutNeighborhoodInput[] | GroupBuyUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: GroupBuyCreateOrConnectWithoutNeighborhoodInput | GroupBuyCreateOrConnectWithoutNeighborhoodInput[]
    upsert?: GroupBuyUpsertWithWhereUniqueWithoutNeighborhoodInput | GroupBuyUpsertWithWhereUniqueWithoutNeighborhoodInput[]
    createMany?: GroupBuyCreateManyNeighborhoodInputEnvelope
    set?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    disconnect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    delete?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    connect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    update?: GroupBuyUpdateWithWhereUniqueWithoutNeighborhoodInput | GroupBuyUpdateWithWhereUniqueWithoutNeighborhoodInput[]
    updateMany?: GroupBuyUpdateManyWithWhereWithoutNeighborhoodInput | GroupBuyUpdateManyWithWhereWithoutNeighborhoodInput[]
    deleteMany?: GroupBuyScalarWhereInput | GroupBuyScalarWhereInput[]
  }

  export type ShareUncheckedUpdateManyWithoutNeighborhoodNestedInput = {
    create?: XOR<ShareCreateWithoutNeighborhoodInput, ShareUncheckedCreateWithoutNeighborhoodInput> | ShareCreateWithoutNeighborhoodInput[] | ShareUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutNeighborhoodInput | ShareCreateOrConnectWithoutNeighborhoodInput[]
    upsert?: ShareUpsertWithWhereUniqueWithoutNeighborhoodInput | ShareUpsertWithWhereUniqueWithoutNeighborhoodInput[]
    createMany?: ShareCreateManyNeighborhoodInputEnvelope
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    update?: ShareUpdateWithWhereUniqueWithoutNeighborhoodInput | ShareUpdateWithWhereUniqueWithoutNeighborhoodInput[]
    updateMany?: ShareUpdateManyWithWhereWithoutNeighborhoodInput | ShareUpdateManyWithWhereWithoutNeighborhoodInput[]
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutNeighborhoodNestedInput = {
    create?: XOR<UserCreateWithoutNeighborhoodInput, UserUncheckedCreateWithoutNeighborhoodInput> | UserCreateWithoutNeighborhoodInput[] | UserUncheckedCreateWithoutNeighborhoodInput[]
    connectOrCreate?: UserCreateOrConnectWithoutNeighborhoodInput | UserCreateOrConnectWithoutNeighborhoodInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutNeighborhoodInput | UserUpsertWithWhereUniqueWithoutNeighborhoodInput[]
    createMany?: UserCreateManyNeighborhoodInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutNeighborhoodInput | UserUpdateWithWhereUniqueWithoutNeighborhoodInput[]
    updateMany?: UserUpdateManyWithWhereWithoutNeighborhoodInput | UserUpdateManyWithWhereWithoutNeighborhoodInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type GroupBuyCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<GroupBuyCreateWithoutOrganizerInput, GroupBuyUncheckedCreateWithoutOrganizerInput> | GroupBuyCreateWithoutOrganizerInput[] | GroupBuyUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: GroupBuyCreateOrConnectWithoutOrganizerInput | GroupBuyCreateOrConnectWithoutOrganizerInput[]
    createMany?: GroupBuyCreateManyOrganizerInputEnvelope
    connect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
  }

  export type GroupBuyChatMessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<GroupBuyChatMessageCreateWithoutSenderInput, GroupBuyChatMessageUncheckedCreateWithoutSenderInput> | GroupBuyChatMessageCreateWithoutSenderInput[] | GroupBuyChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: GroupBuyChatMessageCreateOrConnectWithoutSenderInput | GroupBuyChatMessageCreateOrConnectWithoutSenderInput[]
    createMany?: GroupBuyChatMessageCreateManySenderInputEnvelope
    connect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
  }

  export type GroupBuyChatParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupBuyChatParticipantCreateWithoutUserInput, GroupBuyChatParticipantUncheckedCreateWithoutUserInput> | GroupBuyChatParticipantCreateWithoutUserInput[] | GroupBuyChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupBuyChatParticipantCreateOrConnectWithoutUserInput | GroupBuyChatParticipantCreateOrConnectWithoutUserInput[]
    createMany?: GroupBuyChatParticipantCreateManyUserInputEnvelope
    connect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
  }

  export type GroupBuyParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupBuyParticipantCreateWithoutUserInput, GroupBuyParticipantUncheckedCreateWithoutUserInput> | GroupBuyParticipantCreateWithoutUserInput[] | GroupBuyParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupBuyParticipantCreateOrConnectWithoutUserInput | GroupBuyParticipantCreateOrConnectWithoutUserInput[]
    createMany?: GroupBuyParticipantCreateManyUserInputEnvelope
    connect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutRecipientInput = {
    create?: XOR<ReviewCreateWithoutRecipientInput, ReviewUncheckedCreateWithoutRecipientInput> | ReviewCreateWithoutRecipientInput[] | ReviewUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRecipientInput | ReviewCreateOrConnectWithoutRecipientInput[]
    createMany?: ReviewCreateManyRecipientInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutWriterInput = {
    create?: XOR<ReviewCreateWithoutWriterInput, ReviewUncheckedCreateWithoutWriterInput> | ReviewCreateWithoutWriterInput[] | ReviewUncheckedCreateWithoutWriterInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWriterInput | ReviewCreateOrConnectWithoutWriterInput[]
    createMany?: ReviewCreateManyWriterInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ShareCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ShareCreateWithoutOwnerInput, ShareUncheckedCreateWithoutOwnerInput> | ShareCreateWithoutOwnerInput[] | ShareUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutOwnerInput | ShareCreateOrConnectWithoutOwnerInput[]
    createMany?: ShareCreateManyOwnerInputEnvelope
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
  }

  export type ShareCreateNestedManyWithoutRecipientInput = {
    create?: XOR<ShareCreateWithoutRecipientInput, ShareUncheckedCreateWithoutRecipientInput> | ShareCreateWithoutRecipientInput[] | ShareUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutRecipientInput | ShareCreateOrConnectWithoutRecipientInput[]
    createMany?: ShareCreateManyRecipientInputEnvelope
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
  }

  export type ShareChatMessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<ShareChatMessageCreateWithoutSenderInput, ShareChatMessageUncheckedCreateWithoutSenderInput> | ShareChatMessageCreateWithoutSenderInput[] | ShareChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ShareChatMessageCreateOrConnectWithoutSenderInput | ShareChatMessageCreateOrConnectWithoutSenderInput[]
    createMany?: ShareChatMessageCreateManySenderInputEnvelope
    connect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
  }

  export type ShareChatParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<ShareChatParticipantCreateWithoutUserInput, ShareChatParticipantUncheckedCreateWithoutUserInput> | ShareChatParticipantCreateWithoutUserInput[] | ShareChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShareChatParticipantCreateOrConnectWithoutUserInput | ShareChatParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ShareChatParticipantCreateManyUserInputEnvelope
    connect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
  }

  export type NeighborhoodCreateNestedOneWithoutUsersInput = {
    create?: XOR<NeighborhoodCreateWithoutUsersInput, NeighborhoodUncheckedCreateWithoutUsersInput>
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutUsersInput
    connect?: NeighborhoodWhereUniqueInput
  }

  export type GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<GroupBuyCreateWithoutOrganizerInput, GroupBuyUncheckedCreateWithoutOrganizerInput> | GroupBuyCreateWithoutOrganizerInput[] | GroupBuyUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: GroupBuyCreateOrConnectWithoutOrganizerInput | GroupBuyCreateOrConnectWithoutOrganizerInput[]
    createMany?: GroupBuyCreateManyOrganizerInputEnvelope
    connect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
  }

  export type GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<GroupBuyChatMessageCreateWithoutSenderInput, GroupBuyChatMessageUncheckedCreateWithoutSenderInput> | GroupBuyChatMessageCreateWithoutSenderInput[] | GroupBuyChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: GroupBuyChatMessageCreateOrConnectWithoutSenderInput | GroupBuyChatMessageCreateOrConnectWithoutSenderInput[]
    createMany?: GroupBuyChatMessageCreateManySenderInputEnvelope
    connect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
  }

  export type GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupBuyChatParticipantCreateWithoutUserInput, GroupBuyChatParticipantUncheckedCreateWithoutUserInput> | GroupBuyChatParticipantCreateWithoutUserInput[] | GroupBuyChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupBuyChatParticipantCreateOrConnectWithoutUserInput | GroupBuyChatParticipantCreateOrConnectWithoutUserInput[]
    createMany?: GroupBuyChatParticipantCreateManyUserInputEnvelope
    connect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
  }

  export type GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GroupBuyParticipantCreateWithoutUserInput, GroupBuyParticipantUncheckedCreateWithoutUserInput> | GroupBuyParticipantCreateWithoutUserInput[] | GroupBuyParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupBuyParticipantCreateOrConnectWithoutUserInput | GroupBuyParticipantCreateOrConnectWithoutUserInput[]
    createMany?: GroupBuyParticipantCreateManyUserInputEnvelope
    connect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutRecipientInput = {
    create?: XOR<ReviewCreateWithoutRecipientInput, ReviewUncheckedCreateWithoutRecipientInput> | ReviewCreateWithoutRecipientInput[] | ReviewUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRecipientInput | ReviewCreateOrConnectWithoutRecipientInput[]
    createMany?: ReviewCreateManyRecipientInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutWriterInput = {
    create?: XOR<ReviewCreateWithoutWriterInput, ReviewUncheckedCreateWithoutWriterInput> | ReviewCreateWithoutWriterInput[] | ReviewUncheckedCreateWithoutWriterInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWriterInput | ReviewCreateOrConnectWithoutWriterInput[]
    createMany?: ReviewCreateManyWriterInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ShareUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ShareCreateWithoutOwnerInput, ShareUncheckedCreateWithoutOwnerInput> | ShareCreateWithoutOwnerInput[] | ShareUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutOwnerInput | ShareCreateOrConnectWithoutOwnerInput[]
    createMany?: ShareCreateManyOwnerInputEnvelope
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
  }

  export type ShareUncheckedCreateNestedManyWithoutRecipientInput = {
    create?: XOR<ShareCreateWithoutRecipientInput, ShareUncheckedCreateWithoutRecipientInput> | ShareCreateWithoutRecipientInput[] | ShareUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutRecipientInput | ShareCreateOrConnectWithoutRecipientInput[]
    createMany?: ShareCreateManyRecipientInputEnvelope
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
  }

  export type ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<ShareChatMessageCreateWithoutSenderInput, ShareChatMessageUncheckedCreateWithoutSenderInput> | ShareChatMessageCreateWithoutSenderInput[] | ShareChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ShareChatMessageCreateOrConnectWithoutSenderInput | ShareChatMessageCreateOrConnectWithoutSenderInput[]
    createMany?: ShareChatMessageCreateManySenderInputEnvelope
    connect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
  }

  export type ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ShareChatParticipantCreateWithoutUserInput, ShareChatParticipantUncheckedCreateWithoutUserInput> | ShareChatParticipantCreateWithoutUserInput[] | ShareChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShareChatParticipantCreateOrConnectWithoutUserInput | ShareChatParticipantCreateOrConnectWithoutUserInput[]
    createMany?: ShareChatParticipantCreateManyUserInputEnvelope
    connect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GroupBuyUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<GroupBuyCreateWithoutOrganizerInput, GroupBuyUncheckedCreateWithoutOrganizerInput> | GroupBuyCreateWithoutOrganizerInput[] | GroupBuyUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: GroupBuyCreateOrConnectWithoutOrganizerInput | GroupBuyCreateOrConnectWithoutOrganizerInput[]
    upsert?: GroupBuyUpsertWithWhereUniqueWithoutOrganizerInput | GroupBuyUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: GroupBuyCreateManyOrganizerInputEnvelope
    set?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    disconnect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    delete?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    connect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    update?: GroupBuyUpdateWithWhereUniqueWithoutOrganizerInput | GroupBuyUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: GroupBuyUpdateManyWithWhereWithoutOrganizerInput | GroupBuyUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: GroupBuyScalarWhereInput | GroupBuyScalarWhereInput[]
  }

  export type GroupBuyChatMessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<GroupBuyChatMessageCreateWithoutSenderInput, GroupBuyChatMessageUncheckedCreateWithoutSenderInput> | GroupBuyChatMessageCreateWithoutSenderInput[] | GroupBuyChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: GroupBuyChatMessageCreateOrConnectWithoutSenderInput | GroupBuyChatMessageCreateOrConnectWithoutSenderInput[]
    upsert?: GroupBuyChatMessageUpsertWithWhereUniqueWithoutSenderInput | GroupBuyChatMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: GroupBuyChatMessageCreateManySenderInputEnvelope
    set?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    disconnect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    delete?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    connect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    update?: GroupBuyChatMessageUpdateWithWhereUniqueWithoutSenderInput | GroupBuyChatMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: GroupBuyChatMessageUpdateManyWithWhereWithoutSenderInput | GroupBuyChatMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: GroupBuyChatMessageScalarWhereInput | GroupBuyChatMessageScalarWhereInput[]
  }

  export type GroupBuyChatParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupBuyChatParticipantCreateWithoutUserInput, GroupBuyChatParticipantUncheckedCreateWithoutUserInput> | GroupBuyChatParticipantCreateWithoutUserInput[] | GroupBuyChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupBuyChatParticipantCreateOrConnectWithoutUserInput | GroupBuyChatParticipantCreateOrConnectWithoutUserInput[]
    upsert?: GroupBuyChatParticipantUpsertWithWhereUniqueWithoutUserInput | GroupBuyChatParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupBuyChatParticipantCreateManyUserInputEnvelope
    set?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    disconnect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    delete?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    connect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    update?: GroupBuyChatParticipantUpdateWithWhereUniqueWithoutUserInput | GroupBuyChatParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupBuyChatParticipantUpdateManyWithWhereWithoutUserInput | GroupBuyChatParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupBuyChatParticipantScalarWhereInput | GroupBuyChatParticipantScalarWhereInput[]
  }

  export type GroupBuyParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupBuyParticipantCreateWithoutUserInput, GroupBuyParticipantUncheckedCreateWithoutUserInput> | GroupBuyParticipantCreateWithoutUserInput[] | GroupBuyParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupBuyParticipantCreateOrConnectWithoutUserInput | GroupBuyParticipantCreateOrConnectWithoutUserInput[]
    upsert?: GroupBuyParticipantUpsertWithWhereUniqueWithoutUserInput | GroupBuyParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupBuyParticipantCreateManyUserInputEnvelope
    set?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    disconnect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    delete?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    connect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    update?: GroupBuyParticipantUpdateWithWhereUniqueWithoutUserInput | GroupBuyParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupBuyParticipantUpdateManyWithWhereWithoutUserInput | GroupBuyParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupBuyParticipantScalarWhereInput | GroupBuyParticipantScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<ReviewCreateWithoutRecipientInput, ReviewUncheckedCreateWithoutRecipientInput> | ReviewCreateWithoutRecipientInput[] | ReviewUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRecipientInput | ReviewCreateOrConnectWithoutRecipientInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutRecipientInput | ReviewUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: ReviewCreateManyRecipientInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutRecipientInput | ReviewUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutRecipientInput | ReviewUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutWriterNestedInput = {
    create?: XOR<ReviewCreateWithoutWriterInput, ReviewUncheckedCreateWithoutWriterInput> | ReviewCreateWithoutWriterInput[] | ReviewUncheckedCreateWithoutWriterInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWriterInput | ReviewCreateOrConnectWithoutWriterInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutWriterInput | ReviewUpsertWithWhereUniqueWithoutWriterInput[]
    createMany?: ReviewCreateManyWriterInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutWriterInput | ReviewUpdateWithWhereUniqueWithoutWriterInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutWriterInput | ReviewUpdateManyWithWhereWithoutWriterInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ShareUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ShareCreateWithoutOwnerInput, ShareUncheckedCreateWithoutOwnerInput> | ShareCreateWithoutOwnerInput[] | ShareUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutOwnerInput | ShareCreateOrConnectWithoutOwnerInput[]
    upsert?: ShareUpsertWithWhereUniqueWithoutOwnerInput | ShareUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ShareCreateManyOwnerInputEnvelope
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    update?: ShareUpdateWithWhereUniqueWithoutOwnerInput | ShareUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ShareUpdateManyWithWhereWithoutOwnerInput | ShareUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[]
  }

  export type ShareUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<ShareCreateWithoutRecipientInput, ShareUncheckedCreateWithoutRecipientInput> | ShareCreateWithoutRecipientInput[] | ShareUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutRecipientInput | ShareCreateOrConnectWithoutRecipientInput[]
    upsert?: ShareUpsertWithWhereUniqueWithoutRecipientInput | ShareUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: ShareCreateManyRecipientInputEnvelope
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    update?: ShareUpdateWithWhereUniqueWithoutRecipientInput | ShareUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: ShareUpdateManyWithWhereWithoutRecipientInput | ShareUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[]
  }

  export type ShareChatMessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ShareChatMessageCreateWithoutSenderInput, ShareChatMessageUncheckedCreateWithoutSenderInput> | ShareChatMessageCreateWithoutSenderInput[] | ShareChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ShareChatMessageCreateOrConnectWithoutSenderInput | ShareChatMessageCreateOrConnectWithoutSenderInput[]
    upsert?: ShareChatMessageUpsertWithWhereUniqueWithoutSenderInput | ShareChatMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ShareChatMessageCreateManySenderInputEnvelope
    set?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    disconnect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    delete?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    connect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    update?: ShareChatMessageUpdateWithWhereUniqueWithoutSenderInput | ShareChatMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ShareChatMessageUpdateManyWithWhereWithoutSenderInput | ShareChatMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ShareChatMessageScalarWhereInput | ShareChatMessageScalarWhereInput[]
  }

  export type ShareChatParticipantUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShareChatParticipantCreateWithoutUserInput, ShareChatParticipantUncheckedCreateWithoutUserInput> | ShareChatParticipantCreateWithoutUserInput[] | ShareChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShareChatParticipantCreateOrConnectWithoutUserInput | ShareChatParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ShareChatParticipantUpsertWithWhereUniqueWithoutUserInput | ShareChatParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShareChatParticipantCreateManyUserInputEnvelope
    set?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    disconnect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    delete?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    connect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    update?: ShareChatParticipantUpdateWithWhereUniqueWithoutUserInput | ShareChatParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShareChatParticipantUpdateManyWithWhereWithoutUserInput | ShareChatParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShareChatParticipantScalarWhereInput | ShareChatParticipantScalarWhereInput[]
  }

  export type NeighborhoodUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<NeighborhoodCreateWithoutUsersInput, NeighborhoodUncheckedCreateWithoutUsersInput>
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutUsersInput
    upsert?: NeighborhoodUpsertWithoutUsersInput
    connect?: NeighborhoodWhereUniqueInput
    update?: XOR<XOR<NeighborhoodUpdateToOneWithWhereWithoutUsersInput, NeighborhoodUpdateWithoutUsersInput>, NeighborhoodUncheckedUpdateWithoutUsersInput>
  }

  export type GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<GroupBuyCreateWithoutOrganizerInput, GroupBuyUncheckedCreateWithoutOrganizerInput> | GroupBuyCreateWithoutOrganizerInput[] | GroupBuyUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: GroupBuyCreateOrConnectWithoutOrganizerInput | GroupBuyCreateOrConnectWithoutOrganizerInput[]
    upsert?: GroupBuyUpsertWithWhereUniqueWithoutOrganizerInput | GroupBuyUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: GroupBuyCreateManyOrganizerInputEnvelope
    set?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    disconnect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    delete?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    connect?: GroupBuyWhereUniqueInput | GroupBuyWhereUniqueInput[]
    update?: GroupBuyUpdateWithWhereUniqueWithoutOrganizerInput | GroupBuyUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: GroupBuyUpdateManyWithWhereWithoutOrganizerInput | GroupBuyUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: GroupBuyScalarWhereInput | GroupBuyScalarWhereInput[]
  }

  export type GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<GroupBuyChatMessageCreateWithoutSenderInput, GroupBuyChatMessageUncheckedCreateWithoutSenderInput> | GroupBuyChatMessageCreateWithoutSenderInput[] | GroupBuyChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: GroupBuyChatMessageCreateOrConnectWithoutSenderInput | GroupBuyChatMessageCreateOrConnectWithoutSenderInput[]
    upsert?: GroupBuyChatMessageUpsertWithWhereUniqueWithoutSenderInput | GroupBuyChatMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: GroupBuyChatMessageCreateManySenderInputEnvelope
    set?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    disconnect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    delete?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    connect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    update?: GroupBuyChatMessageUpdateWithWhereUniqueWithoutSenderInput | GroupBuyChatMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: GroupBuyChatMessageUpdateManyWithWhereWithoutSenderInput | GroupBuyChatMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: GroupBuyChatMessageScalarWhereInput | GroupBuyChatMessageScalarWhereInput[]
  }

  export type GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupBuyChatParticipantCreateWithoutUserInput, GroupBuyChatParticipantUncheckedCreateWithoutUserInput> | GroupBuyChatParticipantCreateWithoutUserInput[] | GroupBuyChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupBuyChatParticipantCreateOrConnectWithoutUserInput | GroupBuyChatParticipantCreateOrConnectWithoutUserInput[]
    upsert?: GroupBuyChatParticipantUpsertWithWhereUniqueWithoutUserInput | GroupBuyChatParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupBuyChatParticipantCreateManyUserInputEnvelope
    set?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    disconnect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    delete?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    connect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    update?: GroupBuyChatParticipantUpdateWithWhereUniqueWithoutUserInput | GroupBuyChatParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupBuyChatParticipantUpdateManyWithWhereWithoutUserInput | GroupBuyChatParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupBuyChatParticipantScalarWhereInput | GroupBuyChatParticipantScalarWhereInput[]
  }

  export type GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GroupBuyParticipantCreateWithoutUserInput, GroupBuyParticipantUncheckedCreateWithoutUserInput> | GroupBuyParticipantCreateWithoutUserInput[] | GroupBuyParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GroupBuyParticipantCreateOrConnectWithoutUserInput | GroupBuyParticipantCreateOrConnectWithoutUserInput[]
    upsert?: GroupBuyParticipantUpsertWithWhereUniqueWithoutUserInput | GroupBuyParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GroupBuyParticipantCreateManyUserInputEnvelope
    set?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    disconnect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    delete?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    connect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    update?: GroupBuyParticipantUpdateWithWhereUniqueWithoutUserInput | GroupBuyParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GroupBuyParticipantUpdateManyWithWhereWithoutUserInput | GroupBuyParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GroupBuyParticipantScalarWhereInput | GroupBuyParticipantScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<ReviewCreateWithoutRecipientInput, ReviewUncheckedCreateWithoutRecipientInput> | ReviewCreateWithoutRecipientInput[] | ReviewUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutRecipientInput | ReviewCreateOrConnectWithoutRecipientInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutRecipientInput | ReviewUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: ReviewCreateManyRecipientInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutRecipientInput | ReviewUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutRecipientInput | ReviewUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutWriterNestedInput = {
    create?: XOR<ReviewCreateWithoutWriterInput, ReviewUncheckedCreateWithoutWriterInput> | ReviewCreateWithoutWriterInput[] | ReviewUncheckedCreateWithoutWriterInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWriterInput | ReviewCreateOrConnectWithoutWriterInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutWriterInput | ReviewUpsertWithWhereUniqueWithoutWriterInput[]
    createMany?: ReviewCreateManyWriterInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutWriterInput | ReviewUpdateWithWhereUniqueWithoutWriterInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutWriterInput | ReviewUpdateManyWithWhereWithoutWriterInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ShareUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ShareCreateWithoutOwnerInput, ShareUncheckedCreateWithoutOwnerInput> | ShareCreateWithoutOwnerInput[] | ShareUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutOwnerInput | ShareCreateOrConnectWithoutOwnerInput[]
    upsert?: ShareUpsertWithWhereUniqueWithoutOwnerInput | ShareUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ShareCreateManyOwnerInputEnvelope
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    update?: ShareUpdateWithWhereUniqueWithoutOwnerInput | ShareUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ShareUpdateManyWithWhereWithoutOwnerInput | ShareUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[]
  }

  export type ShareUncheckedUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<ShareCreateWithoutRecipientInput, ShareUncheckedCreateWithoutRecipientInput> | ShareCreateWithoutRecipientInput[] | ShareUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutRecipientInput | ShareCreateOrConnectWithoutRecipientInput[]
    upsert?: ShareUpsertWithWhereUniqueWithoutRecipientInput | ShareUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: ShareCreateManyRecipientInputEnvelope
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    update?: ShareUpdateWithWhereUniqueWithoutRecipientInput | ShareUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: ShareUpdateManyWithWhereWithoutRecipientInput | ShareUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[]
  }

  export type ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ShareChatMessageCreateWithoutSenderInput, ShareChatMessageUncheckedCreateWithoutSenderInput> | ShareChatMessageCreateWithoutSenderInput[] | ShareChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ShareChatMessageCreateOrConnectWithoutSenderInput | ShareChatMessageCreateOrConnectWithoutSenderInput[]
    upsert?: ShareChatMessageUpsertWithWhereUniqueWithoutSenderInput | ShareChatMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ShareChatMessageCreateManySenderInputEnvelope
    set?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    disconnect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    delete?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    connect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    update?: ShareChatMessageUpdateWithWhereUniqueWithoutSenderInput | ShareChatMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ShareChatMessageUpdateManyWithWhereWithoutSenderInput | ShareChatMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ShareChatMessageScalarWhereInput | ShareChatMessageScalarWhereInput[]
  }

  export type ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ShareChatParticipantCreateWithoutUserInput, ShareChatParticipantUncheckedCreateWithoutUserInput> | ShareChatParticipantCreateWithoutUserInput[] | ShareChatParticipantUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ShareChatParticipantCreateOrConnectWithoutUserInput | ShareChatParticipantCreateOrConnectWithoutUserInput[]
    upsert?: ShareChatParticipantUpsertWithWhereUniqueWithoutUserInput | ShareChatParticipantUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ShareChatParticipantCreateManyUserInputEnvelope
    set?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    disconnect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    delete?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    connect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    update?: ShareChatParticipantUpdateWithWhereUniqueWithoutUserInput | ShareChatParticipantUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ShareChatParticipantUpdateManyWithWhereWithoutUserInput | ShareChatParticipantUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ShareChatParticipantScalarWhereInput | ShareChatParticipantScalarWhereInput[]
  }

  export type NeighborhoodCreateNestedOneWithoutGrouBuysInput = {
    create?: XOR<NeighborhoodCreateWithoutGrouBuysInput, NeighborhoodUncheckedCreateWithoutGrouBuysInput>
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutGrouBuysInput
    connect?: NeighborhoodWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGrouBuysInput = {
    create?: XOR<UserCreateWithoutGrouBuysInput, UserUncheckedCreateWithoutGrouBuysInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrouBuysInput
    connect?: UserWhereUniqueInput
  }

  export type GroupBuyChatCreateNestedManyWithoutGroupBuyInput = {
    create?: XOR<GroupBuyChatCreateWithoutGroupBuyInput, GroupBuyChatUncheckedCreateWithoutGroupBuyInput> | GroupBuyChatCreateWithoutGroupBuyInput[] | GroupBuyChatUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyChatCreateOrConnectWithoutGroupBuyInput | GroupBuyChatCreateOrConnectWithoutGroupBuyInput[]
    createMany?: GroupBuyChatCreateManyGroupBuyInputEnvelope
    connect?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
  }

  export type GroupBuyImageCreateNestedManyWithoutGroupBuyInput = {
    create?: XOR<GroupBuyImageCreateWithoutGroupBuyInput, GroupBuyImageUncheckedCreateWithoutGroupBuyInput> | GroupBuyImageCreateWithoutGroupBuyInput[] | GroupBuyImageUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyImageCreateOrConnectWithoutGroupBuyInput | GroupBuyImageCreateOrConnectWithoutGroupBuyInput[]
    createMany?: GroupBuyImageCreateManyGroupBuyInputEnvelope
    connect?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
  }

  export type GroupBuyParticipantCreateNestedManyWithoutGroupBuyInput = {
    create?: XOR<GroupBuyParticipantCreateWithoutGroupBuyInput, GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput> | GroupBuyParticipantCreateWithoutGroupBuyInput[] | GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput | GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput[]
    createMany?: GroupBuyParticipantCreateManyGroupBuyInputEnvelope
    connect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
  }

  export type GroupBuyChatUncheckedCreateNestedManyWithoutGroupBuyInput = {
    create?: XOR<GroupBuyChatCreateWithoutGroupBuyInput, GroupBuyChatUncheckedCreateWithoutGroupBuyInput> | GroupBuyChatCreateWithoutGroupBuyInput[] | GroupBuyChatUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyChatCreateOrConnectWithoutGroupBuyInput | GroupBuyChatCreateOrConnectWithoutGroupBuyInput[]
    createMany?: GroupBuyChatCreateManyGroupBuyInputEnvelope
    connect?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
  }

  export type GroupBuyImageUncheckedCreateNestedManyWithoutGroupBuyInput = {
    create?: XOR<GroupBuyImageCreateWithoutGroupBuyInput, GroupBuyImageUncheckedCreateWithoutGroupBuyInput> | GroupBuyImageCreateWithoutGroupBuyInput[] | GroupBuyImageUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyImageCreateOrConnectWithoutGroupBuyInput | GroupBuyImageCreateOrConnectWithoutGroupBuyInput[]
    createMany?: GroupBuyImageCreateManyGroupBuyInputEnvelope
    connect?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
  }

  export type GroupBuyParticipantUncheckedCreateNestedManyWithoutGroupBuyInput = {
    create?: XOR<GroupBuyParticipantCreateWithoutGroupBuyInput, GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput> | GroupBuyParticipantCreateWithoutGroupBuyInput[] | GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput | GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput[]
    createMany?: GroupBuyParticipantCreateManyGroupBuyInputEnvelope
    connect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
  }

  export type NeighborhoodUpdateOneRequiredWithoutGrouBuysNestedInput = {
    create?: XOR<NeighborhoodCreateWithoutGrouBuysInput, NeighborhoodUncheckedCreateWithoutGrouBuysInput>
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutGrouBuysInput
    upsert?: NeighborhoodUpsertWithoutGrouBuysInput
    connect?: NeighborhoodWhereUniqueInput
    update?: XOR<XOR<NeighborhoodUpdateToOneWithWhereWithoutGrouBuysInput, NeighborhoodUpdateWithoutGrouBuysInput>, NeighborhoodUncheckedUpdateWithoutGrouBuysInput>
  }

  export type UserUpdateOneRequiredWithoutGrouBuysNestedInput = {
    create?: XOR<UserCreateWithoutGrouBuysInput, UserUncheckedCreateWithoutGrouBuysInput>
    connectOrCreate?: UserCreateOrConnectWithoutGrouBuysInput
    upsert?: UserUpsertWithoutGrouBuysInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGrouBuysInput, UserUpdateWithoutGrouBuysInput>, UserUncheckedUpdateWithoutGrouBuysInput>
  }

  export type GroupBuyChatUpdateManyWithoutGroupBuyNestedInput = {
    create?: XOR<GroupBuyChatCreateWithoutGroupBuyInput, GroupBuyChatUncheckedCreateWithoutGroupBuyInput> | GroupBuyChatCreateWithoutGroupBuyInput[] | GroupBuyChatUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyChatCreateOrConnectWithoutGroupBuyInput | GroupBuyChatCreateOrConnectWithoutGroupBuyInput[]
    upsert?: GroupBuyChatUpsertWithWhereUniqueWithoutGroupBuyInput | GroupBuyChatUpsertWithWhereUniqueWithoutGroupBuyInput[]
    createMany?: GroupBuyChatCreateManyGroupBuyInputEnvelope
    set?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
    disconnect?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
    delete?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
    connect?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
    update?: GroupBuyChatUpdateWithWhereUniqueWithoutGroupBuyInput | GroupBuyChatUpdateWithWhereUniqueWithoutGroupBuyInput[]
    updateMany?: GroupBuyChatUpdateManyWithWhereWithoutGroupBuyInput | GroupBuyChatUpdateManyWithWhereWithoutGroupBuyInput[]
    deleteMany?: GroupBuyChatScalarWhereInput | GroupBuyChatScalarWhereInput[]
  }

  export type GroupBuyImageUpdateManyWithoutGroupBuyNestedInput = {
    create?: XOR<GroupBuyImageCreateWithoutGroupBuyInput, GroupBuyImageUncheckedCreateWithoutGroupBuyInput> | GroupBuyImageCreateWithoutGroupBuyInput[] | GroupBuyImageUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyImageCreateOrConnectWithoutGroupBuyInput | GroupBuyImageCreateOrConnectWithoutGroupBuyInput[]
    upsert?: GroupBuyImageUpsertWithWhereUniqueWithoutGroupBuyInput | GroupBuyImageUpsertWithWhereUniqueWithoutGroupBuyInput[]
    createMany?: GroupBuyImageCreateManyGroupBuyInputEnvelope
    set?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
    disconnect?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
    delete?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
    connect?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
    update?: GroupBuyImageUpdateWithWhereUniqueWithoutGroupBuyInput | GroupBuyImageUpdateWithWhereUniqueWithoutGroupBuyInput[]
    updateMany?: GroupBuyImageUpdateManyWithWhereWithoutGroupBuyInput | GroupBuyImageUpdateManyWithWhereWithoutGroupBuyInput[]
    deleteMany?: GroupBuyImageScalarWhereInput | GroupBuyImageScalarWhereInput[]
  }

  export type GroupBuyParticipantUpdateManyWithoutGroupBuyNestedInput = {
    create?: XOR<GroupBuyParticipantCreateWithoutGroupBuyInput, GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput> | GroupBuyParticipantCreateWithoutGroupBuyInput[] | GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput | GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput[]
    upsert?: GroupBuyParticipantUpsertWithWhereUniqueWithoutGroupBuyInput | GroupBuyParticipantUpsertWithWhereUniqueWithoutGroupBuyInput[]
    createMany?: GroupBuyParticipantCreateManyGroupBuyInputEnvelope
    set?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    disconnect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    delete?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    connect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    update?: GroupBuyParticipantUpdateWithWhereUniqueWithoutGroupBuyInput | GroupBuyParticipantUpdateWithWhereUniqueWithoutGroupBuyInput[]
    updateMany?: GroupBuyParticipantUpdateManyWithWhereWithoutGroupBuyInput | GroupBuyParticipantUpdateManyWithWhereWithoutGroupBuyInput[]
    deleteMany?: GroupBuyParticipantScalarWhereInput | GroupBuyParticipantScalarWhereInput[]
  }

  export type GroupBuyChatUncheckedUpdateManyWithoutGroupBuyNestedInput = {
    create?: XOR<GroupBuyChatCreateWithoutGroupBuyInput, GroupBuyChatUncheckedCreateWithoutGroupBuyInput> | GroupBuyChatCreateWithoutGroupBuyInput[] | GroupBuyChatUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyChatCreateOrConnectWithoutGroupBuyInput | GroupBuyChatCreateOrConnectWithoutGroupBuyInput[]
    upsert?: GroupBuyChatUpsertWithWhereUniqueWithoutGroupBuyInput | GroupBuyChatUpsertWithWhereUniqueWithoutGroupBuyInput[]
    createMany?: GroupBuyChatCreateManyGroupBuyInputEnvelope
    set?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
    disconnect?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
    delete?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
    connect?: GroupBuyChatWhereUniqueInput | GroupBuyChatWhereUniqueInput[]
    update?: GroupBuyChatUpdateWithWhereUniqueWithoutGroupBuyInput | GroupBuyChatUpdateWithWhereUniqueWithoutGroupBuyInput[]
    updateMany?: GroupBuyChatUpdateManyWithWhereWithoutGroupBuyInput | GroupBuyChatUpdateManyWithWhereWithoutGroupBuyInput[]
    deleteMany?: GroupBuyChatScalarWhereInput | GroupBuyChatScalarWhereInput[]
  }

  export type GroupBuyImageUncheckedUpdateManyWithoutGroupBuyNestedInput = {
    create?: XOR<GroupBuyImageCreateWithoutGroupBuyInput, GroupBuyImageUncheckedCreateWithoutGroupBuyInput> | GroupBuyImageCreateWithoutGroupBuyInput[] | GroupBuyImageUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyImageCreateOrConnectWithoutGroupBuyInput | GroupBuyImageCreateOrConnectWithoutGroupBuyInput[]
    upsert?: GroupBuyImageUpsertWithWhereUniqueWithoutGroupBuyInput | GroupBuyImageUpsertWithWhereUniqueWithoutGroupBuyInput[]
    createMany?: GroupBuyImageCreateManyGroupBuyInputEnvelope
    set?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
    disconnect?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
    delete?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
    connect?: GroupBuyImageWhereUniqueInput | GroupBuyImageWhereUniqueInput[]
    update?: GroupBuyImageUpdateWithWhereUniqueWithoutGroupBuyInput | GroupBuyImageUpdateWithWhereUniqueWithoutGroupBuyInput[]
    updateMany?: GroupBuyImageUpdateManyWithWhereWithoutGroupBuyInput | GroupBuyImageUpdateManyWithWhereWithoutGroupBuyInput[]
    deleteMany?: GroupBuyImageScalarWhereInput | GroupBuyImageScalarWhereInput[]
  }

  export type GroupBuyParticipantUncheckedUpdateManyWithoutGroupBuyNestedInput = {
    create?: XOR<GroupBuyParticipantCreateWithoutGroupBuyInput, GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput> | GroupBuyParticipantCreateWithoutGroupBuyInput[] | GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput[]
    connectOrCreate?: GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput | GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput[]
    upsert?: GroupBuyParticipantUpsertWithWhereUniqueWithoutGroupBuyInput | GroupBuyParticipantUpsertWithWhereUniqueWithoutGroupBuyInput[]
    createMany?: GroupBuyParticipantCreateManyGroupBuyInputEnvelope
    set?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    disconnect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    delete?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    connect?: GroupBuyParticipantWhereUniqueInput | GroupBuyParticipantWhereUniqueInput[]
    update?: GroupBuyParticipantUpdateWithWhereUniqueWithoutGroupBuyInput | GroupBuyParticipantUpdateWithWhereUniqueWithoutGroupBuyInput[]
    updateMany?: GroupBuyParticipantUpdateManyWithWhereWithoutGroupBuyInput | GroupBuyParticipantUpdateManyWithWhereWithoutGroupBuyInput[]
    deleteMany?: GroupBuyParticipantScalarWhereInput | GroupBuyParticipantScalarWhereInput[]
  }

  export type GroupBuyCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<GroupBuyCreateWithoutParticipantsInput, GroupBuyUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: GroupBuyCreateOrConnectWithoutParticipantsInput
    connect?: GroupBuyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGroupBuyParticipantsInput = {
    create?: XOR<UserCreateWithoutGroupBuyParticipantsInput, UserUncheckedCreateWithoutGroupBuyParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupBuyParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type GroupBuyUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<GroupBuyCreateWithoutParticipantsInput, GroupBuyUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: GroupBuyCreateOrConnectWithoutParticipantsInput
    upsert?: GroupBuyUpsertWithoutParticipantsInput
    connect?: GroupBuyWhereUniqueInput
    update?: XOR<XOR<GroupBuyUpdateToOneWithWhereWithoutParticipantsInput, GroupBuyUpdateWithoutParticipantsInput>, GroupBuyUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutGroupBuyParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutGroupBuyParticipantsInput, UserUncheckedCreateWithoutGroupBuyParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupBuyParticipantsInput
    upsert?: UserUpsertWithoutGroupBuyParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGroupBuyParticipantsInput, UserUpdateWithoutGroupBuyParticipantsInput>, UserUncheckedUpdateWithoutGroupBuyParticipantsInput>
  }

  export type GroupBuyCreateNestedOneWithoutImagesInput = {
    create?: XOR<GroupBuyCreateWithoutImagesInput, GroupBuyUncheckedCreateWithoutImagesInput>
    connectOrCreate?: GroupBuyCreateOrConnectWithoutImagesInput
    connect?: GroupBuyWhereUniqueInput
  }

  export type GroupBuyUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<GroupBuyCreateWithoutImagesInput, GroupBuyUncheckedCreateWithoutImagesInput>
    connectOrCreate?: GroupBuyCreateOrConnectWithoutImagesInput
    upsert?: GroupBuyUpsertWithoutImagesInput
    connect?: GroupBuyWhereUniqueInput
    update?: XOR<XOR<GroupBuyUpdateToOneWithWhereWithoutImagesInput, GroupBuyUpdateWithoutImagesInput>, GroupBuyUncheckedUpdateWithoutImagesInput>
  }

  export type ReviewCreateNestedManyWithoutShareInput = {
    create?: XOR<ReviewCreateWithoutShareInput, ReviewUncheckedCreateWithoutShareInput> | ReviewCreateWithoutShareInput[] | ReviewUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutShareInput | ReviewCreateOrConnectWithoutShareInput[]
    createMany?: ReviewCreateManyShareInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type NeighborhoodCreateNestedOneWithoutSharesInput = {
    create?: XOR<NeighborhoodCreateWithoutSharesInput, NeighborhoodUncheckedCreateWithoutSharesInput>
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutSharesInput
    connect?: NeighborhoodWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOwnedSharesInput = {
    create?: XOR<UserCreateWithoutOwnedSharesInput, UserUncheckedCreateWithoutOwnedSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedSharesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedSharesInput = {
    create?: XOR<UserCreateWithoutReceivedSharesInput, UserUncheckedCreateWithoutReceivedSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedSharesInput
    connect?: UserWhereUniqueInput
  }

  export type ShareItemCreateNestedOneWithoutSharesInput = {
    create?: XOR<ShareItemCreateWithoutSharesInput, ShareItemUncheckedCreateWithoutSharesInput>
    connectOrCreate?: ShareItemCreateOrConnectWithoutSharesInput
    connect?: ShareItemWhereUniqueInput
  }

  export type ShareChatCreateNestedManyWithoutShareInput = {
    create?: XOR<ShareChatCreateWithoutShareInput, ShareChatUncheckedCreateWithoutShareInput> | ShareChatCreateWithoutShareInput[] | ShareChatUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareChatCreateOrConnectWithoutShareInput | ShareChatCreateOrConnectWithoutShareInput[]
    createMany?: ShareChatCreateManyShareInputEnvelope
    connect?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
  }

  export type ShareImageCreateNestedManyWithoutShareInput = {
    create?: XOR<ShareImageCreateWithoutShareInput, ShareImageUncheckedCreateWithoutShareInput> | ShareImageCreateWithoutShareInput[] | ShareImageUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareImageCreateOrConnectWithoutShareInput | ShareImageCreateOrConnectWithoutShareInput[]
    createMany?: ShareImageCreateManyShareInputEnvelope
    connect?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutShareInput = {
    create?: XOR<ReviewCreateWithoutShareInput, ReviewUncheckedCreateWithoutShareInput> | ReviewCreateWithoutShareInput[] | ReviewUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutShareInput | ReviewCreateOrConnectWithoutShareInput[]
    createMany?: ReviewCreateManyShareInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ShareChatUncheckedCreateNestedManyWithoutShareInput = {
    create?: XOR<ShareChatCreateWithoutShareInput, ShareChatUncheckedCreateWithoutShareInput> | ShareChatCreateWithoutShareInput[] | ShareChatUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareChatCreateOrConnectWithoutShareInput | ShareChatCreateOrConnectWithoutShareInput[]
    createMany?: ShareChatCreateManyShareInputEnvelope
    connect?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
  }

  export type ShareImageUncheckedCreateNestedManyWithoutShareInput = {
    create?: XOR<ShareImageCreateWithoutShareInput, ShareImageUncheckedCreateWithoutShareInput> | ShareImageCreateWithoutShareInput[] | ShareImageUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareImageCreateOrConnectWithoutShareInput | ShareImageCreateOrConnectWithoutShareInput[]
    createMany?: ShareImageCreateManyShareInputEnvelope
    connect?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ReviewUpdateManyWithoutShareNestedInput = {
    create?: XOR<ReviewCreateWithoutShareInput, ReviewUncheckedCreateWithoutShareInput> | ReviewCreateWithoutShareInput[] | ReviewUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutShareInput | ReviewCreateOrConnectWithoutShareInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutShareInput | ReviewUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ReviewCreateManyShareInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutShareInput | ReviewUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutShareInput | ReviewUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type NeighborhoodUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<NeighborhoodCreateWithoutSharesInput, NeighborhoodUncheckedCreateWithoutSharesInput>
    connectOrCreate?: NeighborhoodCreateOrConnectWithoutSharesInput
    upsert?: NeighborhoodUpsertWithoutSharesInput
    connect?: NeighborhoodWhereUniqueInput
    update?: XOR<XOR<NeighborhoodUpdateToOneWithWhereWithoutSharesInput, NeighborhoodUpdateWithoutSharesInput>, NeighborhoodUncheckedUpdateWithoutSharesInput>
  }

  export type UserUpdateOneRequiredWithoutOwnedSharesNestedInput = {
    create?: XOR<UserCreateWithoutOwnedSharesInput, UserUncheckedCreateWithoutOwnedSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedSharesInput
    upsert?: UserUpsertWithoutOwnedSharesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedSharesInput, UserUpdateWithoutOwnedSharesInput>, UserUncheckedUpdateWithoutOwnedSharesInput>
  }

  export type UserUpdateOneWithoutReceivedSharesNestedInput = {
    create?: XOR<UserCreateWithoutReceivedSharesInput, UserUncheckedCreateWithoutReceivedSharesInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedSharesInput
    upsert?: UserUpsertWithoutReceivedSharesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedSharesInput, UserUpdateWithoutReceivedSharesInput>, UserUncheckedUpdateWithoutReceivedSharesInput>
  }

  export type ShareItemUpdateOneRequiredWithoutSharesNestedInput = {
    create?: XOR<ShareItemCreateWithoutSharesInput, ShareItemUncheckedCreateWithoutSharesInput>
    connectOrCreate?: ShareItemCreateOrConnectWithoutSharesInput
    upsert?: ShareItemUpsertWithoutSharesInput
    connect?: ShareItemWhereUniqueInput
    update?: XOR<XOR<ShareItemUpdateToOneWithWhereWithoutSharesInput, ShareItemUpdateWithoutSharesInput>, ShareItemUncheckedUpdateWithoutSharesInput>
  }

  export type ShareChatUpdateManyWithoutShareNestedInput = {
    create?: XOR<ShareChatCreateWithoutShareInput, ShareChatUncheckedCreateWithoutShareInput> | ShareChatCreateWithoutShareInput[] | ShareChatUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareChatCreateOrConnectWithoutShareInput | ShareChatCreateOrConnectWithoutShareInput[]
    upsert?: ShareChatUpsertWithWhereUniqueWithoutShareInput | ShareChatUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ShareChatCreateManyShareInputEnvelope
    set?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
    disconnect?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
    delete?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
    connect?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
    update?: ShareChatUpdateWithWhereUniqueWithoutShareInput | ShareChatUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ShareChatUpdateManyWithWhereWithoutShareInput | ShareChatUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ShareChatScalarWhereInput | ShareChatScalarWhereInput[]
  }

  export type ShareImageUpdateManyWithoutShareNestedInput = {
    create?: XOR<ShareImageCreateWithoutShareInput, ShareImageUncheckedCreateWithoutShareInput> | ShareImageCreateWithoutShareInput[] | ShareImageUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareImageCreateOrConnectWithoutShareInput | ShareImageCreateOrConnectWithoutShareInput[]
    upsert?: ShareImageUpsertWithWhereUniqueWithoutShareInput | ShareImageUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ShareImageCreateManyShareInputEnvelope
    set?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
    disconnect?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
    delete?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
    connect?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
    update?: ShareImageUpdateWithWhereUniqueWithoutShareInput | ShareImageUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ShareImageUpdateManyWithWhereWithoutShareInput | ShareImageUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ShareImageScalarWhereInput | ShareImageScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutShareNestedInput = {
    create?: XOR<ReviewCreateWithoutShareInput, ReviewUncheckedCreateWithoutShareInput> | ReviewCreateWithoutShareInput[] | ReviewUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutShareInput | ReviewCreateOrConnectWithoutShareInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutShareInput | ReviewUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ReviewCreateManyShareInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutShareInput | ReviewUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutShareInput | ReviewUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type ShareChatUncheckedUpdateManyWithoutShareNestedInput = {
    create?: XOR<ShareChatCreateWithoutShareInput, ShareChatUncheckedCreateWithoutShareInput> | ShareChatCreateWithoutShareInput[] | ShareChatUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareChatCreateOrConnectWithoutShareInput | ShareChatCreateOrConnectWithoutShareInput[]
    upsert?: ShareChatUpsertWithWhereUniqueWithoutShareInput | ShareChatUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ShareChatCreateManyShareInputEnvelope
    set?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
    disconnect?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
    delete?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
    connect?: ShareChatWhereUniqueInput | ShareChatWhereUniqueInput[]
    update?: ShareChatUpdateWithWhereUniqueWithoutShareInput | ShareChatUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ShareChatUpdateManyWithWhereWithoutShareInput | ShareChatUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ShareChatScalarWhereInput | ShareChatScalarWhereInput[]
  }

  export type ShareImageUncheckedUpdateManyWithoutShareNestedInput = {
    create?: XOR<ShareImageCreateWithoutShareInput, ShareImageUncheckedCreateWithoutShareInput> | ShareImageCreateWithoutShareInput[] | ShareImageUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareImageCreateOrConnectWithoutShareInput | ShareImageCreateOrConnectWithoutShareInput[]
    upsert?: ShareImageUpsertWithWhereUniqueWithoutShareInput | ShareImageUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ShareImageCreateManyShareInputEnvelope
    set?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
    disconnect?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
    delete?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
    connect?: ShareImageWhereUniqueInput | ShareImageWhereUniqueInput[]
    update?: ShareImageUpdateWithWhereUniqueWithoutShareInput | ShareImageUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ShareImageUpdateManyWithWhereWithoutShareInput | ShareImageUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ShareImageScalarWhereInput | ShareImageScalarWhereInput[]
  }

  export type ShareCreateNestedOneWithoutImagesInput = {
    create?: XOR<ShareCreateWithoutImagesInput, ShareUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ShareCreateOrConnectWithoutImagesInput
    connect?: ShareWhereUniqueInput
  }

  export type ShareUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<ShareCreateWithoutImagesInput, ShareUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ShareCreateOrConnectWithoutImagesInput
    upsert?: ShareUpsertWithoutImagesInput
    connect?: ShareWhereUniqueInput
    update?: XOR<XOR<ShareUpdateToOneWithWhereWithoutImagesInput, ShareUpdateWithoutImagesInput>, ShareUncheckedUpdateWithoutImagesInput>
  }

  export type ShareCreateNestedManyWithoutShareItemInput = {
    create?: XOR<ShareCreateWithoutShareItemInput, ShareUncheckedCreateWithoutShareItemInput> | ShareCreateWithoutShareItemInput[] | ShareUncheckedCreateWithoutShareItemInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutShareItemInput | ShareCreateOrConnectWithoutShareItemInput[]
    createMany?: ShareCreateManyShareItemInputEnvelope
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
  }

  export type ShareUncheckedCreateNestedManyWithoutShareItemInput = {
    create?: XOR<ShareCreateWithoutShareItemInput, ShareUncheckedCreateWithoutShareItemInput> | ShareCreateWithoutShareItemInput[] | ShareUncheckedCreateWithoutShareItemInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutShareItemInput | ShareCreateOrConnectWithoutShareItemInput[]
    createMany?: ShareCreateManyShareItemInputEnvelope
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
  }

  export type ShareUpdateManyWithoutShareItemNestedInput = {
    create?: XOR<ShareCreateWithoutShareItemInput, ShareUncheckedCreateWithoutShareItemInput> | ShareCreateWithoutShareItemInput[] | ShareUncheckedCreateWithoutShareItemInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutShareItemInput | ShareCreateOrConnectWithoutShareItemInput[]
    upsert?: ShareUpsertWithWhereUniqueWithoutShareItemInput | ShareUpsertWithWhereUniqueWithoutShareItemInput[]
    createMany?: ShareCreateManyShareItemInputEnvelope
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    update?: ShareUpdateWithWhereUniqueWithoutShareItemInput | ShareUpdateWithWhereUniqueWithoutShareItemInput[]
    updateMany?: ShareUpdateManyWithWhereWithoutShareItemInput | ShareUpdateManyWithWhereWithoutShareItemInput[]
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[]
  }

  export type ShareUncheckedUpdateManyWithoutShareItemNestedInput = {
    create?: XOR<ShareCreateWithoutShareItemInput, ShareUncheckedCreateWithoutShareItemInput> | ShareCreateWithoutShareItemInput[] | ShareUncheckedCreateWithoutShareItemInput[]
    connectOrCreate?: ShareCreateOrConnectWithoutShareItemInput | ShareCreateOrConnectWithoutShareItemInput[]
    upsert?: ShareUpsertWithWhereUniqueWithoutShareItemInput | ShareUpsertWithWhereUniqueWithoutShareItemInput[]
    createMany?: ShareCreateManyShareItemInputEnvelope
    set?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    disconnect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    delete?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    connect?: ShareWhereUniqueInput | ShareWhereUniqueInput[]
    update?: ShareUpdateWithWhereUniqueWithoutShareItemInput | ShareUpdateWithWhereUniqueWithoutShareItemInput[]
    updateMany?: ShareUpdateManyWithWhereWithoutShareItemInput | ShareUpdateManyWithWhereWithoutShareItemInput[]
    deleteMany?: ShareScalarWhereInput | ShareScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutReceivedReviewsInput = {
    create?: XOR<UserCreateWithoutReceivedReviewsInput, UserUncheckedCreateWithoutReceivedReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type ShareCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ShareCreateWithoutReviewsInput, ShareUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ShareCreateOrConnectWithoutReviewsInput
    connect?: ShareWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutWrittenReviewsInput = {
    create?: XOR<UserCreateWithoutWrittenReviewsInput, UserUncheckedCreateWithoutWrittenReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWrittenReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type ReviewShortReviewCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReviewShortReviewCreateWithoutReviewInput, ReviewShortReviewUncheckedCreateWithoutReviewInput> | ReviewShortReviewCreateWithoutReviewInput[] | ReviewShortReviewUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewShortReviewCreateOrConnectWithoutReviewInput | ReviewShortReviewCreateOrConnectWithoutReviewInput[]
    createMany?: ReviewShortReviewCreateManyReviewInputEnvelope
    connect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
  }

  export type ReviewShortReviewUncheckedCreateNestedManyWithoutReviewInput = {
    create?: XOR<ReviewShortReviewCreateWithoutReviewInput, ReviewShortReviewUncheckedCreateWithoutReviewInput> | ReviewShortReviewCreateWithoutReviewInput[] | ReviewShortReviewUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewShortReviewCreateOrConnectWithoutReviewInput | ReviewShortReviewCreateOrConnectWithoutReviewInput[]
    createMany?: ReviewShortReviewCreateManyReviewInputEnvelope
    connect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutReceivedReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedReviewsInput, UserUncheckedCreateWithoutReceivedReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedReviewsInput
    upsert?: UserUpsertWithoutReceivedReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedReviewsInput, UserUpdateWithoutReceivedReviewsInput>, UserUncheckedUpdateWithoutReceivedReviewsInput>
  }

  export type ShareUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ShareCreateWithoutReviewsInput, ShareUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ShareCreateOrConnectWithoutReviewsInput
    upsert?: ShareUpsertWithoutReviewsInput
    connect?: ShareWhereUniqueInput
    update?: XOR<XOR<ShareUpdateToOneWithWhereWithoutReviewsInput, ShareUpdateWithoutReviewsInput>, ShareUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateOneRequiredWithoutWrittenReviewsNestedInput = {
    create?: XOR<UserCreateWithoutWrittenReviewsInput, UserUncheckedCreateWithoutWrittenReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWrittenReviewsInput
    upsert?: UserUpsertWithoutWrittenReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWrittenReviewsInput, UserUpdateWithoutWrittenReviewsInput>, UserUncheckedUpdateWithoutWrittenReviewsInput>
  }

  export type ReviewShortReviewUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReviewShortReviewCreateWithoutReviewInput, ReviewShortReviewUncheckedCreateWithoutReviewInput> | ReviewShortReviewCreateWithoutReviewInput[] | ReviewShortReviewUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewShortReviewCreateOrConnectWithoutReviewInput | ReviewShortReviewCreateOrConnectWithoutReviewInput[]
    upsert?: ReviewShortReviewUpsertWithWhereUniqueWithoutReviewInput | ReviewShortReviewUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReviewShortReviewCreateManyReviewInputEnvelope
    set?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    disconnect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    delete?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    connect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    update?: ReviewShortReviewUpdateWithWhereUniqueWithoutReviewInput | ReviewShortReviewUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReviewShortReviewUpdateManyWithWhereWithoutReviewInput | ReviewShortReviewUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReviewShortReviewScalarWhereInput | ReviewShortReviewScalarWhereInput[]
  }

  export type ReviewShortReviewUncheckedUpdateManyWithoutReviewNestedInput = {
    create?: XOR<ReviewShortReviewCreateWithoutReviewInput, ReviewShortReviewUncheckedCreateWithoutReviewInput> | ReviewShortReviewCreateWithoutReviewInput[] | ReviewShortReviewUncheckedCreateWithoutReviewInput[]
    connectOrCreate?: ReviewShortReviewCreateOrConnectWithoutReviewInput | ReviewShortReviewCreateOrConnectWithoutReviewInput[]
    upsert?: ReviewShortReviewUpsertWithWhereUniqueWithoutReviewInput | ReviewShortReviewUpsertWithWhereUniqueWithoutReviewInput[]
    createMany?: ReviewShortReviewCreateManyReviewInputEnvelope
    set?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    disconnect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    delete?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    connect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    update?: ReviewShortReviewUpdateWithWhereUniqueWithoutReviewInput | ReviewShortReviewUpdateWithWhereUniqueWithoutReviewInput[]
    updateMany?: ReviewShortReviewUpdateManyWithWhereWithoutReviewInput | ReviewShortReviewUpdateManyWithWhereWithoutReviewInput[]
    deleteMany?: ReviewShortReviewScalarWhereInput | ReviewShortReviewScalarWhereInput[]
  }

  export type ReviewCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ReviewCreateWithoutReviewsInput, ReviewUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewsInput
    connect?: ReviewWhereUniqueInput
  }

  export type ShortReviewOptionCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ShortReviewOptionCreateWithoutReviewsInput, ShortReviewOptionUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ShortReviewOptionCreateOrConnectWithoutReviewsInput
    connect?: ShortReviewOptionWhereUniqueInput
  }

  export type ReviewUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ReviewCreateWithoutReviewsInput, ReviewUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ReviewCreateOrConnectWithoutReviewsInput
    upsert?: ReviewUpsertWithoutReviewsInput
    connect?: ReviewWhereUniqueInput
    update?: XOR<XOR<ReviewUpdateToOneWithWhereWithoutReviewsInput, ReviewUpdateWithoutReviewsInput>, ReviewUncheckedUpdateWithoutReviewsInput>
  }

  export type ShortReviewOptionUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ShortReviewOptionCreateWithoutReviewsInput, ShortReviewOptionUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ShortReviewOptionCreateOrConnectWithoutReviewsInput
    upsert?: ShortReviewOptionUpsertWithoutReviewsInput
    connect?: ShortReviewOptionWhereUniqueInput
    update?: XOR<XOR<ShortReviewOptionUpdateToOneWithWhereWithoutReviewsInput, ShortReviewOptionUpdateWithoutReviewsInput>, ShortReviewOptionUncheckedUpdateWithoutReviewsInput>
  }

  export type ReviewShortReviewCreateNestedManyWithoutShortReviewOptionInput = {
    create?: XOR<ReviewShortReviewCreateWithoutShortReviewOptionInput, ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput> | ReviewShortReviewCreateWithoutShortReviewOptionInput[] | ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput[]
    connectOrCreate?: ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput | ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput[]
    createMany?: ReviewShortReviewCreateManyShortReviewOptionInputEnvelope
    connect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
  }

  export type ReviewShortReviewUncheckedCreateNestedManyWithoutShortReviewOptionInput = {
    create?: XOR<ReviewShortReviewCreateWithoutShortReviewOptionInput, ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput> | ReviewShortReviewCreateWithoutShortReviewOptionInput[] | ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput[]
    connectOrCreate?: ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput | ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput[]
    createMany?: ReviewShortReviewCreateManyShortReviewOptionInputEnvelope
    connect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
  }

  export type ReviewShortReviewUpdateManyWithoutShortReviewOptionNestedInput = {
    create?: XOR<ReviewShortReviewCreateWithoutShortReviewOptionInput, ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput> | ReviewShortReviewCreateWithoutShortReviewOptionInput[] | ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput[]
    connectOrCreate?: ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput | ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput[]
    upsert?: ReviewShortReviewUpsertWithWhereUniqueWithoutShortReviewOptionInput | ReviewShortReviewUpsertWithWhereUniqueWithoutShortReviewOptionInput[]
    createMany?: ReviewShortReviewCreateManyShortReviewOptionInputEnvelope
    set?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    disconnect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    delete?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    connect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    update?: ReviewShortReviewUpdateWithWhereUniqueWithoutShortReviewOptionInput | ReviewShortReviewUpdateWithWhereUniqueWithoutShortReviewOptionInput[]
    updateMany?: ReviewShortReviewUpdateManyWithWhereWithoutShortReviewOptionInput | ReviewShortReviewUpdateManyWithWhereWithoutShortReviewOptionInput[]
    deleteMany?: ReviewShortReviewScalarWhereInput | ReviewShortReviewScalarWhereInput[]
  }

  export type ReviewShortReviewUncheckedUpdateManyWithoutShortReviewOptionNestedInput = {
    create?: XOR<ReviewShortReviewCreateWithoutShortReviewOptionInput, ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput> | ReviewShortReviewCreateWithoutShortReviewOptionInput[] | ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput[]
    connectOrCreate?: ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput | ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput[]
    upsert?: ReviewShortReviewUpsertWithWhereUniqueWithoutShortReviewOptionInput | ReviewShortReviewUpsertWithWhereUniqueWithoutShortReviewOptionInput[]
    createMany?: ReviewShortReviewCreateManyShortReviewOptionInputEnvelope
    set?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    disconnect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    delete?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    connect?: ReviewShortReviewWhereUniqueInput | ReviewShortReviewWhereUniqueInput[]
    update?: ReviewShortReviewUpdateWithWhereUniqueWithoutShortReviewOptionInput | ReviewShortReviewUpdateWithWhereUniqueWithoutShortReviewOptionInput[]
    updateMany?: ReviewShortReviewUpdateManyWithWhereWithoutShortReviewOptionInput | ReviewShortReviewUpdateManyWithWhereWithoutShortReviewOptionInput[]
    deleteMany?: ReviewShortReviewScalarWhereInput | ReviewShortReviewScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type GroupBuyCreateNestedOneWithoutChatsInput = {
    create?: XOR<GroupBuyCreateWithoutChatsInput, GroupBuyUncheckedCreateWithoutChatsInput>
    connectOrCreate?: GroupBuyCreateOrConnectWithoutChatsInput
    connect?: GroupBuyWhereUniqueInput
  }

  export type GroupBuyChatMessageCreateNestedManyWithoutGroupBuyChatInput = {
    create?: XOR<GroupBuyChatMessageCreateWithoutGroupBuyChatInput, GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput> | GroupBuyChatMessageCreateWithoutGroupBuyChatInput[] | GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput[]
    connectOrCreate?: GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput | GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput[]
    createMany?: GroupBuyChatMessageCreateManyGroupBuyChatInputEnvelope
    connect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
  }

  export type GroupBuyChatParticipantCreateNestedManyWithoutGroupBuyChatInput = {
    create?: XOR<GroupBuyChatParticipantCreateWithoutGroupBuyChatInput, GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput> | GroupBuyChatParticipantCreateWithoutGroupBuyChatInput[] | GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput[]
    connectOrCreate?: GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput | GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput[]
    createMany?: GroupBuyChatParticipantCreateManyGroupBuyChatInputEnvelope
    connect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
  }

  export type GroupBuyChatMessageUncheckedCreateNestedManyWithoutGroupBuyChatInput = {
    create?: XOR<GroupBuyChatMessageCreateWithoutGroupBuyChatInput, GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput> | GroupBuyChatMessageCreateWithoutGroupBuyChatInput[] | GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput[]
    connectOrCreate?: GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput | GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput[]
    createMany?: GroupBuyChatMessageCreateManyGroupBuyChatInputEnvelope
    connect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
  }

  export type GroupBuyChatParticipantUncheckedCreateNestedManyWithoutGroupBuyChatInput = {
    create?: XOR<GroupBuyChatParticipantCreateWithoutGroupBuyChatInput, GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput> | GroupBuyChatParticipantCreateWithoutGroupBuyChatInput[] | GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput[]
    connectOrCreate?: GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput | GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput[]
    createMany?: GroupBuyChatParticipantCreateManyGroupBuyChatInputEnvelope
    connect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
  }

  export type GroupBuyUpdateOneRequiredWithoutChatsNestedInput = {
    create?: XOR<GroupBuyCreateWithoutChatsInput, GroupBuyUncheckedCreateWithoutChatsInput>
    connectOrCreate?: GroupBuyCreateOrConnectWithoutChatsInput
    upsert?: GroupBuyUpsertWithoutChatsInput
    connect?: GroupBuyWhereUniqueInput
    update?: XOR<XOR<GroupBuyUpdateToOneWithWhereWithoutChatsInput, GroupBuyUpdateWithoutChatsInput>, GroupBuyUncheckedUpdateWithoutChatsInput>
  }

  export type GroupBuyChatMessageUpdateManyWithoutGroupBuyChatNestedInput = {
    create?: XOR<GroupBuyChatMessageCreateWithoutGroupBuyChatInput, GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput> | GroupBuyChatMessageCreateWithoutGroupBuyChatInput[] | GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput[]
    connectOrCreate?: GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput | GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput[]
    upsert?: GroupBuyChatMessageUpsertWithWhereUniqueWithoutGroupBuyChatInput | GroupBuyChatMessageUpsertWithWhereUniqueWithoutGroupBuyChatInput[]
    createMany?: GroupBuyChatMessageCreateManyGroupBuyChatInputEnvelope
    set?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    disconnect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    delete?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    connect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    update?: GroupBuyChatMessageUpdateWithWhereUniqueWithoutGroupBuyChatInput | GroupBuyChatMessageUpdateWithWhereUniqueWithoutGroupBuyChatInput[]
    updateMany?: GroupBuyChatMessageUpdateManyWithWhereWithoutGroupBuyChatInput | GroupBuyChatMessageUpdateManyWithWhereWithoutGroupBuyChatInput[]
    deleteMany?: GroupBuyChatMessageScalarWhereInput | GroupBuyChatMessageScalarWhereInput[]
  }

  export type GroupBuyChatParticipantUpdateManyWithoutGroupBuyChatNestedInput = {
    create?: XOR<GroupBuyChatParticipantCreateWithoutGroupBuyChatInput, GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput> | GroupBuyChatParticipantCreateWithoutGroupBuyChatInput[] | GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput[]
    connectOrCreate?: GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput | GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput[]
    upsert?: GroupBuyChatParticipantUpsertWithWhereUniqueWithoutGroupBuyChatInput | GroupBuyChatParticipantUpsertWithWhereUniqueWithoutGroupBuyChatInput[]
    createMany?: GroupBuyChatParticipantCreateManyGroupBuyChatInputEnvelope
    set?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    disconnect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    delete?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    connect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    update?: GroupBuyChatParticipantUpdateWithWhereUniqueWithoutGroupBuyChatInput | GroupBuyChatParticipantUpdateWithWhereUniqueWithoutGroupBuyChatInput[]
    updateMany?: GroupBuyChatParticipantUpdateManyWithWhereWithoutGroupBuyChatInput | GroupBuyChatParticipantUpdateManyWithWhereWithoutGroupBuyChatInput[]
    deleteMany?: GroupBuyChatParticipantScalarWhereInput | GroupBuyChatParticipantScalarWhereInput[]
  }

  export type GroupBuyChatMessageUncheckedUpdateManyWithoutGroupBuyChatNestedInput = {
    create?: XOR<GroupBuyChatMessageCreateWithoutGroupBuyChatInput, GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput> | GroupBuyChatMessageCreateWithoutGroupBuyChatInput[] | GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput[]
    connectOrCreate?: GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput | GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput[]
    upsert?: GroupBuyChatMessageUpsertWithWhereUniqueWithoutGroupBuyChatInput | GroupBuyChatMessageUpsertWithWhereUniqueWithoutGroupBuyChatInput[]
    createMany?: GroupBuyChatMessageCreateManyGroupBuyChatInputEnvelope
    set?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    disconnect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    delete?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    connect?: GroupBuyChatMessageWhereUniqueInput | GroupBuyChatMessageWhereUniqueInput[]
    update?: GroupBuyChatMessageUpdateWithWhereUniqueWithoutGroupBuyChatInput | GroupBuyChatMessageUpdateWithWhereUniqueWithoutGroupBuyChatInput[]
    updateMany?: GroupBuyChatMessageUpdateManyWithWhereWithoutGroupBuyChatInput | GroupBuyChatMessageUpdateManyWithWhereWithoutGroupBuyChatInput[]
    deleteMany?: GroupBuyChatMessageScalarWhereInput | GroupBuyChatMessageScalarWhereInput[]
  }

  export type GroupBuyChatParticipantUncheckedUpdateManyWithoutGroupBuyChatNestedInput = {
    create?: XOR<GroupBuyChatParticipantCreateWithoutGroupBuyChatInput, GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput> | GroupBuyChatParticipantCreateWithoutGroupBuyChatInput[] | GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput[]
    connectOrCreate?: GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput | GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput[]
    upsert?: GroupBuyChatParticipantUpsertWithWhereUniqueWithoutGroupBuyChatInput | GroupBuyChatParticipantUpsertWithWhereUniqueWithoutGroupBuyChatInput[]
    createMany?: GroupBuyChatParticipantCreateManyGroupBuyChatInputEnvelope
    set?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    disconnect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    delete?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    connect?: GroupBuyChatParticipantWhereUniqueInput | GroupBuyChatParticipantWhereUniqueInput[]
    update?: GroupBuyChatParticipantUpdateWithWhereUniqueWithoutGroupBuyChatInput | GroupBuyChatParticipantUpdateWithWhereUniqueWithoutGroupBuyChatInput[]
    updateMany?: GroupBuyChatParticipantUpdateManyWithWhereWithoutGroupBuyChatInput | GroupBuyChatParticipantUpdateManyWithWhereWithoutGroupBuyChatInput[]
    deleteMany?: GroupBuyChatParticipantScalarWhereInput | GroupBuyChatParticipantScalarWhereInput[]
  }

  export type GroupBuyChatCreateNestedOneWithoutMessagesInput = {
    create?: XOR<GroupBuyChatCreateWithoutMessagesInput, GroupBuyChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: GroupBuyChatCreateOrConnectWithoutMessagesInput
    connect?: GroupBuyChatWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGroupBuyChatMessagesInput = {
    create?: XOR<UserCreateWithoutGroupBuyChatMessagesInput, UserUncheckedCreateWithoutGroupBuyChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupBuyChatMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type GroupBuyChatUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<GroupBuyChatCreateWithoutMessagesInput, GroupBuyChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: GroupBuyChatCreateOrConnectWithoutMessagesInput
    upsert?: GroupBuyChatUpsertWithoutMessagesInput
    connect?: GroupBuyChatWhereUniqueInput
    update?: XOR<XOR<GroupBuyChatUpdateToOneWithWhereWithoutMessagesInput, GroupBuyChatUpdateWithoutMessagesInput>, GroupBuyChatUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutGroupBuyChatMessagesNestedInput = {
    create?: XOR<UserCreateWithoutGroupBuyChatMessagesInput, UserUncheckedCreateWithoutGroupBuyChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupBuyChatMessagesInput
    upsert?: UserUpsertWithoutGroupBuyChatMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGroupBuyChatMessagesInput, UserUpdateWithoutGroupBuyChatMessagesInput>, UserUncheckedUpdateWithoutGroupBuyChatMessagesInput>
  }

  export type GroupBuyChatCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<GroupBuyChatCreateWithoutParticipantsInput, GroupBuyChatUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: GroupBuyChatCreateOrConnectWithoutParticipantsInput
    connect?: GroupBuyChatWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGroupBuyChatParticipantsInput = {
    create?: XOR<UserCreateWithoutGroupBuyChatParticipantsInput, UserUncheckedCreateWithoutGroupBuyChatParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupBuyChatParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GroupBuyChatUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<GroupBuyChatCreateWithoutParticipantsInput, GroupBuyChatUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: GroupBuyChatCreateOrConnectWithoutParticipantsInput
    upsert?: GroupBuyChatUpsertWithoutParticipantsInput
    connect?: GroupBuyChatWhereUniqueInput
    update?: XOR<XOR<GroupBuyChatUpdateToOneWithWhereWithoutParticipantsInput, GroupBuyChatUpdateWithoutParticipantsInput>, GroupBuyChatUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutGroupBuyChatParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutGroupBuyChatParticipantsInput, UserUncheckedCreateWithoutGroupBuyChatParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGroupBuyChatParticipantsInput
    upsert?: UserUpsertWithoutGroupBuyChatParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGroupBuyChatParticipantsInput, UserUpdateWithoutGroupBuyChatParticipantsInput>, UserUncheckedUpdateWithoutGroupBuyChatParticipantsInput>
  }

  export type ShareCreateNestedOneWithoutChatsInput = {
    create?: XOR<ShareCreateWithoutChatsInput, ShareUncheckedCreateWithoutChatsInput>
    connectOrCreate?: ShareCreateOrConnectWithoutChatsInput
    connect?: ShareWhereUniqueInput
  }

  export type ShareChatMessageCreateNestedManyWithoutShareChatInput = {
    create?: XOR<ShareChatMessageCreateWithoutShareChatInput, ShareChatMessageUncheckedCreateWithoutShareChatInput> | ShareChatMessageCreateWithoutShareChatInput[] | ShareChatMessageUncheckedCreateWithoutShareChatInput[]
    connectOrCreate?: ShareChatMessageCreateOrConnectWithoutShareChatInput | ShareChatMessageCreateOrConnectWithoutShareChatInput[]
    createMany?: ShareChatMessageCreateManyShareChatInputEnvelope
    connect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
  }

  export type ShareChatParticipantCreateNestedManyWithoutShareChatInput = {
    create?: XOR<ShareChatParticipantCreateWithoutShareChatInput, ShareChatParticipantUncheckedCreateWithoutShareChatInput> | ShareChatParticipantCreateWithoutShareChatInput[] | ShareChatParticipantUncheckedCreateWithoutShareChatInput[]
    connectOrCreate?: ShareChatParticipantCreateOrConnectWithoutShareChatInput | ShareChatParticipantCreateOrConnectWithoutShareChatInput[]
    createMany?: ShareChatParticipantCreateManyShareChatInputEnvelope
    connect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
  }

  export type ShareChatMessageUncheckedCreateNestedManyWithoutShareChatInput = {
    create?: XOR<ShareChatMessageCreateWithoutShareChatInput, ShareChatMessageUncheckedCreateWithoutShareChatInput> | ShareChatMessageCreateWithoutShareChatInput[] | ShareChatMessageUncheckedCreateWithoutShareChatInput[]
    connectOrCreate?: ShareChatMessageCreateOrConnectWithoutShareChatInput | ShareChatMessageCreateOrConnectWithoutShareChatInput[]
    createMany?: ShareChatMessageCreateManyShareChatInputEnvelope
    connect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
  }

  export type ShareChatParticipantUncheckedCreateNestedManyWithoutShareChatInput = {
    create?: XOR<ShareChatParticipantCreateWithoutShareChatInput, ShareChatParticipantUncheckedCreateWithoutShareChatInput> | ShareChatParticipantCreateWithoutShareChatInput[] | ShareChatParticipantUncheckedCreateWithoutShareChatInput[]
    connectOrCreate?: ShareChatParticipantCreateOrConnectWithoutShareChatInput | ShareChatParticipantCreateOrConnectWithoutShareChatInput[]
    createMany?: ShareChatParticipantCreateManyShareChatInputEnvelope
    connect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
  }

  export type ShareUpdateOneRequiredWithoutChatsNestedInput = {
    create?: XOR<ShareCreateWithoutChatsInput, ShareUncheckedCreateWithoutChatsInput>
    connectOrCreate?: ShareCreateOrConnectWithoutChatsInput
    upsert?: ShareUpsertWithoutChatsInput
    connect?: ShareWhereUniqueInput
    update?: XOR<XOR<ShareUpdateToOneWithWhereWithoutChatsInput, ShareUpdateWithoutChatsInput>, ShareUncheckedUpdateWithoutChatsInput>
  }

  export type ShareChatMessageUpdateManyWithoutShareChatNestedInput = {
    create?: XOR<ShareChatMessageCreateWithoutShareChatInput, ShareChatMessageUncheckedCreateWithoutShareChatInput> | ShareChatMessageCreateWithoutShareChatInput[] | ShareChatMessageUncheckedCreateWithoutShareChatInput[]
    connectOrCreate?: ShareChatMessageCreateOrConnectWithoutShareChatInput | ShareChatMessageCreateOrConnectWithoutShareChatInput[]
    upsert?: ShareChatMessageUpsertWithWhereUniqueWithoutShareChatInput | ShareChatMessageUpsertWithWhereUniqueWithoutShareChatInput[]
    createMany?: ShareChatMessageCreateManyShareChatInputEnvelope
    set?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    disconnect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    delete?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    connect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    update?: ShareChatMessageUpdateWithWhereUniqueWithoutShareChatInput | ShareChatMessageUpdateWithWhereUniqueWithoutShareChatInput[]
    updateMany?: ShareChatMessageUpdateManyWithWhereWithoutShareChatInput | ShareChatMessageUpdateManyWithWhereWithoutShareChatInput[]
    deleteMany?: ShareChatMessageScalarWhereInput | ShareChatMessageScalarWhereInput[]
  }

  export type ShareChatParticipantUpdateManyWithoutShareChatNestedInput = {
    create?: XOR<ShareChatParticipantCreateWithoutShareChatInput, ShareChatParticipantUncheckedCreateWithoutShareChatInput> | ShareChatParticipantCreateWithoutShareChatInput[] | ShareChatParticipantUncheckedCreateWithoutShareChatInput[]
    connectOrCreate?: ShareChatParticipantCreateOrConnectWithoutShareChatInput | ShareChatParticipantCreateOrConnectWithoutShareChatInput[]
    upsert?: ShareChatParticipantUpsertWithWhereUniqueWithoutShareChatInput | ShareChatParticipantUpsertWithWhereUniqueWithoutShareChatInput[]
    createMany?: ShareChatParticipantCreateManyShareChatInputEnvelope
    set?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    disconnect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    delete?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    connect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    update?: ShareChatParticipantUpdateWithWhereUniqueWithoutShareChatInput | ShareChatParticipantUpdateWithWhereUniqueWithoutShareChatInput[]
    updateMany?: ShareChatParticipantUpdateManyWithWhereWithoutShareChatInput | ShareChatParticipantUpdateManyWithWhereWithoutShareChatInput[]
    deleteMany?: ShareChatParticipantScalarWhereInput | ShareChatParticipantScalarWhereInput[]
  }

  export type ShareChatMessageUncheckedUpdateManyWithoutShareChatNestedInput = {
    create?: XOR<ShareChatMessageCreateWithoutShareChatInput, ShareChatMessageUncheckedCreateWithoutShareChatInput> | ShareChatMessageCreateWithoutShareChatInput[] | ShareChatMessageUncheckedCreateWithoutShareChatInput[]
    connectOrCreate?: ShareChatMessageCreateOrConnectWithoutShareChatInput | ShareChatMessageCreateOrConnectWithoutShareChatInput[]
    upsert?: ShareChatMessageUpsertWithWhereUniqueWithoutShareChatInput | ShareChatMessageUpsertWithWhereUniqueWithoutShareChatInput[]
    createMany?: ShareChatMessageCreateManyShareChatInputEnvelope
    set?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    disconnect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    delete?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    connect?: ShareChatMessageWhereUniqueInput | ShareChatMessageWhereUniqueInput[]
    update?: ShareChatMessageUpdateWithWhereUniqueWithoutShareChatInput | ShareChatMessageUpdateWithWhereUniqueWithoutShareChatInput[]
    updateMany?: ShareChatMessageUpdateManyWithWhereWithoutShareChatInput | ShareChatMessageUpdateManyWithWhereWithoutShareChatInput[]
    deleteMany?: ShareChatMessageScalarWhereInput | ShareChatMessageScalarWhereInput[]
  }

  export type ShareChatParticipantUncheckedUpdateManyWithoutShareChatNestedInput = {
    create?: XOR<ShareChatParticipantCreateWithoutShareChatInput, ShareChatParticipantUncheckedCreateWithoutShareChatInput> | ShareChatParticipantCreateWithoutShareChatInput[] | ShareChatParticipantUncheckedCreateWithoutShareChatInput[]
    connectOrCreate?: ShareChatParticipantCreateOrConnectWithoutShareChatInput | ShareChatParticipantCreateOrConnectWithoutShareChatInput[]
    upsert?: ShareChatParticipantUpsertWithWhereUniqueWithoutShareChatInput | ShareChatParticipantUpsertWithWhereUniqueWithoutShareChatInput[]
    createMany?: ShareChatParticipantCreateManyShareChatInputEnvelope
    set?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    disconnect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    delete?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    connect?: ShareChatParticipantWhereUniqueInput | ShareChatParticipantWhereUniqueInput[]
    update?: ShareChatParticipantUpdateWithWhereUniqueWithoutShareChatInput | ShareChatParticipantUpdateWithWhereUniqueWithoutShareChatInput[]
    updateMany?: ShareChatParticipantUpdateManyWithWhereWithoutShareChatInput | ShareChatParticipantUpdateManyWithWhereWithoutShareChatInput[]
    deleteMany?: ShareChatParticipantScalarWhereInput | ShareChatParticipantScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutShareChatMessagesInput = {
    create?: XOR<UserCreateWithoutShareChatMessagesInput, UserUncheckedCreateWithoutShareChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutShareChatMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ShareChatCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ShareChatCreateWithoutMessagesInput, ShareChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ShareChatCreateOrConnectWithoutMessagesInput
    connect?: ShareChatWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutShareChatMessagesNestedInput = {
    create?: XOR<UserCreateWithoutShareChatMessagesInput, UserUncheckedCreateWithoutShareChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutShareChatMessagesInput
    upsert?: UserUpsertWithoutShareChatMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShareChatMessagesInput, UserUpdateWithoutShareChatMessagesInput>, UserUncheckedUpdateWithoutShareChatMessagesInput>
  }

  export type ShareChatUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ShareChatCreateWithoutMessagesInput, ShareChatUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ShareChatCreateOrConnectWithoutMessagesInput
    upsert?: ShareChatUpsertWithoutMessagesInput
    connect?: ShareChatWhereUniqueInput
    update?: XOR<XOR<ShareChatUpdateToOneWithWhereWithoutMessagesInput, ShareChatUpdateWithoutMessagesInput>, ShareChatUncheckedUpdateWithoutMessagesInput>
  }

  export type ShareChatCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<ShareChatCreateWithoutParticipantsInput, ShareChatUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ShareChatCreateOrConnectWithoutParticipantsInput
    connect?: ShareChatWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutShareChatParticipantsInput = {
    create?: XOR<UserCreateWithoutShareChatParticipantsInput, UserUncheckedCreateWithoutShareChatParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShareChatParticipantsInput
    connect?: UserWhereUniqueInput
  }

  export type ShareChatUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<ShareChatCreateWithoutParticipantsInput, ShareChatUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ShareChatCreateOrConnectWithoutParticipantsInput
    upsert?: ShareChatUpsertWithoutParticipantsInput
    connect?: ShareChatWhereUniqueInput
    update?: XOR<XOR<ShareChatUpdateToOneWithWhereWithoutParticipantsInput, ShareChatUpdateWithoutParticipantsInput>, ShareChatUncheckedUpdateWithoutParticipantsInput>
  }

  export type UserUpdateOneRequiredWithoutShareChatParticipantsNestedInput = {
    create?: XOR<UserCreateWithoutShareChatParticipantsInput, UserUncheckedCreateWithoutShareChatParticipantsInput>
    connectOrCreate?: UserCreateOrConnectWithoutShareChatParticipantsInput
    upsert?: UserUpsertWithoutShareChatParticipantsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutShareChatParticipantsInput, UserUpdateWithoutShareChatParticipantsInput>, UserUncheckedUpdateWithoutShareChatParticipantsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type GroupBuyCreateWithoutNeighborhoodInput = {
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    organizer: UserCreateNestedOneWithoutGrouBuysInput
    chats?: GroupBuyChatCreateNestedManyWithoutGroupBuyInput
    images?: GroupBuyImageCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyUncheckedCreateWithoutNeighborhoodInput = {
    id?: number
    organizerId: string
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    chats?: GroupBuyChatUncheckedCreateNestedManyWithoutGroupBuyInput
    images?: GroupBuyImageUncheckedCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyCreateOrConnectWithoutNeighborhoodInput = {
    where: GroupBuyWhereUniqueInput
    create: XOR<GroupBuyCreateWithoutNeighborhoodInput, GroupBuyUncheckedCreateWithoutNeighborhoodInput>
  }

  export type GroupBuyCreateManyNeighborhoodInputEnvelope = {
    data: GroupBuyCreateManyNeighborhoodInput | GroupBuyCreateManyNeighborhoodInput[]
    skipDuplicates?: boolean
  }

  export type ShareCreateWithoutNeighborhoodInput = {
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewCreateNestedManyWithoutShareInput
    owner: UserCreateNestedOneWithoutOwnedSharesInput
    recipient?: UserCreateNestedOneWithoutReceivedSharesInput
    shareItem: ShareItemCreateNestedOneWithoutSharesInput
    chats?: ShareChatCreateNestedManyWithoutShareInput
    images?: ShareImageCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutNeighborhoodInput = {
    id?: number
    shareItemId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutShareInput
    chats?: ShareChatUncheckedCreateNestedManyWithoutShareInput
    images?: ShareImageUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareCreateOrConnectWithoutNeighborhoodInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutNeighborhoodInput, ShareUncheckedCreateWithoutNeighborhoodInput>
  }

  export type ShareCreateManyNeighborhoodInputEnvelope = {
    data: ShareCreateManyNeighborhoodInput | ShareCreateManyNeighborhoodInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutNeighborhoodInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNeighborhoodInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNeighborhoodInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNeighborhoodInput, UserUncheckedCreateWithoutNeighborhoodInput>
  }

  export type UserCreateManyNeighborhoodInputEnvelope = {
    data: UserCreateManyNeighborhoodInput | UserCreateManyNeighborhoodInput[]
    skipDuplicates?: boolean
  }

  export type GroupBuyUpsertWithWhereUniqueWithoutNeighborhoodInput = {
    where: GroupBuyWhereUniqueInput
    update: XOR<GroupBuyUpdateWithoutNeighborhoodInput, GroupBuyUncheckedUpdateWithoutNeighborhoodInput>
    create: XOR<GroupBuyCreateWithoutNeighborhoodInput, GroupBuyUncheckedCreateWithoutNeighborhoodInput>
  }

  export type GroupBuyUpdateWithWhereUniqueWithoutNeighborhoodInput = {
    where: GroupBuyWhereUniqueInput
    data: XOR<GroupBuyUpdateWithoutNeighborhoodInput, GroupBuyUncheckedUpdateWithoutNeighborhoodInput>
  }

  export type GroupBuyUpdateManyWithWhereWithoutNeighborhoodInput = {
    where: GroupBuyScalarWhereInput
    data: XOR<GroupBuyUpdateManyMutationInput, GroupBuyUncheckedUpdateManyWithoutNeighborhoodInput>
  }

  export type GroupBuyScalarWhereInput = {
    AND?: GroupBuyScalarWhereInput | GroupBuyScalarWhereInput[]
    OR?: GroupBuyScalarWhereInput[]
    NOT?: GroupBuyScalarWhereInput | GroupBuyScalarWhereInput[]
    id?: IntFilter<"GroupBuy"> | number
    organizerId?: StringFilter<"GroupBuy"> | string
    neighborhoodId?: IntFilter<"GroupBuy"> | number
    title?: StringFilter<"GroupBuy"> | string
    capacity?: IntFilter<"GroupBuy"> | number
    desiredItem?: StringFilter<"GroupBuy"> | string
    meetingDate?: DateTimeFilter<"GroupBuy"> | Date | string
    createdAt?: DateTimeFilter<"GroupBuy"> | Date | string
    locationAddress?: StringFilter<"GroupBuy"> | string
    locationNote?: StringFilter<"GroupBuy"> | string
    description?: StringFilter<"GroupBuy"> | string
    status?: IntFilter<"GroupBuy"> | number
  }

  export type ShareUpsertWithWhereUniqueWithoutNeighborhoodInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutNeighborhoodInput, ShareUncheckedUpdateWithoutNeighborhoodInput>
    create: XOR<ShareCreateWithoutNeighborhoodInput, ShareUncheckedCreateWithoutNeighborhoodInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutNeighborhoodInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutNeighborhoodInput, ShareUncheckedUpdateWithoutNeighborhoodInput>
  }

  export type ShareUpdateManyWithWhereWithoutNeighborhoodInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutNeighborhoodInput>
  }

  export type ShareScalarWhereInput = {
    AND?: ShareScalarWhereInput | ShareScalarWhereInput[]
    OR?: ShareScalarWhereInput[]
    NOT?: ShareScalarWhereInput | ShareScalarWhereInput[]
    id?: IntFilter<"Share"> | number
    shareItemId?: IntFilter<"Share"> | number
    neighborhoodId?: IntFilter<"Share"> | number
    ownerId?: StringFilter<"Share"> | string
    recipientId?: StringNullableFilter<"Share"> | string | null
    title?: StringFilter<"Share"> | string
    createdAt?: DateTimeFilter<"Share"> | Date | string
    meetingDate?: DateTimeNullableFilter<"Share"> | Date | string | null
    lat?: FloatFilter<"Share"> | number
    lng?: FloatFilter<"Share"> | number
    locationAddress?: StringFilter<"Share"> | string
    locationNote?: StringFilter<"Share"> | string
    description?: StringFilter<"Share"> | string
    status?: IntFilter<"Share"> | number
  }

  export type UserUpsertWithWhereUniqueWithoutNeighborhoodInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutNeighborhoodInput, UserUncheckedUpdateWithoutNeighborhoodInput>
    create: XOR<UserCreateWithoutNeighborhoodInput, UserUncheckedCreateWithoutNeighborhoodInput>
  }

  export type UserUpdateWithWhereUniqueWithoutNeighborhoodInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutNeighborhoodInput, UserUncheckedUpdateWithoutNeighborhoodInput>
  }

  export type UserUpdateManyWithWhereWithoutNeighborhoodInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutNeighborhoodInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    neighborhoodId?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    nickname?: StringFilter<"User"> | string
    profileUrl?: StringNullableFilter<"User"> | string | null
    address?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    shareScore?: IntFilter<"User"> | number
    publicId?: IntFilter<"User"> | number
  }

  export type GroupBuyCreateWithoutOrganizerInput = {
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    neighborhood: NeighborhoodCreateNestedOneWithoutGrouBuysInput
    chats?: GroupBuyChatCreateNestedManyWithoutGroupBuyInput
    images?: GroupBuyImageCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyUncheckedCreateWithoutOrganizerInput = {
    id?: number
    neighborhoodId: number
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    chats?: GroupBuyChatUncheckedCreateNestedManyWithoutGroupBuyInput
    images?: GroupBuyImageUncheckedCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyCreateOrConnectWithoutOrganizerInput = {
    where: GroupBuyWhereUniqueInput
    create: XOR<GroupBuyCreateWithoutOrganizerInput, GroupBuyUncheckedCreateWithoutOrganizerInput>
  }

  export type GroupBuyCreateManyOrganizerInputEnvelope = {
    data: GroupBuyCreateManyOrganizerInput | GroupBuyCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type GroupBuyChatMessageCreateWithoutSenderInput = {
    content: string
    createdAt?: Date | string
    groupBuyChat: GroupBuyChatCreateNestedOneWithoutMessagesInput
  }

  export type GroupBuyChatMessageUncheckedCreateWithoutSenderInput = {
    id?: number
    groupBuyChatId: number
    content: string
    createdAt?: Date | string
  }

  export type GroupBuyChatMessageCreateOrConnectWithoutSenderInput = {
    where: GroupBuyChatMessageWhereUniqueInput
    create: XOR<GroupBuyChatMessageCreateWithoutSenderInput, GroupBuyChatMessageUncheckedCreateWithoutSenderInput>
  }

  export type GroupBuyChatMessageCreateManySenderInputEnvelope = {
    data: GroupBuyChatMessageCreateManySenderInput | GroupBuyChatMessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type GroupBuyChatParticipantCreateWithoutUserInput = {
    lastReadItemId?: number | null
    joinedAt?: Date | string
    groupBuyChat: GroupBuyChatCreateNestedOneWithoutParticipantsInput
  }

  export type GroupBuyChatParticipantUncheckedCreateWithoutUserInput = {
    id?: number
    lastReadItemId?: number | null
    groupBuyChatId: number
    joinedAt?: Date | string
  }

  export type GroupBuyChatParticipantCreateOrConnectWithoutUserInput = {
    where: GroupBuyChatParticipantWhereUniqueInput
    create: XOR<GroupBuyChatParticipantCreateWithoutUserInput, GroupBuyChatParticipantUncheckedCreateWithoutUserInput>
  }

  export type GroupBuyChatParticipantCreateManyUserInputEnvelope = {
    data: GroupBuyChatParticipantCreateManyUserInput | GroupBuyChatParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GroupBuyParticipantCreateWithoutUserInput = {
    createdAt?: Date | string
    groupBuy: GroupBuyCreateNestedOneWithoutParticipantsInput
  }

  export type GroupBuyParticipantUncheckedCreateWithoutUserInput = {
    id?: number
    groupBuyId: number
    createdAt?: Date | string
  }

  export type GroupBuyParticipantCreateOrConnectWithoutUserInput = {
    where: GroupBuyParticipantWhereUniqueInput
    create: XOR<GroupBuyParticipantCreateWithoutUserInput, GroupBuyParticipantUncheckedCreateWithoutUserInput>
  }

  export type GroupBuyParticipantCreateManyUserInputEnvelope = {
    data: GroupBuyParticipantCreateManyUserInput | GroupBuyParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    isRead?: boolean
    content: string
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    isRead?: boolean
    content: string
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutRecipientInput = {
    grade: number
    content?: string | null
    createdAt?: Date | string
    share: ShareCreateNestedOneWithoutReviewsInput
    writer: UserCreateNestedOneWithoutWrittenReviewsInput
    reviews?: ReviewShortReviewCreateNestedManyWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutRecipientInput = {
    id?: number
    writerId: string
    shareId: number
    grade: number
    content?: string | null
    createdAt?: Date | string
    reviews?: ReviewShortReviewUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutRecipientInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutRecipientInput, ReviewUncheckedCreateWithoutRecipientInput>
  }

  export type ReviewCreateManyRecipientInputEnvelope = {
    data: ReviewCreateManyRecipientInput | ReviewCreateManyRecipientInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutWriterInput = {
    grade: number
    content?: string | null
    createdAt?: Date | string
    recipient: UserCreateNestedOneWithoutReceivedReviewsInput
    share: ShareCreateNestedOneWithoutReviewsInput
    reviews?: ReviewShortReviewCreateNestedManyWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutWriterInput = {
    id?: number
    recipientId: string
    shareId: number
    grade: number
    content?: string | null
    createdAt?: Date | string
    reviews?: ReviewShortReviewUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutWriterInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutWriterInput, ReviewUncheckedCreateWithoutWriterInput>
  }

  export type ReviewCreateManyWriterInputEnvelope = {
    data: ReviewCreateManyWriterInput | ReviewCreateManyWriterInput[]
    skipDuplicates?: boolean
  }

  export type ShareCreateWithoutOwnerInput = {
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewCreateNestedManyWithoutShareInput
    neighborhood: NeighborhoodCreateNestedOneWithoutSharesInput
    recipient?: UserCreateNestedOneWithoutReceivedSharesInput
    shareItem: ShareItemCreateNestedOneWithoutSharesInput
    chats?: ShareChatCreateNestedManyWithoutShareInput
    images?: ShareImageCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutOwnerInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutShareInput
    chats?: ShareChatUncheckedCreateNestedManyWithoutShareInput
    images?: ShareImageUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareCreateOrConnectWithoutOwnerInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutOwnerInput, ShareUncheckedCreateWithoutOwnerInput>
  }

  export type ShareCreateManyOwnerInputEnvelope = {
    data: ShareCreateManyOwnerInput | ShareCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ShareCreateWithoutRecipientInput = {
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewCreateNestedManyWithoutShareInput
    neighborhood: NeighborhoodCreateNestedOneWithoutSharesInput
    owner: UserCreateNestedOneWithoutOwnedSharesInput
    shareItem: ShareItemCreateNestedOneWithoutSharesInput
    chats?: ShareChatCreateNestedManyWithoutShareInput
    images?: ShareImageCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutRecipientInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    ownerId: string
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutShareInput
    chats?: ShareChatUncheckedCreateNestedManyWithoutShareInput
    images?: ShareImageUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareCreateOrConnectWithoutRecipientInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutRecipientInput, ShareUncheckedCreateWithoutRecipientInput>
  }

  export type ShareCreateManyRecipientInputEnvelope = {
    data: ShareCreateManyRecipientInput | ShareCreateManyRecipientInput[]
    skipDuplicates?: boolean
  }

  export type ShareChatMessageCreateWithoutSenderInput = {
    content: string
    createdAt?: Date | string
    shareChat: ShareChatCreateNestedOneWithoutMessagesInput
  }

  export type ShareChatMessageUncheckedCreateWithoutSenderInput = {
    id?: number
    shareChatId: number
    content: string
    createdAt?: Date | string
  }

  export type ShareChatMessageCreateOrConnectWithoutSenderInput = {
    where: ShareChatMessageWhereUniqueInput
    create: XOR<ShareChatMessageCreateWithoutSenderInput, ShareChatMessageUncheckedCreateWithoutSenderInput>
  }

  export type ShareChatMessageCreateManySenderInputEnvelope = {
    data: ShareChatMessageCreateManySenderInput | ShareChatMessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type ShareChatParticipantCreateWithoutUserInput = {
    lastReadItemId?: number | null
    joinedAt?: Date | string
    shareChat: ShareChatCreateNestedOneWithoutParticipantsInput
  }

  export type ShareChatParticipantUncheckedCreateWithoutUserInput = {
    id?: number
    lastReadItemId?: number | null
    shareChatId: number
    joinedAt?: Date | string
  }

  export type ShareChatParticipantCreateOrConnectWithoutUserInput = {
    where: ShareChatParticipantWhereUniqueInput
    create: XOR<ShareChatParticipantCreateWithoutUserInput, ShareChatParticipantUncheckedCreateWithoutUserInput>
  }

  export type ShareChatParticipantCreateManyUserInputEnvelope = {
    data: ShareChatParticipantCreateManyUserInput | ShareChatParticipantCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NeighborhoodCreateWithoutUsersInput = {
    name: string
    district: string
    lat: number
    lng: number
    grouBuys?: GroupBuyCreateNestedManyWithoutNeighborhoodInput
    shares?: ShareCreateNestedManyWithoutNeighborhoodInput
  }

  export type NeighborhoodUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    district: string
    lat: number
    lng: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutNeighborhoodInput
    shares?: ShareUncheckedCreateNestedManyWithoutNeighborhoodInput
  }

  export type NeighborhoodCreateOrConnectWithoutUsersInput = {
    where: NeighborhoodWhereUniqueInput
    create: XOR<NeighborhoodCreateWithoutUsersInput, NeighborhoodUncheckedCreateWithoutUsersInput>
  }

  export type GroupBuyUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: GroupBuyWhereUniqueInput
    update: XOR<GroupBuyUpdateWithoutOrganizerInput, GroupBuyUncheckedUpdateWithoutOrganizerInput>
    create: XOR<GroupBuyCreateWithoutOrganizerInput, GroupBuyUncheckedCreateWithoutOrganizerInput>
  }

  export type GroupBuyUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: GroupBuyWhereUniqueInput
    data: XOR<GroupBuyUpdateWithoutOrganizerInput, GroupBuyUncheckedUpdateWithoutOrganizerInput>
  }

  export type GroupBuyUpdateManyWithWhereWithoutOrganizerInput = {
    where: GroupBuyScalarWhereInput
    data: XOR<GroupBuyUpdateManyMutationInput, GroupBuyUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type GroupBuyChatMessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: GroupBuyChatMessageWhereUniqueInput
    update: XOR<GroupBuyChatMessageUpdateWithoutSenderInput, GroupBuyChatMessageUncheckedUpdateWithoutSenderInput>
    create: XOR<GroupBuyChatMessageCreateWithoutSenderInput, GroupBuyChatMessageUncheckedCreateWithoutSenderInput>
  }

  export type GroupBuyChatMessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: GroupBuyChatMessageWhereUniqueInput
    data: XOR<GroupBuyChatMessageUpdateWithoutSenderInput, GroupBuyChatMessageUncheckedUpdateWithoutSenderInput>
  }

  export type GroupBuyChatMessageUpdateManyWithWhereWithoutSenderInput = {
    where: GroupBuyChatMessageScalarWhereInput
    data: XOR<GroupBuyChatMessageUpdateManyMutationInput, GroupBuyChatMessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type GroupBuyChatMessageScalarWhereInput = {
    AND?: GroupBuyChatMessageScalarWhereInput | GroupBuyChatMessageScalarWhereInput[]
    OR?: GroupBuyChatMessageScalarWhereInput[]
    NOT?: GroupBuyChatMessageScalarWhereInput | GroupBuyChatMessageScalarWhereInput[]
    id?: IntFilter<"GroupBuyChatMessage"> | number
    senderId?: StringFilter<"GroupBuyChatMessage"> | string
    groupBuyChatId?: IntFilter<"GroupBuyChatMessage"> | number
    content?: StringFilter<"GroupBuyChatMessage"> | string
    createdAt?: DateTimeFilter<"GroupBuyChatMessage"> | Date | string
  }

  export type GroupBuyChatParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: GroupBuyChatParticipantWhereUniqueInput
    update: XOR<GroupBuyChatParticipantUpdateWithoutUserInput, GroupBuyChatParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<GroupBuyChatParticipantCreateWithoutUserInput, GroupBuyChatParticipantUncheckedCreateWithoutUserInput>
  }

  export type GroupBuyChatParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: GroupBuyChatParticipantWhereUniqueInput
    data: XOR<GroupBuyChatParticipantUpdateWithoutUserInput, GroupBuyChatParticipantUncheckedUpdateWithoutUserInput>
  }

  export type GroupBuyChatParticipantUpdateManyWithWhereWithoutUserInput = {
    where: GroupBuyChatParticipantScalarWhereInput
    data: XOR<GroupBuyChatParticipantUpdateManyMutationInput, GroupBuyChatParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type GroupBuyChatParticipantScalarWhereInput = {
    AND?: GroupBuyChatParticipantScalarWhereInput | GroupBuyChatParticipantScalarWhereInput[]
    OR?: GroupBuyChatParticipantScalarWhereInput[]
    NOT?: GroupBuyChatParticipantScalarWhereInput | GroupBuyChatParticipantScalarWhereInput[]
    id?: IntFilter<"GroupBuyChatParticipant"> | number
    lastReadItemId?: IntNullableFilter<"GroupBuyChatParticipant"> | number | null
    userId?: StringFilter<"GroupBuyChatParticipant"> | string
    groupBuyChatId?: IntFilter<"GroupBuyChatParticipant"> | number
    joinedAt?: DateTimeFilter<"GroupBuyChatParticipant"> | Date | string
  }

  export type GroupBuyParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: GroupBuyParticipantWhereUniqueInput
    update: XOR<GroupBuyParticipantUpdateWithoutUserInput, GroupBuyParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<GroupBuyParticipantCreateWithoutUserInput, GroupBuyParticipantUncheckedCreateWithoutUserInput>
  }

  export type GroupBuyParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: GroupBuyParticipantWhereUniqueInput
    data: XOR<GroupBuyParticipantUpdateWithoutUserInput, GroupBuyParticipantUncheckedUpdateWithoutUserInput>
  }

  export type GroupBuyParticipantUpdateManyWithWhereWithoutUserInput = {
    where: GroupBuyParticipantScalarWhereInput
    data: XOR<GroupBuyParticipantUpdateManyMutationInput, GroupBuyParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type GroupBuyParticipantScalarWhereInput = {
    AND?: GroupBuyParticipantScalarWhereInput | GroupBuyParticipantScalarWhereInput[]
    OR?: GroupBuyParticipantScalarWhereInput[]
    NOT?: GroupBuyParticipantScalarWhereInput | GroupBuyParticipantScalarWhereInput[]
    id?: IntFilter<"GroupBuyParticipant"> | number
    userId?: StringFilter<"GroupBuyParticipant"> | string
    groupBuyId?: IntFilter<"GroupBuyParticipant"> | number
    createdAt?: DateTimeFilter<"GroupBuyParticipant"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    content?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutRecipientInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutRecipientInput, ReviewUncheckedUpdateWithoutRecipientInput>
    create: XOR<ReviewCreateWithoutRecipientInput, ReviewUncheckedCreateWithoutRecipientInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutRecipientInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutRecipientInput, ReviewUncheckedUpdateWithoutRecipientInput>
  }

  export type ReviewUpdateManyWithWhereWithoutRecipientInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutRecipientInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    writerId?: StringFilter<"Review"> | string
    recipientId?: StringFilter<"Review"> | string
    shareId?: IntFilter<"Review"> | number
    grade?: IntFilter<"Review"> | number
    content?: StringNullableFilter<"Review"> | string | null
    createdAt?: DateTimeFilter<"Review"> | Date | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutWriterInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutWriterInput, ReviewUncheckedUpdateWithoutWriterInput>
    create: XOR<ReviewCreateWithoutWriterInput, ReviewUncheckedCreateWithoutWriterInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutWriterInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutWriterInput, ReviewUncheckedUpdateWithoutWriterInput>
  }

  export type ReviewUpdateManyWithWhereWithoutWriterInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutWriterInput>
  }

  export type ShareUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutOwnerInput, ShareUncheckedUpdateWithoutOwnerInput>
    create: XOR<ShareCreateWithoutOwnerInput, ShareUncheckedCreateWithoutOwnerInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutOwnerInput, ShareUncheckedUpdateWithoutOwnerInput>
  }

  export type ShareUpdateManyWithWhereWithoutOwnerInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ShareUpsertWithWhereUniqueWithoutRecipientInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutRecipientInput, ShareUncheckedUpdateWithoutRecipientInput>
    create: XOR<ShareCreateWithoutRecipientInput, ShareUncheckedCreateWithoutRecipientInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutRecipientInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutRecipientInput, ShareUncheckedUpdateWithoutRecipientInput>
  }

  export type ShareUpdateManyWithWhereWithoutRecipientInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutRecipientInput>
  }

  export type ShareChatMessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: ShareChatMessageWhereUniqueInput
    update: XOR<ShareChatMessageUpdateWithoutSenderInput, ShareChatMessageUncheckedUpdateWithoutSenderInput>
    create: XOR<ShareChatMessageCreateWithoutSenderInput, ShareChatMessageUncheckedCreateWithoutSenderInput>
  }

  export type ShareChatMessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: ShareChatMessageWhereUniqueInput
    data: XOR<ShareChatMessageUpdateWithoutSenderInput, ShareChatMessageUncheckedUpdateWithoutSenderInput>
  }

  export type ShareChatMessageUpdateManyWithWhereWithoutSenderInput = {
    where: ShareChatMessageScalarWhereInput
    data: XOR<ShareChatMessageUpdateManyMutationInput, ShareChatMessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type ShareChatMessageScalarWhereInput = {
    AND?: ShareChatMessageScalarWhereInput | ShareChatMessageScalarWhereInput[]
    OR?: ShareChatMessageScalarWhereInput[]
    NOT?: ShareChatMessageScalarWhereInput | ShareChatMessageScalarWhereInput[]
    id?: IntFilter<"ShareChatMessage"> | number
    senderId?: StringFilter<"ShareChatMessage"> | string
    shareChatId?: IntFilter<"ShareChatMessage"> | number
    content?: StringFilter<"ShareChatMessage"> | string
    createdAt?: DateTimeFilter<"ShareChatMessage"> | Date | string
  }

  export type ShareChatParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: ShareChatParticipantWhereUniqueInput
    update: XOR<ShareChatParticipantUpdateWithoutUserInput, ShareChatParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<ShareChatParticipantCreateWithoutUserInput, ShareChatParticipantUncheckedCreateWithoutUserInput>
  }

  export type ShareChatParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: ShareChatParticipantWhereUniqueInput
    data: XOR<ShareChatParticipantUpdateWithoutUserInput, ShareChatParticipantUncheckedUpdateWithoutUserInput>
  }

  export type ShareChatParticipantUpdateManyWithWhereWithoutUserInput = {
    where: ShareChatParticipantScalarWhereInput
    data: XOR<ShareChatParticipantUpdateManyMutationInput, ShareChatParticipantUncheckedUpdateManyWithoutUserInput>
  }

  export type ShareChatParticipantScalarWhereInput = {
    AND?: ShareChatParticipantScalarWhereInput | ShareChatParticipantScalarWhereInput[]
    OR?: ShareChatParticipantScalarWhereInput[]
    NOT?: ShareChatParticipantScalarWhereInput | ShareChatParticipantScalarWhereInput[]
    id?: IntFilter<"ShareChatParticipant"> | number
    lastReadItemId?: IntNullableFilter<"ShareChatParticipant"> | number | null
    userId?: StringFilter<"ShareChatParticipant"> | string
    shareChatId?: IntFilter<"ShareChatParticipant"> | number
    joinedAt?: DateTimeFilter<"ShareChatParticipant"> | Date | string
  }

  export type NeighborhoodUpsertWithoutUsersInput = {
    update: XOR<NeighborhoodUpdateWithoutUsersInput, NeighborhoodUncheckedUpdateWithoutUsersInput>
    create: XOR<NeighborhoodCreateWithoutUsersInput, NeighborhoodUncheckedCreateWithoutUsersInput>
    where?: NeighborhoodWhereInput
  }

  export type NeighborhoodUpdateToOneWithWhereWithoutUsersInput = {
    where?: NeighborhoodWhereInput
    data: XOR<NeighborhoodUpdateWithoutUsersInput, NeighborhoodUncheckedUpdateWithoutUsersInput>
  }

  export type NeighborhoodUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutNeighborhoodNestedInput
    shares?: ShareUpdateManyWithoutNeighborhoodNestedInput
  }

  export type NeighborhoodUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutNeighborhoodNestedInput
    shares?: ShareUncheckedUpdateManyWithoutNeighborhoodNestedInput
  }

  export type NeighborhoodCreateWithoutGrouBuysInput = {
    name: string
    district: string
    lat: number
    lng: number
    shares?: ShareCreateNestedManyWithoutNeighborhoodInput
    users?: UserCreateNestedManyWithoutNeighborhoodInput
  }

  export type NeighborhoodUncheckedCreateWithoutGrouBuysInput = {
    id?: number
    name: string
    district: string
    lat: number
    lng: number
    shares?: ShareUncheckedCreateNestedManyWithoutNeighborhoodInput
    users?: UserUncheckedCreateNestedManyWithoutNeighborhoodInput
  }

  export type NeighborhoodCreateOrConnectWithoutGrouBuysInput = {
    where: NeighborhoodWhereUniqueInput
    create: XOR<NeighborhoodCreateWithoutGrouBuysInput, NeighborhoodUncheckedCreateWithoutGrouBuysInput>
  }

  export type UserCreateWithoutGrouBuysInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutGrouBuysInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGrouBuysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGrouBuysInput, UserUncheckedCreateWithoutGrouBuysInput>
  }

  export type GroupBuyChatCreateWithoutGroupBuyInput = {
    createdAt?: Date | string
    messages?: GroupBuyChatMessageCreateNestedManyWithoutGroupBuyChatInput
    participants?: GroupBuyChatParticipantCreateNestedManyWithoutGroupBuyChatInput
  }

  export type GroupBuyChatUncheckedCreateWithoutGroupBuyInput = {
    id?: number
    createdAt?: Date | string
    messages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutGroupBuyChatInput
    participants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutGroupBuyChatInput
  }

  export type GroupBuyChatCreateOrConnectWithoutGroupBuyInput = {
    where: GroupBuyChatWhereUniqueInput
    create: XOR<GroupBuyChatCreateWithoutGroupBuyInput, GroupBuyChatUncheckedCreateWithoutGroupBuyInput>
  }

  export type GroupBuyChatCreateManyGroupBuyInputEnvelope = {
    data: GroupBuyChatCreateManyGroupBuyInput | GroupBuyChatCreateManyGroupBuyInput[]
    skipDuplicates?: boolean
  }

  export type GroupBuyImageCreateWithoutGroupBuyInput = {
    url: string
  }

  export type GroupBuyImageUncheckedCreateWithoutGroupBuyInput = {
    id?: number
    url: string
  }

  export type GroupBuyImageCreateOrConnectWithoutGroupBuyInput = {
    where: GroupBuyImageWhereUniqueInput
    create: XOR<GroupBuyImageCreateWithoutGroupBuyInput, GroupBuyImageUncheckedCreateWithoutGroupBuyInput>
  }

  export type GroupBuyImageCreateManyGroupBuyInputEnvelope = {
    data: GroupBuyImageCreateManyGroupBuyInput | GroupBuyImageCreateManyGroupBuyInput[]
    skipDuplicates?: boolean
  }

  export type GroupBuyParticipantCreateWithoutGroupBuyInput = {
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutGroupBuyParticipantsInput
  }

  export type GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput = {
    id?: number
    userId: string
    createdAt?: Date | string
  }

  export type GroupBuyParticipantCreateOrConnectWithoutGroupBuyInput = {
    where: GroupBuyParticipantWhereUniqueInput
    create: XOR<GroupBuyParticipantCreateWithoutGroupBuyInput, GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput>
  }

  export type GroupBuyParticipantCreateManyGroupBuyInputEnvelope = {
    data: GroupBuyParticipantCreateManyGroupBuyInput | GroupBuyParticipantCreateManyGroupBuyInput[]
    skipDuplicates?: boolean
  }

  export type NeighborhoodUpsertWithoutGrouBuysInput = {
    update: XOR<NeighborhoodUpdateWithoutGrouBuysInput, NeighborhoodUncheckedUpdateWithoutGrouBuysInput>
    create: XOR<NeighborhoodCreateWithoutGrouBuysInput, NeighborhoodUncheckedCreateWithoutGrouBuysInput>
    where?: NeighborhoodWhereInput
  }

  export type NeighborhoodUpdateToOneWithWhereWithoutGrouBuysInput = {
    where?: NeighborhoodWhereInput
    data: XOR<NeighborhoodUpdateWithoutGrouBuysInput, NeighborhoodUncheckedUpdateWithoutGrouBuysInput>
  }

  export type NeighborhoodUpdateWithoutGrouBuysInput = {
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    shares?: ShareUpdateManyWithoutNeighborhoodNestedInput
    users?: UserUpdateManyWithoutNeighborhoodNestedInput
  }

  export type NeighborhoodUncheckedUpdateWithoutGrouBuysInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    shares?: ShareUncheckedUpdateManyWithoutNeighborhoodNestedInput
    users?: UserUncheckedUpdateManyWithoutNeighborhoodNestedInput
  }

  export type UserUpsertWithoutGrouBuysInput = {
    update: XOR<UserUpdateWithoutGrouBuysInput, UserUncheckedUpdateWithoutGrouBuysInput>
    create: XOR<UserCreateWithoutGrouBuysInput, UserUncheckedCreateWithoutGrouBuysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGrouBuysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGrouBuysInput, UserUncheckedUpdateWithoutGrouBuysInput>
  }

  export type UserUpdateWithoutGrouBuysInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutGrouBuysInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupBuyChatUpsertWithWhereUniqueWithoutGroupBuyInput = {
    where: GroupBuyChatWhereUniqueInput
    update: XOR<GroupBuyChatUpdateWithoutGroupBuyInput, GroupBuyChatUncheckedUpdateWithoutGroupBuyInput>
    create: XOR<GroupBuyChatCreateWithoutGroupBuyInput, GroupBuyChatUncheckedCreateWithoutGroupBuyInput>
  }

  export type GroupBuyChatUpdateWithWhereUniqueWithoutGroupBuyInput = {
    where: GroupBuyChatWhereUniqueInput
    data: XOR<GroupBuyChatUpdateWithoutGroupBuyInput, GroupBuyChatUncheckedUpdateWithoutGroupBuyInput>
  }

  export type GroupBuyChatUpdateManyWithWhereWithoutGroupBuyInput = {
    where: GroupBuyChatScalarWhereInput
    data: XOR<GroupBuyChatUpdateManyMutationInput, GroupBuyChatUncheckedUpdateManyWithoutGroupBuyInput>
  }

  export type GroupBuyChatScalarWhereInput = {
    AND?: GroupBuyChatScalarWhereInput | GroupBuyChatScalarWhereInput[]
    OR?: GroupBuyChatScalarWhereInput[]
    NOT?: GroupBuyChatScalarWhereInput | GroupBuyChatScalarWhereInput[]
    id?: IntFilter<"GroupBuyChat"> | number
    groupBuyId?: IntFilter<"GroupBuyChat"> | number
    createdAt?: DateTimeFilter<"GroupBuyChat"> | Date | string
  }

  export type GroupBuyImageUpsertWithWhereUniqueWithoutGroupBuyInput = {
    where: GroupBuyImageWhereUniqueInput
    update: XOR<GroupBuyImageUpdateWithoutGroupBuyInput, GroupBuyImageUncheckedUpdateWithoutGroupBuyInput>
    create: XOR<GroupBuyImageCreateWithoutGroupBuyInput, GroupBuyImageUncheckedCreateWithoutGroupBuyInput>
  }

  export type GroupBuyImageUpdateWithWhereUniqueWithoutGroupBuyInput = {
    where: GroupBuyImageWhereUniqueInput
    data: XOR<GroupBuyImageUpdateWithoutGroupBuyInput, GroupBuyImageUncheckedUpdateWithoutGroupBuyInput>
  }

  export type GroupBuyImageUpdateManyWithWhereWithoutGroupBuyInput = {
    where: GroupBuyImageScalarWhereInput
    data: XOR<GroupBuyImageUpdateManyMutationInput, GroupBuyImageUncheckedUpdateManyWithoutGroupBuyInput>
  }

  export type GroupBuyImageScalarWhereInput = {
    AND?: GroupBuyImageScalarWhereInput | GroupBuyImageScalarWhereInput[]
    OR?: GroupBuyImageScalarWhereInput[]
    NOT?: GroupBuyImageScalarWhereInput | GroupBuyImageScalarWhereInput[]
    id?: IntFilter<"GroupBuyImage"> | number
    groupBuyId?: IntFilter<"GroupBuyImage"> | number
    url?: StringFilter<"GroupBuyImage"> | string
  }

  export type GroupBuyParticipantUpsertWithWhereUniqueWithoutGroupBuyInput = {
    where: GroupBuyParticipantWhereUniqueInput
    update: XOR<GroupBuyParticipantUpdateWithoutGroupBuyInput, GroupBuyParticipantUncheckedUpdateWithoutGroupBuyInput>
    create: XOR<GroupBuyParticipantCreateWithoutGroupBuyInput, GroupBuyParticipantUncheckedCreateWithoutGroupBuyInput>
  }

  export type GroupBuyParticipantUpdateWithWhereUniqueWithoutGroupBuyInput = {
    where: GroupBuyParticipantWhereUniqueInput
    data: XOR<GroupBuyParticipantUpdateWithoutGroupBuyInput, GroupBuyParticipantUncheckedUpdateWithoutGroupBuyInput>
  }

  export type GroupBuyParticipantUpdateManyWithWhereWithoutGroupBuyInput = {
    where: GroupBuyParticipantScalarWhereInput
    data: XOR<GroupBuyParticipantUpdateManyMutationInput, GroupBuyParticipantUncheckedUpdateManyWithoutGroupBuyInput>
  }

  export type GroupBuyCreateWithoutParticipantsInput = {
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    neighborhood: NeighborhoodCreateNestedOneWithoutGrouBuysInput
    organizer: UserCreateNestedOneWithoutGrouBuysInput
    chats?: GroupBuyChatCreateNestedManyWithoutGroupBuyInput
    images?: GroupBuyImageCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyUncheckedCreateWithoutParticipantsInput = {
    id?: number
    organizerId: string
    neighborhoodId: number
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    chats?: GroupBuyChatUncheckedCreateNestedManyWithoutGroupBuyInput
    images?: GroupBuyImageUncheckedCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyCreateOrConnectWithoutParticipantsInput = {
    where: GroupBuyWhereUniqueInput
    create: XOR<GroupBuyCreateWithoutParticipantsInput, GroupBuyUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutGroupBuyParticipantsInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutGroupBuyParticipantsInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGroupBuyParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroupBuyParticipantsInput, UserUncheckedCreateWithoutGroupBuyParticipantsInput>
  }

  export type GroupBuyUpsertWithoutParticipantsInput = {
    update: XOR<GroupBuyUpdateWithoutParticipantsInput, GroupBuyUncheckedUpdateWithoutParticipantsInput>
    create: XOR<GroupBuyCreateWithoutParticipantsInput, GroupBuyUncheckedCreateWithoutParticipantsInput>
    where?: GroupBuyWhereInput
  }

  export type GroupBuyUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: GroupBuyWhereInput
    data: XOR<GroupBuyUpdateWithoutParticipantsInput, GroupBuyUncheckedUpdateWithoutParticipantsInput>
  }

  export type GroupBuyUpdateWithoutParticipantsInput = {
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutGrouBuysNestedInput
    organizer?: UserUpdateOneRequiredWithoutGrouBuysNestedInput
    chats?: GroupBuyChatUpdateManyWithoutGroupBuyNestedInput
    images?: GroupBuyImageUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizerId?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    chats?: GroupBuyChatUncheckedUpdateManyWithoutGroupBuyNestedInput
    images?: GroupBuyImageUncheckedUpdateManyWithoutGroupBuyNestedInput
  }

  export type UserUpsertWithoutGroupBuyParticipantsInput = {
    update: XOR<UserUpdateWithoutGroupBuyParticipantsInput, UserUncheckedUpdateWithoutGroupBuyParticipantsInput>
    create: XOR<UserCreateWithoutGroupBuyParticipantsInput, UserUncheckedCreateWithoutGroupBuyParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGroupBuyParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGroupBuyParticipantsInput, UserUncheckedUpdateWithoutGroupBuyParticipantsInput>
  }

  export type UserUpdateWithoutGroupBuyParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutGroupBuyParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupBuyCreateWithoutImagesInput = {
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    neighborhood: NeighborhoodCreateNestedOneWithoutGrouBuysInput
    organizer: UserCreateNestedOneWithoutGrouBuysInput
    chats?: GroupBuyChatCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyUncheckedCreateWithoutImagesInput = {
    id?: number
    organizerId: string
    neighborhoodId: number
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    chats?: GroupBuyChatUncheckedCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyCreateOrConnectWithoutImagesInput = {
    where: GroupBuyWhereUniqueInput
    create: XOR<GroupBuyCreateWithoutImagesInput, GroupBuyUncheckedCreateWithoutImagesInput>
  }

  export type GroupBuyUpsertWithoutImagesInput = {
    update: XOR<GroupBuyUpdateWithoutImagesInput, GroupBuyUncheckedUpdateWithoutImagesInput>
    create: XOR<GroupBuyCreateWithoutImagesInput, GroupBuyUncheckedCreateWithoutImagesInput>
    where?: GroupBuyWhereInput
  }

  export type GroupBuyUpdateToOneWithWhereWithoutImagesInput = {
    where?: GroupBuyWhereInput
    data: XOR<GroupBuyUpdateWithoutImagesInput, GroupBuyUncheckedUpdateWithoutImagesInput>
  }

  export type GroupBuyUpdateWithoutImagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutGrouBuysNestedInput
    organizer?: UserUpdateOneRequiredWithoutGrouBuysNestedInput
    chats?: GroupBuyChatUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizerId?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    chats?: GroupBuyChatUncheckedUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUncheckedUpdateManyWithoutGroupBuyNestedInput
  }

  export type ReviewCreateWithoutShareInput = {
    grade: number
    content?: string | null
    createdAt?: Date | string
    recipient: UserCreateNestedOneWithoutReceivedReviewsInput
    writer: UserCreateNestedOneWithoutWrittenReviewsInput
    reviews?: ReviewShortReviewCreateNestedManyWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutShareInput = {
    id?: number
    writerId: string
    recipientId: string
    grade: number
    content?: string | null
    createdAt?: Date | string
    reviews?: ReviewShortReviewUncheckedCreateNestedManyWithoutReviewInput
  }

  export type ReviewCreateOrConnectWithoutShareInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutShareInput, ReviewUncheckedCreateWithoutShareInput>
  }

  export type ReviewCreateManyShareInputEnvelope = {
    data: ReviewCreateManyShareInput | ReviewCreateManyShareInput[]
    skipDuplicates?: boolean
  }

  export type NeighborhoodCreateWithoutSharesInput = {
    name: string
    district: string
    lat: number
    lng: number
    grouBuys?: GroupBuyCreateNestedManyWithoutNeighborhoodInput
    users?: UserCreateNestedManyWithoutNeighborhoodInput
  }

  export type NeighborhoodUncheckedCreateWithoutSharesInput = {
    id?: number
    name: string
    district: string
    lat: number
    lng: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutNeighborhoodInput
    users?: UserUncheckedCreateNestedManyWithoutNeighborhoodInput
  }

  export type NeighborhoodCreateOrConnectWithoutSharesInput = {
    where: NeighborhoodWhereUniqueInput
    create: XOR<NeighborhoodCreateWithoutSharesInput, NeighborhoodUncheckedCreateWithoutSharesInput>
  }

  export type UserCreateWithoutOwnedSharesInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutOwnedSharesInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedSharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedSharesInput, UserUncheckedCreateWithoutOwnedSharesInput>
  }

  export type UserCreateWithoutReceivedSharesInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutReceivedSharesInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedSharesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedSharesInput, UserUncheckedCreateWithoutReceivedSharesInput>
  }

  export type ShareItemCreateWithoutSharesInput = {
    name: string
  }

  export type ShareItemUncheckedCreateWithoutSharesInput = {
    id?: number
    name: string
  }

  export type ShareItemCreateOrConnectWithoutSharesInput = {
    where: ShareItemWhereUniqueInput
    create: XOR<ShareItemCreateWithoutSharesInput, ShareItemUncheckedCreateWithoutSharesInput>
  }

  export type ShareChatCreateWithoutShareInput = {
    createdAt?: Date | string
    messages?: ShareChatMessageCreateNestedManyWithoutShareChatInput
    participants?: ShareChatParticipantCreateNestedManyWithoutShareChatInput
  }

  export type ShareChatUncheckedCreateWithoutShareInput = {
    id?: number
    createdAt?: Date | string
    messages?: ShareChatMessageUncheckedCreateNestedManyWithoutShareChatInput
    participants?: ShareChatParticipantUncheckedCreateNestedManyWithoutShareChatInput
  }

  export type ShareChatCreateOrConnectWithoutShareInput = {
    where: ShareChatWhereUniqueInput
    create: XOR<ShareChatCreateWithoutShareInput, ShareChatUncheckedCreateWithoutShareInput>
  }

  export type ShareChatCreateManyShareInputEnvelope = {
    data: ShareChatCreateManyShareInput | ShareChatCreateManyShareInput[]
    skipDuplicates?: boolean
  }

  export type ShareImageCreateWithoutShareInput = {
    url: string
  }

  export type ShareImageUncheckedCreateWithoutShareInput = {
    id?: number
    url: string
  }

  export type ShareImageCreateOrConnectWithoutShareInput = {
    where: ShareImageWhereUniqueInput
    create: XOR<ShareImageCreateWithoutShareInput, ShareImageUncheckedCreateWithoutShareInput>
  }

  export type ShareImageCreateManyShareInputEnvelope = {
    data: ShareImageCreateManyShareInput | ShareImageCreateManyShareInput[]
    skipDuplicates?: boolean
  }

  export type ReviewUpsertWithWhereUniqueWithoutShareInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutShareInput, ReviewUncheckedUpdateWithoutShareInput>
    create: XOR<ReviewCreateWithoutShareInput, ReviewUncheckedCreateWithoutShareInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutShareInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutShareInput, ReviewUncheckedUpdateWithoutShareInput>
  }

  export type ReviewUpdateManyWithWhereWithoutShareInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutShareInput>
  }

  export type NeighborhoodUpsertWithoutSharesInput = {
    update: XOR<NeighborhoodUpdateWithoutSharesInput, NeighborhoodUncheckedUpdateWithoutSharesInput>
    create: XOR<NeighborhoodCreateWithoutSharesInput, NeighborhoodUncheckedCreateWithoutSharesInput>
    where?: NeighborhoodWhereInput
  }

  export type NeighborhoodUpdateToOneWithWhereWithoutSharesInput = {
    where?: NeighborhoodWhereInput
    data: XOR<NeighborhoodUpdateWithoutSharesInput, NeighborhoodUncheckedUpdateWithoutSharesInput>
  }

  export type NeighborhoodUpdateWithoutSharesInput = {
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutNeighborhoodNestedInput
    users?: UserUpdateManyWithoutNeighborhoodNestedInput
  }

  export type NeighborhoodUncheckedUpdateWithoutSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutNeighborhoodNestedInput
    users?: UserUncheckedUpdateManyWithoutNeighborhoodNestedInput
  }

  export type UserUpsertWithoutOwnedSharesInput = {
    update: XOR<UserUpdateWithoutOwnedSharesInput, UserUncheckedUpdateWithoutOwnedSharesInput>
    create: XOR<UserCreateWithoutOwnedSharesInput, UserUncheckedCreateWithoutOwnedSharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedSharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedSharesInput, UserUncheckedUpdateWithoutOwnedSharesInput>
  }

  export type UserUpdateWithoutOwnedSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedSharesInput = {
    update: XOR<UserUpdateWithoutReceivedSharesInput, UserUncheckedUpdateWithoutReceivedSharesInput>
    create: XOR<UserCreateWithoutReceivedSharesInput, UserUncheckedCreateWithoutReceivedSharesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedSharesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedSharesInput, UserUncheckedUpdateWithoutReceivedSharesInput>
  }

  export type UserUpdateWithoutReceivedSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShareItemUpsertWithoutSharesInput = {
    update: XOR<ShareItemUpdateWithoutSharesInput, ShareItemUncheckedUpdateWithoutSharesInput>
    create: XOR<ShareItemCreateWithoutSharesInput, ShareItemUncheckedCreateWithoutSharesInput>
    where?: ShareItemWhereInput
  }

  export type ShareItemUpdateToOneWithWhereWithoutSharesInput = {
    where?: ShareItemWhereInput
    data: XOR<ShareItemUpdateWithoutSharesInput, ShareItemUncheckedUpdateWithoutSharesInput>
  }

  export type ShareItemUpdateWithoutSharesInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ShareItemUncheckedUpdateWithoutSharesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ShareChatUpsertWithWhereUniqueWithoutShareInput = {
    where: ShareChatWhereUniqueInput
    update: XOR<ShareChatUpdateWithoutShareInput, ShareChatUncheckedUpdateWithoutShareInput>
    create: XOR<ShareChatCreateWithoutShareInput, ShareChatUncheckedCreateWithoutShareInput>
  }

  export type ShareChatUpdateWithWhereUniqueWithoutShareInput = {
    where: ShareChatWhereUniqueInput
    data: XOR<ShareChatUpdateWithoutShareInput, ShareChatUncheckedUpdateWithoutShareInput>
  }

  export type ShareChatUpdateManyWithWhereWithoutShareInput = {
    where: ShareChatScalarWhereInput
    data: XOR<ShareChatUpdateManyMutationInput, ShareChatUncheckedUpdateManyWithoutShareInput>
  }

  export type ShareChatScalarWhereInput = {
    AND?: ShareChatScalarWhereInput | ShareChatScalarWhereInput[]
    OR?: ShareChatScalarWhereInput[]
    NOT?: ShareChatScalarWhereInput | ShareChatScalarWhereInput[]
    id?: IntFilter<"ShareChat"> | number
    shareId?: IntFilter<"ShareChat"> | number
    createdAt?: DateTimeFilter<"ShareChat"> | Date | string
  }

  export type ShareImageUpsertWithWhereUniqueWithoutShareInput = {
    where: ShareImageWhereUniqueInput
    update: XOR<ShareImageUpdateWithoutShareInput, ShareImageUncheckedUpdateWithoutShareInput>
    create: XOR<ShareImageCreateWithoutShareInput, ShareImageUncheckedCreateWithoutShareInput>
  }

  export type ShareImageUpdateWithWhereUniqueWithoutShareInput = {
    where: ShareImageWhereUniqueInput
    data: XOR<ShareImageUpdateWithoutShareInput, ShareImageUncheckedUpdateWithoutShareInput>
  }

  export type ShareImageUpdateManyWithWhereWithoutShareInput = {
    where: ShareImageScalarWhereInput
    data: XOR<ShareImageUpdateManyMutationInput, ShareImageUncheckedUpdateManyWithoutShareInput>
  }

  export type ShareImageScalarWhereInput = {
    AND?: ShareImageScalarWhereInput | ShareImageScalarWhereInput[]
    OR?: ShareImageScalarWhereInput[]
    NOT?: ShareImageScalarWhereInput | ShareImageScalarWhereInput[]
    id?: IntFilter<"ShareImage"> | number
    shareId?: IntFilter<"ShareImage"> | number
    url?: StringFilter<"ShareImage"> | string
  }

  export type ShareCreateWithoutImagesInput = {
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewCreateNestedManyWithoutShareInput
    neighborhood: NeighborhoodCreateNestedOneWithoutSharesInput
    owner: UserCreateNestedOneWithoutOwnedSharesInput
    recipient?: UserCreateNestedOneWithoutReceivedSharesInput
    shareItem: ShareItemCreateNestedOneWithoutSharesInput
    chats?: ShareChatCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutImagesInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutShareInput
    chats?: ShareChatUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareCreateOrConnectWithoutImagesInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutImagesInput, ShareUncheckedCreateWithoutImagesInput>
  }

  export type ShareUpsertWithoutImagesInput = {
    update: XOR<ShareUpdateWithoutImagesInput, ShareUncheckedUpdateWithoutImagesInput>
    create: XOR<ShareCreateWithoutImagesInput, ShareUncheckedCreateWithoutImagesInput>
    where?: ShareWhereInput
  }

  export type ShareUpdateToOneWithWhereWithoutImagesInput = {
    where?: ShareWhereInput
    data: XOR<ShareUpdateWithoutImagesInput, ShareUncheckedUpdateWithoutImagesInput>
  }

  export type ShareUpdateWithoutImagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutShareNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutSharesNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedSharesNestedInput
    recipient?: UserUpdateOneWithoutReceivedSharesNestedInput
    shareItem?: ShareItemUpdateOneRequiredWithoutSharesNestedInput
    chats?: ShareChatUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutShareNestedInput
    chats?: ShareChatUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ShareCreateWithoutShareItemInput = {
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewCreateNestedManyWithoutShareInput
    neighborhood: NeighborhoodCreateNestedOneWithoutSharesInput
    owner: UserCreateNestedOneWithoutOwnedSharesInput
    recipient?: UserCreateNestedOneWithoutReceivedSharesInput
    chats?: ShareChatCreateNestedManyWithoutShareInput
    images?: ShareImageCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutShareItemInput = {
    id?: number
    neighborhoodId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutShareInput
    chats?: ShareChatUncheckedCreateNestedManyWithoutShareInput
    images?: ShareImageUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareCreateOrConnectWithoutShareItemInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutShareItemInput, ShareUncheckedCreateWithoutShareItemInput>
  }

  export type ShareCreateManyShareItemInputEnvelope = {
    data: ShareCreateManyShareItemInput | ShareCreateManyShareItemInput[]
    skipDuplicates?: boolean
  }

  export type ShareUpsertWithWhereUniqueWithoutShareItemInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutShareItemInput, ShareUncheckedUpdateWithoutShareItemInput>
    create: XOR<ShareCreateWithoutShareItemInput, ShareUncheckedCreateWithoutShareItemInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutShareItemInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutShareItemInput, ShareUncheckedUpdateWithoutShareItemInput>
  }

  export type ShareUpdateManyWithWhereWithoutShareItemInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutShareItemInput>
  }

  export type UserCreateWithoutReceivedReviewsInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutReceivedReviewsInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedReviewsInput, UserUncheckedCreateWithoutReceivedReviewsInput>
  }

  export type ShareCreateWithoutReviewsInput = {
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    neighborhood: NeighborhoodCreateNestedOneWithoutSharesInput
    owner: UserCreateNestedOneWithoutOwnedSharesInput
    recipient?: UserCreateNestedOneWithoutReceivedSharesInput
    shareItem: ShareItemCreateNestedOneWithoutSharesInput
    chats?: ShareChatCreateNestedManyWithoutShareInput
    images?: ShareImageCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutReviewsInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    chats?: ShareChatUncheckedCreateNestedManyWithoutShareInput
    images?: ShareImageUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareCreateOrConnectWithoutReviewsInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutReviewsInput, ShareUncheckedCreateWithoutReviewsInput>
  }

  export type UserCreateWithoutWrittenReviewsInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutWrittenReviewsInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWrittenReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWrittenReviewsInput, UserUncheckedCreateWithoutWrittenReviewsInput>
  }

  export type ReviewShortReviewCreateWithoutReviewInput = {
    shortReviewOption: ShortReviewOptionCreateNestedOneWithoutReviewsInput
  }

  export type ReviewShortReviewUncheckedCreateWithoutReviewInput = {
    id?: number
    shortReviewOptionId: number
  }

  export type ReviewShortReviewCreateOrConnectWithoutReviewInput = {
    where: ReviewShortReviewWhereUniqueInput
    create: XOR<ReviewShortReviewCreateWithoutReviewInput, ReviewShortReviewUncheckedCreateWithoutReviewInput>
  }

  export type ReviewShortReviewCreateManyReviewInputEnvelope = {
    data: ReviewShortReviewCreateManyReviewInput | ReviewShortReviewCreateManyReviewInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReceivedReviewsInput = {
    update: XOR<UserUpdateWithoutReceivedReviewsInput, UserUncheckedUpdateWithoutReceivedReviewsInput>
    create: XOR<UserCreateWithoutReceivedReviewsInput, UserUncheckedCreateWithoutReceivedReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedReviewsInput, UserUncheckedUpdateWithoutReceivedReviewsInput>
  }

  export type UserUpdateWithoutReceivedReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShareUpsertWithoutReviewsInput = {
    update: XOR<ShareUpdateWithoutReviewsInput, ShareUncheckedUpdateWithoutReviewsInput>
    create: XOR<ShareCreateWithoutReviewsInput, ShareUncheckedCreateWithoutReviewsInput>
    where?: ShareWhereInput
  }

  export type ShareUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ShareWhereInput
    data: XOR<ShareUpdateWithoutReviewsInput, ShareUncheckedUpdateWithoutReviewsInput>
  }

  export type ShareUpdateWithoutReviewsInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutSharesNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedSharesNestedInput
    recipient?: UserUpdateOneWithoutReceivedSharesNestedInput
    shareItem?: ShareItemUpdateOneRequiredWithoutSharesNestedInput
    chats?: ShareChatUpdateManyWithoutShareNestedInput
    images?: ShareImageUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    chats?: ShareChatUncheckedUpdateManyWithoutShareNestedInput
    images?: ShareImageUncheckedUpdateManyWithoutShareNestedInput
  }

  export type UserUpsertWithoutWrittenReviewsInput = {
    update: XOR<UserUpdateWithoutWrittenReviewsInput, UserUncheckedUpdateWithoutWrittenReviewsInput>
    create: XOR<UserCreateWithoutWrittenReviewsInput, UserUncheckedCreateWithoutWrittenReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWrittenReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWrittenReviewsInput, UserUncheckedUpdateWithoutWrittenReviewsInput>
  }

  export type UserUpdateWithoutWrittenReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutWrittenReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReviewShortReviewUpsertWithWhereUniqueWithoutReviewInput = {
    where: ReviewShortReviewWhereUniqueInput
    update: XOR<ReviewShortReviewUpdateWithoutReviewInput, ReviewShortReviewUncheckedUpdateWithoutReviewInput>
    create: XOR<ReviewShortReviewCreateWithoutReviewInput, ReviewShortReviewUncheckedCreateWithoutReviewInput>
  }

  export type ReviewShortReviewUpdateWithWhereUniqueWithoutReviewInput = {
    where: ReviewShortReviewWhereUniqueInput
    data: XOR<ReviewShortReviewUpdateWithoutReviewInput, ReviewShortReviewUncheckedUpdateWithoutReviewInput>
  }

  export type ReviewShortReviewUpdateManyWithWhereWithoutReviewInput = {
    where: ReviewShortReviewScalarWhereInput
    data: XOR<ReviewShortReviewUpdateManyMutationInput, ReviewShortReviewUncheckedUpdateManyWithoutReviewInput>
  }

  export type ReviewShortReviewScalarWhereInput = {
    AND?: ReviewShortReviewScalarWhereInput | ReviewShortReviewScalarWhereInput[]
    OR?: ReviewShortReviewScalarWhereInput[]
    NOT?: ReviewShortReviewScalarWhereInput | ReviewShortReviewScalarWhereInput[]
    id?: IntFilter<"ReviewShortReview"> | number
    reviewId?: IntFilter<"ReviewShortReview"> | number
    shortReviewOptionId?: IntFilter<"ReviewShortReview"> | number
  }

  export type ReviewCreateWithoutReviewsInput = {
    grade: number
    content?: string | null
    createdAt?: Date | string
    recipient: UserCreateNestedOneWithoutReceivedReviewsInput
    share: ShareCreateNestedOneWithoutReviewsInput
    writer: UserCreateNestedOneWithoutWrittenReviewsInput
  }

  export type ReviewUncheckedCreateWithoutReviewsInput = {
    id?: number
    writerId: string
    recipientId: string
    shareId: number
    grade: number
    content?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateOrConnectWithoutReviewsInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutReviewsInput, ReviewUncheckedCreateWithoutReviewsInput>
  }

  export type ShortReviewOptionCreateWithoutReviewsInput = {
    content: string
  }

  export type ShortReviewOptionUncheckedCreateWithoutReviewsInput = {
    id?: number
    content: string
  }

  export type ShortReviewOptionCreateOrConnectWithoutReviewsInput = {
    where: ShortReviewOptionWhereUniqueInput
    create: XOR<ShortReviewOptionCreateWithoutReviewsInput, ShortReviewOptionUncheckedCreateWithoutReviewsInput>
  }

  export type ReviewUpsertWithoutReviewsInput = {
    update: XOR<ReviewUpdateWithoutReviewsInput, ReviewUncheckedUpdateWithoutReviewsInput>
    create: XOR<ReviewCreateWithoutReviewsInput, ReviewUncheckedCreateWithoutReviewsInput>
    where?: ReviewWhereInput
  }

  export type ReviewUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ReviewWhereInput
    data: XOR<ReviewUpdateWithoutReviewsInput, ReviewUncheckedUpdateWithoutReviewsInput>
  }

  export type ReviewUpdateWithoutReviewsInput = {
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipient?: UserUpdateOneRequiredWithoutReceivedReviewsNestedInput
    share?: ShareUpdateOneRequiredWithoutReviewsNestedInput
    writer?: UserUpdateOneRequiredWithoutWrittenReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    writerId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    shareId?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShortReviewOptionUpsertWithoutReviewsInput = {
    update: XOR<ShortReviewOptionUpdateWithoutReviewsInput, ShortReviewOptionUncheckedUpdateWithoutReviewsInput>
    create: XOR<ShortReviewOptionCreateWithoutReviewsInput, ShortReviewOptionUncheckedCreateWithoutReviewsInput>
    where?: ShortReviewOptionWhereInput
  }

  export type ShortReviewOptionUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ShortReviewOptionWhereInput
    data: XOR<ShortReviewOptionUpdateWithoutReviewsInput, ShortReviewOptionUncheckedUpdateWithoutReviewsInput>
  }

  export type ShortReviewOptionUpdateWithoutReviewsInput = {
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ShortReviewOptionUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewShortReviewCreateWithoutShortReviewOptionInput = {
    review: ReviewCreateNestedOneWithoutReviewsInput
  }

  export type ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput = {
    id?: number
    reviewId: number
  }

  export type ReviewShortReviewCreateOrConnectWithoutShortReviewOptionInput = {
    where: ReviewShortReviewWhereUniqueInput
    create: XOR<ReviewShortReviewCreateWithoutShortReviewOptionInput, ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput>
  }

  export type ReviewShortReviewCreateManyShortReviewOptionInputEnvelope = {
    data: ReviewShortReviewCreateManyShortReviewOptionInput | ReviewShortReviewCreateManyShortReviewOptionInput[]
    skipDuplicates?: boolean
  }

  export type ReviewShortReviewUpsertWithWhereUniqueWithoutShortReviewOptionInput = {
    where: ReviewShortReviewWhereUniqueInput
    update: XOR<ReviewShortReviewUpdateWithoutShortReviewOptionInput, ReviewShortReviewUncheckedUpdateWithoutShortReviewOptionInput>
    create: XOR<ReviewShortReviewCreateWithoutShortReviewOptionInput, ReviewShortReviewUncheckedCreateWithoutShortReviewOptionInput>
  }

  export type ReviewShortReviewUpdateWithWhereUniqueWithoutShortReviewOptionInput = {
    where: ReviewShortReviewWhereUniqueInput
    data: XOR<ReviewShortReviewUpdateWithoutShortReviewOptionInput, ReviewShortReviewUncheckedUpdateWithoutShortReviewOptionInput>
  }

  export type ReviewShortReviewUpdateManyWithWhereWithoutShortReviewOptionInput = {
    where: ReviewShortReviewScalarWhereInput
    data: XOR<ReviewShortReviewUpdateManyMutationInput, ReviewShortReviewUncheckedUpdateManyWithoutShortReviewOptionInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupBuyCreateWithoutChatsInput = {
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    neighborhood: NeighborhoodCreateNestedOneWithoutGrouBuysInput
    organizer: UserCreateNestedOneWithoutGrouBuysInput
    images?: GroupBuyImageCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyUncheckedCreateWithoutChatsInput = {
    id?: number
    organizerId: string
    neighborhoodId: number
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
    images?: GroupBuyImageUncheckedCreateNestedManyWithoutGroupBuyInput
    participants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutGroupBuyInput
  }

  export type GroupBuyCreateOrConnectWithoutChatsInput = {
    where: GroupBuyWhereUniqueInput
    create: XOR<GroupBuyCreateWithoutChatsInput, GroupBuyUncheckedCreateWithoutChatsInput>
  }

  export type GroupBuyChatMessageCreateWithoutGroupBuyChatInput = {
    content: string
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutGroupBuyChatMessagesInput
  }

  export type GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput = {
    id?: number
    senderId: string
    content: string
    createdAt?: Date | string
  }

  export type GroupBuyChatMessageCreateOrConnectWithoutGroupBuyChatInput = {
    where: GroupBuyChatMessageWhereUniqueInput
    create: XOR<GroupBuyChatMessageCreateWithoutGroupBuyChatInput, GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput>
  }

  export type GroupBuyChatMessageCreateManyGroupBuyChatInputEnvelope = {
    data: GroupBuyChatMessageCreateManyGroupBuyChatInput | GroupBuyChatMessageCreateManyGroupBuyChatInput[]
    skipDuplicates?: boolean
  }

  export type GroupBuyChatParticipantCreateWithoutGroupBuyChatInput = {
    lastReadItemId?: number | null
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutGroupBuyChatParticipantsInput
  }

  export type GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput = {
    id?: number
    lastReadItemId?: number | null
    userId: string
    joinedAt?: Date | string
  }

  export type GroupBuyChatParticipantCreateOrConnectWithoutGroupBuyChatInput = {
    where: GroupBuyChatParticipantWhereUniqueInput
    create: XOR<GroupBuyChatParticipantCreateWithoutGroupBuyChatInput, GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput>
  }

  export type GroupBuyChatParticipantCreateManyGroupBuyChatInputEnvelope = {
    data: GroupBuyChatParticipantCreateManyGroupBuyChatInput | GroupBuyChatParticipantCreateManyGroupBuyChatInput[]
    skipDuplicates?: boolean
  }

  export type GroupBuyUpsertWithoutChatsInput = {
    update: XOR<GroupBuyUpdateWithoutChatsInput, GroupBuyUncheckedUpdateWithoutChatsInput>
    create: XOR<GroupBuyCreateWithoutChatsInput, GroupBuyUncheckedCreateWithoutChatsInput>
    where?: GroupBuyWhereInput
  }

  export type GroupBuyUpdateToOneWithWhereWithoutChatsInput = {
    where?: GroupBuyWhereInput
    data: XOR<GroupBuyUpdateWithoutChatsInput, GroupBuyUncheckedUpdateWithoutChatsInput>
  }

  export type GroupBuyUpdateWithoutChatsInput = {
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutGrouBuysNestedInput
    organizer?: UserUpdateOneRequiredWithoutGrouBuysNestedInput
    images?: GroupBuyImageUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyUncheckedUpdateWithoutChatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizerId?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    images?: GroupBuyImageUncheckedUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUncheckedUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyChatMessageUpsertWithWhereUniqueWithoutGroupBuyChatInput = {
    where: GroupBuyChatMessageWhereUniqueInput
    update: XOR<GroupBuyChatMessageUpdateWithoutGroupBuyChatInput, GroupBuyChatMessageUncheckedUpdateWithoutGroupBuyChatInput>
    create: XOR<GroupBuyChatMessageCreateWithoutGroupBuyChatInput, GroupBuyChatMessageUncheckedCreateWithoutGroupBuyChatInput>
  }

  export type GroupBuyChatMessageUpdateWithWhereUniqueWithoutGroupBuyChatInput = {
    where: GroupBuyChatMessageWhereUniqueInput
    data: XOR<GroupBuyChatMessageUpdateWithoutGroupBuyChatInput, GroupBuyChatMessageUncheckedUpdateWithoutGroupBuyChatInput>
  }

  export type GroupBuyChatMessageUpdateManyWithWhereWithoutGroupBuyChatInput = {
    where: GroupBuyChatMessageScalarWhereInput
    data: XOR<GroupBuyChatMessageUpdateManyMutationInput, GroupBuyChatMessageUncheckedUpdateManyWithoutGroupBuyChatInput>
  }

  export type GroupBuyChatParticipantUpsertWithWhereUniqueWithoutGroupBuyChatInput = {
    where: GroupBuyChatParticipantWhereUniqueInput
    update: XOR<GroupBuyChatParticipantUpdateWithoutGroupBuyChatInput, GroupBuyChatParticipantUncheckedUpdateWithoutGroupBuyChatInput>
    create: XOR<GroupBuyChatParticipantCreateWithoutGroupBuyChatInput, GroupBuyChatParticipantUncheckedCreateWithoutGroupBuyChatInput>
  }

  export type GroupBuyChatParticipantUpdateWithWhereUniqueWithoutGroupBuyChatInput = {
    where: GroupBuyChatParticipantWhereUniqueInput
    data: XOR<GroupBuyChatParticipantUpdateWithoutGroupBuyChatInput, GroupBuyChatParticipantUncheckedUpdateWithoutGroupBuyChatInput>
  }

  export type GroupBuyChatParticipantUpdateManyWithWhereWithoutGroupBuyChatInput = {
    where: GroupBuyChatParticipantScalarWhereInput
    data: XOR<GroupBuyChatParticipantUpdateManyMutationInput, GroupBuyChatParticipantUncheckedUpdateManyWithoutGroupBuyChatInput>
  }

  export type GroupBuyChatCreateWithoutMessagesInput = {
    createdAt?: Date | string
    groupBuy: GroupBuyCreateNestedOneWithoutChatsInput
    participants?: GroupBuyChatParticipantCreateNestedManyWithoutGroupBuyChatInput
  }

  export type GroupBuyChatUncheckedCreateWithoutMessagesInput = {
    id?: number
    groupBuyId: number
    createdAt?: Date | string
    participants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutGroupBuyChatInput
  }

  export type GroupBuyChatCreateOrConnectWithoutMessagesInput = {
    where: GroupBuyChatWhereUniqueInput
    create: XOR<GroupBuyChatCreateWithoutMessagesInput, GroupBuyChatUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutGroupBuyChatMessagesInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutGroupBuyChatMessagesInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGroupBuyChatMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroupBuyChatMessagesInput, UserUncheckedCreateWithoutGroupBuyChatMessagesInput>
  }

  export type GroupBuyChatUpsertWithoutMessagesInput = {
    update: XOR<GroupBuyChatUpdateWithoutMessagesInput, GroupBuyChatUncheckedUpdateWithoutMessagesInput>
    create: XOR<GroupBuyChatCreateWithoutMessagesInput, GroupBuyChatUncheckedCreateWithoutMessagesInput>
    where?: GroupBuyChatWhereInput
  }

  export type GroupBuyChatUpdateToOneWithWhereWithoutMessagesInput = {
    where?: GroupBuyChatWhereInput
    data: XOR<GroupBuyChatUpdateWithoutMessagesInput, GroupBuyChatUncheckedUpdateWithoutMessagesInput>
  }

  export type GroupBuyChatUpdateWithoutMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuy?: GroupBuyUpdateOneRequiredWithoutChatsNestedInput
    participants?: GroupBuyChatParticipantUpdateManyWithoutGroupBuyChatNestedInput
  }

  export type GroupBuyChatUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutGroupBuyChatNestedInput
  }

  export type UserUpsertWithoutGroupBuyChatMessagesInput = {
    update: XOR<UserUpdateWithoutGroupBuyChatMessagesInput, UserUncheckedUpdateWithoutGroupBuyChatMessagesInput>
    create: XOR<UserCreateWithoutGroupBuyChatMessagesInput, UserUncheckedCreateWithoutGroupBuyChatMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGroupBuyChatMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGroupBuyChatMessagesInput, UserUncheckedUpdateWithoutGroupBuyChatMessagesInput>
  }

  export type UserUpdateWithoutGroupBuyChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutGroupBuyChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type GroupBuyChatCreateWithoutParticipantsInput = {
    createdAt?: Date | string
    groupBuy: GroupBuyCreateNestedOneWithoutChatsInput
    messages?: GroupBuyChatMessageCreateNestedManyWithoutGroupBuyChatInput
  }

  export type GroupBuyChatUncheckedCreateWithoutParticipantsInput = {
    id?: number
    groupBuyId: number
    createdAt?: Date | string
    messages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutGroupBuyChatInput
  }

  export type GroupBuyChatCreateOrConnectWithoutParticipantsInput = {
    where: GroupBuyChatWhereUniqueInput
    create: XOR<GroupBuyChatCreateWithoutParticipantsInput, GroupBuyChatUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutGroupBuyChatParticipantsInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutGroupBuyChatParticipantsInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGroupBuyChatParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGroupBuyChatParticipantsInput, UserUncheckedCreateWithoutGroupBuyChatParticipantsInput>
  }

  export type GroupBuyChatUpsertWithoutParticipantsInput = {
    update: XOR<GroupBuyChatUpdateWithoutParticipantsInput, GroupBuyChatUncheckedUpdateWithoutParticipantsInput>
    create: XOR<GroupBuyChatCreateWithoutParticipantsInput, GroupBuyChatUncheckedCreateWithoutParticipantsInput>
    where?: GroupBuyChatWhereInput
  }

  export type GroupBuyChatUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: GroupBuyChatWhereInput
    data: XOR<GroupBuyChatUpdateWithoutParticipantsInput, GroupBuyChatUncheckedUpdateWithoutParticipantsInput>
  }

  export type GroupBuyChatUpdateWithoutParticipantsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuy?: GroupBuyUpdateOneRequiredWithoutChatsNestedInput
    messages?: GroupBuyChatMessageUpdateManyWithoutGroupBuyChatNestedInput
  }

  export type GroupBuyChatUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: GroupBuyChatMessageUncheckedUpdateManyWithoutGroupBuyChatNestedInput
  }

  export type UserUpsertWithoutGroupBuyChatParticipantsInput = {
    update: XOR<UserUpdateWithoutGroupBuyChatParticipantsInput, UserUncheckedUpdateWithoutGroupBuyChatParticipantsInput>
    create: XOR<UserCreateWithoutGroupBuyChatParticipantsInput, UserUncheckedCreateWithoutGroupBuyChatParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGroupBuyChatParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGroupBuyChatParticipantsInput, UserUncheckedUpdateWithoutGroupBuyChatParticipantsInput>
  }

  export type UserUpdateWithoutGroupBuyChatParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutGroupBuyChatParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShareCreateWithoutChatsInput = {
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewCreateNestedManyWithoutShareInput
    neighborhood: NeighborhoodCreateNestedOneWithoutSharesInput
    owner: UserCreateNestedOneWithoutOwnedSharesInput
    recipient?: UserCreateNestedOneWithoutReceivedSharesInput
    shareItem: ShareItemCreateNestedOneWithoutSharesInput
    images?: ShareImageCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateWithoutChatsInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutShareInput
    images?: ShareImageUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareCreateOrConnectWithoutChatsInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutChatsInput, ShareUncheckedCreateWithoutChatsInput>
  }

  export type ShareChatMessageCreateWithoutShareChatInput = {
    content: string
    createdAt?: Date | string
    sender: UserCreateNestedOneWithoutShareChatMessagesInput
  }

  export type ShareChatMessageUncheckedCreateWithoutShareChatInput = {
    id?: number
    senderId: string
    content: string
    createdAt?: Date | string
  }

  export type ShareChatMessageCreateOrConnectWithoutShareChatInput = {
    where: ShareChatMessageWhereUniqueInput
    create: XOR<ShareChatMessageCreateWithoutShareChatInput, ShareChatMessageUncheckedCreateWithoutShareChatInput>
  }

  export type ShareChatMessageCreateManyShareChatInputEnvelope = {
    data: ShareChatMessageCreateManyShareChatInput | ShareChatMessageCreateManyShareChatInput[]
    skipDuplicates?: boolean
  }

  export type ShareChatParticipantCreateWithoutShareChatInput = {
    lastReadItemId?: number | null
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutShareChatParticipantsInput
  }

  export type ShareChatParticipantUncheckedCreateWithoutShareChatInput = {
    id?: number
    lastReadItemId?: number | null
    userId: string
    joinedAt?: Date | string
  }

  export type ShareChatParticipantCreateOrConnectWithoutShareChatInput = {
    where: ShareChatParticipantWhereUniqueInput
    create: XOR<ShareChatParticipantCreateWithoutShareChatInput, ShareChatParticipantUncheckedCreateWithoutShareChatInput>
  }

  export type ShareChatParticipantCreateManyShareChatInputEnvelope = {
    data: ShareChatParticipantCreateManyShareChatInput | ShareChatParticipantCreateManyShareChatInput[]
    skipDuplicates?: boolean
  }

  export type ShareUpsertWithoutChatsInput = {
    update: XOR<ShareUpdateWithoutChatsInput, ShareUncheckedUpdateWithoutChatsInput>
    create: XOR<ShareCreateWithoutChatsInput, ShareUncheckedCreateWithoutChatsInput>
    where?: ShareWhereInput
  }

  export type ShareUpdateToOneWithWhereWithoutChatsInput = {
    where?: ShareWhereInput
    data: XOR<ShareUpdateWithoutChatsInput, ShareUncheckedUpdateWithoutChatsInput>
  }

  export type ShareUpdateWithoutChatsInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutShareNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutSharesNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedSharesNestedInput
    recipient?: UserUpdateOneWithoutReceivedSharesNestedInput
    shareItem?: ShareItemUpdateOneRequiredWithoutSharesNestedInput
    images?: ShareImageUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutChatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutShareNestedInput
    images?: ShareImageUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ShareChatMessageUpsertWithWhereUniqueWithoutShareChatInput = {
    where: ShareChatMessageWhereUniqueInput
    update: XOR<ShareChatMessageUpdateWithoutShareChatInput, ShareChatMessageUncheckedUpdateWithoutShareChatInput>
    create: XOR<ShareChatMessageCreateWithoutShareChatInput, ShareChatMessageUncheckedCreateWithoutShareChatInput>
  }

  export type ShareChatMessageUpdateWithWhereUniqueWithoutShareChatInput = {
    where: ShareChatMessageWhereUniqueInput
    data: XOR<ShareChatMessageUpdateWithoutShareChatInput, ShareChatMessageUncheckedUpdateWithoutShareChatInput>
  }

  export type ShareChatMessageUpdateManyWithWhereWithoutShareChatInput = {
    where: ShareChatMessageScalarWhereInput
    data: XOR<ShareChatMessageUpdateManyMutationInput, ShareChatMessageUncheckedUpdateManyWithoutShareChatInput>
  }

  export type ShareChatParticipantUpsertWithWhereUniqueWithoutShareChatInput = {
    where: ShareChatParticipantWhereUniqueInput
    update: XOR<ShareChatParticipantUpdateWithoutShareChatInput, ShareChatParticipantUncheckedUpdateWithoutShareChatInput>
    create: XOR<ShareChatParticipantCreateWithoutShareChatInput, ShareChatParticipantUncheckedCreateWithoutShareChatInput>
  }

  export type ShareChatParticipantUpdateWithWhereUniqueWithoutShareChatInput = {
    where: ShareChatParticipantWhereUniqueInput
    data: XOR<ShareChatParticipantUpdateWithoutShareChatInput, ShareChatParticipantUncheckedUpdateWithoutShareChatInput>
  }

  export type ShareChatParticipantUpdateManyWithWhereWithoutShareChatInput = {
    where: ShareChatParticipantScalarWhereInput
    data: XOR<ShareChatParticipantUpdateManyMutationInput, ShareChatParticipantUncheckedUpdateManyWithoutShareChatInput>
  }

  export type UserCreateWithoutShareChatMessagesInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatParticipants?: ShareChatParticipantCreateNestedManyWithoutUserInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutShareChatMessagesInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatParticipants?: ShareChatParticipantUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutShareChatMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShareChatMessagesInput, UserUncheckedCreateWithoutShareChatMessagesInput>
  }

  export type ShareChatCreateWithoutMessagesInput = {
    createdAt?: Date | string
    share: ShareCreateNestedOneWithoutChatsInput
    participants?: ShareChatParticipantCreateNestedManyWithoutShareChatInput
  }

  export type ShareChatUncheckedCreateWithoutMessagesInput = {
    id?: number
    shareId: number
    createdAt?: Date | string
    participants?: ShareChatParticipantUncheckedCreateNestedManyWithoutShareChatInput
  }

  export type ShareChatCreateOrConnectWithoutMessagesInput = {
    where: ShareChatWhereUniqueInput
    create: XOR<ShareChatCreateWithoutMessagesInput, ShareChatUncheckedCreateWithoutMessagesInput>
  }

  export type UserUpsertWithoutShareChatMessagesInput = {
    update: XOR<UserUpdateWithoutShareChatMessagesInput, UserUncheckedUpdateWithoutShareChatMessagesInput>
    create: XOR<UserCreateWithoutShareChatMessagesInput, UserUncheckedCreateWithoutShareChatMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShareChatMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShareChatMessagesInput, UserUncheckedUpdateWithoutShareChatMessagesInput>
  }

  export type UserUpdateWithoutShareChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutShareChatMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ShareChatUpsertWithoutMessagesInput = {
    update: XOR<ShareChatUpdateWithoutMessagesInput, ShareChatUncheckedUpdateWithoutMessagesInput>
    create: XOR<ShareChatCreateWithoutMessagesInput, ShareChatUncheckedCreateWithoutMessagesInput>
    where?: ShareChatWhereInput
  }

  export type ShareChatUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ShareChatWhereInput
    data: XOR<ShareChatUpdateWithoutMessagesInput, ShareChatUncheckedUpdateWithoutMessagesInput>
  }

  export type ShareChatUpdateWithoutMessagesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    share?: ShareUpdateOneRequiredWithoutChatsNestedInput
    participants?: ShareChatParticipantUpdateManyWithoutShareChatNestedInput
  }

  export type ShareChatUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    participants?: ShareChatParticipantUncheckedUpdateManyWithoutShareChatNestedInput
  }

  export type ShareChatCreateWithoutParticipantsInput = {
    createdAt?: Date | string
    share: ShareCreateNestedOneWithoutChatsInput
    messages?: ShareChatMessageCreateNestedManyWithoutShareChatInput
  }

  export type ShareChatUncheckedCreateWithoutParticipantsInput = {
    id?: number
    shareId: number
    createdAt?: Date | string
    messages?: ShareChatMessageUncheckedCreateNestedManyWithoutShareChatInput
  }

  export type ShareChatCreateOrConnectWithoutParticipantsInput = {
    where: ShareChatWhereUniqueInput
    create: XOR<ShareChatCreateWithoutParticipantsInput, ShareChatUncheckedCreateWithoutParticipantsInput>
  }

  export type UserCreateWithoutShareChatParticipantsInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewCreateNestedManyWithoutWriterInput
    ownedShares?: ShareCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageCreateNestedManyWithoutSenderInput
    neighborhood: NeighborhoodCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutShareChatParticipantsInput = {
    id?: string
    neighborhoodId: number
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
    grouBuys?: GroupBuyUncheckedCreateNestedManyWithoutOrganizerInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedCreateNestedManyWithoutSenderInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedCreateNestedManyWithoutUserInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    receivedReviews?: ReviewUncheckedCreateNestedManyWithoutRecipientInput
    writtenReviews?: ReviewUncheckedCreateNestedManyWithoutWriterInput
    ownedShares?: ShareUncheckedCreateNestedManyWithoutOwnerInput
    receivedShares?: ShareUncheckedCreateNestedManyWithoutRecipientInput
    shareChatMessages?: ShareChatMessageUncheckedCreateNestedManyWithoutSenderInput
  }

  export type UserCreateOrConnectWithoutShareChatParticipantsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutShareChatParticipantsInput, UserUncheckedCreateWithoutShareChatParticipantsInput>
  }

  export type ShareChatUpsertWithoutParticipantsInput = {
    update: XOR<ShareChatUpdateWithoutParticipantsInput, ShareChatUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ShareChatCreateWithoutParticipantsInput, ShareChatUncheckedCreateWithoutParticipantsInput>
    where?: ShareChatWhereInput
  }

  export type ShareChatUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: ShareChatWhereInput
    data: XOR<ShareChatUpdateWithoutParticipantsInput, ShareChatUncheckedUpdateWithoutParticipantsInput>
  }

  export type ShareChatUpdateWithoutParticipantsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    share?: ShareUpdateOneRequiredWithoutChatsNestedInput
    messages?: ShareChatMessageUpdateManyWithoutShareChatNestedInput
  }

  export type ShareChatUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ShareChatMessageUncheckedUpdateManyWithoutShareChatNestedInput
  }

  export type UserUpsertWithoutShareChatParticipantsInput = {
    update: XOR<UserUpdateWithoutShareChatParticipantsInput, UserUncheckedUpdateWithoutShareChatParticipantsInput>
    create: XOR<UserCreateWithoutShareChatParticipantsInput, UserUncheckedCreateWithoutShareChatParticipantsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutShareChatParticipantsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutShareChatParticipantsInput, UserUncheckedUpdateWithoutShareChatParticipantsInput>
  }

  export type UserUpdateWithoutShareChatParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutShareChatParticipantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
  }

  export type GroupBuyCreateManyNeighborhoodInput = {
    id?: number
    organizerId: string
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
  }

  export type ShareCreateManyNeighborhoodInput = {
    id?: number
    shareItemId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
  }

  export type UserCreateManyNeighborhoodInput = {
    id?: string
    email: string
    nickname: string
    profileUrl?: string | null
    address: string
    createdAt?: Date | string
    shareScore?: number
    publicId?: number
  }

  export type GroupBuyUpdateWithoutNeighborhoodInput = {
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    organizer?: UserUpdateOneRequiredWithoutGrouBuysNestedInput
    chats?: GroupBuyChatUpdateManyWithoutGroupBuyNestedInput
    images?: GroupBuyImageUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyUncheckedUpdateWithoutNeighborhoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    chats?: GroupBuyChatUncheckedUpdateManyWithoutGroupBuyNestedInput
    images?: GroupBuyImageUncheckedUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUncheckedUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyUncheckedUpdateManyWithoutNeighborhoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    organizerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ShareUpdateWithoutNeighborhoodInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutShareNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedSharesNestedInput
    recipient?: UserUpdateOneWithoutReceivedSharesNestedInput
    shareItem?: ShareItemUpdateOneRequiredWithoutSharesNestedInput
    chats?: ShareChatUpdateManyWithoutShareNestedInput
    images?: ShareImageUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutNeighborhoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutShareNestedInput
    chats?: ShareChatUncheckedUpdateManyWithoutShareNestedInput
    images?: ShareImageUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateManyWithoutNeighborhoodInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
    grouBuys?: GroupBuyUncheckedUpdateManyWithoutOrganizerNestedInput
    groupBuyChatMessages?: GroupBuyChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    groupBuyChatParticipants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutUserNestedInput
    groupBuyParticipants?: GroupBuyParticipantUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    receivedReviews?: ReviewUncheckedUpdateManyWithoutRecipientNestedInput
    writtenReviews?: ReviewUncheckedUpdateManyWithoutWriterNestedInput
    ownedShares?: ShareUncheckedUpdateManyWithoutOwnerNestedInput
    receivedShares?: ShareUncheckedUpdateManyWithoutRecipientNestedInput
    shareChatMessages?: ShareChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    shareChatParticipants?: ShareChatParticipantUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutNeighborhoodInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    profileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareScore?: IntFieldUpdateOperationsInput | number
    publicId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupBuyCreateManyOrganizerInput = {
    id?: number
    neighborhoodId: number
    title: string
    capacity: number
    desiredItem: string
    meetingDate: Date | string
    createdAt?: Date | string
    locationAddress: string
    locationNote: string
    description: string
    status: number
  }

  export type GroupBuyChatMessageCreateManySenderInput = {
    id?: number
    groupBuyChatId: number
    content: string
    createdAt?: Date | string
  }

  export type GroupBuyChatParticipantCreateManyUserInput = {
    id?: number
    lastReadItemId?: number | null
    groupBuyChatId: number
    joinedAt?: Date | string
  }

  export type GroupBuyParticipantCreateManyUserInput = {
    id?: number
    groupBuyId: number
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    isRead?: boolean
    content: string
    createdAt?: Date | string
  }

  export type ReviewCreateManyRecipientInput = {
    id?: number
    writerId: string
    shareId: number
    grade: number
    content?: string | null
    createdAt?: Date | string
  }

  export type ReviewCreateManyWriterInput = {
    id?: number
    recipientId: string
    shareId: number
    grade: number
    content?: string | null
    createdAt?: Date | string
  }

  export type ShareCreateManyOwnerInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
  }

  export type ShareCreateManyRecipientInput = {
    id?: number
    shareItemId: number
    neighborhoodId: number
    ownerId: string
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
  }

  export type ShareChatMessageCreateManySenderInput = {
    id?: number
    shareChatId: number
    content: string
    createdAt?: Date | string
  }

  export type ShareChatParticipantCreateManyUserInput = {
    id?: number
    lastReadItemId?: number | null
    shareChatId: number
    joinedAt?: Date | string
  }

  export type GroupBuyUpdateWithoutOrganizerInput = {
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutGrouBuysNestedInput
    chats?: GroupBuyChatUpdateManyWithoutGroupBuyNestedInput
    images?: GroupBuyImageUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyUncheckedUpdateWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    chats?: GroupBuyChatUncheckedUpdateManyWithoutGroupBuyNestedInput
    images?: GroupBuyImageUncheckedUpdateManyWithoutGroupBuyNestedInput
    participants?: GroupBuyParticipantUncheckedUpdateManyWithoutGroupBuyNestedInput
  }

  export type GroupBuyUncheckedUpdateManyWithoutOrganizerInput = {
    id?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    desiredItem?: StringFieldUpdateOperationsInput | string
    meetingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type GroupBuyChatMessageUpdateWithoutSenderInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuyChat?: GroupBuyChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type GroupBuyChatMessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyChatId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatMessageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyChatId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatParticipantUpdateWithoutUserInput = {
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuyChat?: GroupBuyChatUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type GroupBuyChatParticipantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    groupBuyChatId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    groupBuyChatId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyParticipantUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupBuy?: GroupBuyUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type GroupBuyParticipantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupBuyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    isRead?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutRecipientInput = {
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    share?: ShareUpdateOneRequiredWithoutReviewsNestedInput
    writer?: UserUpdateOneRequiredWithoutWrittenReviewsNestedInput
    reviews?: ReviewShortReviewUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutRecipientInput = {
    id?: IntFieldUpdateOperationsInput | number
    writerId?: StringFieldUpdateOperationsInput | string
    shareId?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewShortReviewUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateManyWithoutRecipientInput = {
    id?: IntFieldUpdateOperationsInput | number
    writerId?: StringFieldUpdateOperationsInput | string
    shareId?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewUpdateWithoutWriterInput = {
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipient?: UserUpdateOneRequiredWithoutReceivedReviewsNestedInput
    share?: ShareUpdateOneRequiredWithoutReviewsNestedInput
    reviews?: ReviewShortReviewUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutWriterInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipientId?: StringFieldUpdateOperationsInput | string
    shareId?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewShortReviewUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateManyWithoutWriterInput = {
    id?: IntFieldUpdateOperationsInput | number
    recipientId?: StringFieldUpdateOperationsInput | string
    shareId?: IntFieldUpdateOperationsInput | number
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUpdateWithoutOwnerInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutShareNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutSharesNestedInput
    recipient?: UserUpdateOneWithoutReceivedSharesNestedInput
    shareItem?: ShareItemUpdateOneRequiredWithoutSharesNestedInput
    chats?: ShareChatUpdateManyWithoutShareNestedInput
    images?: ShareImageUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutShareNestedInput
    chats?: ShareChatUncheckedUpdateManyWithoutShareNestedInput
    images?: ShareImageUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ShareUpdateWithoutRecipientInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutShareNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutSharesNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedSharesNestedInput
    shareItem?: ShareItemUpdateOneRequiredWithoutSharesNestedInput
    chats?: ShareChatUpdateManyWithoutShareNestedInput
    images?: ShareImageUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutRecipientInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutShareNestedInput
    chats?: ShareChatUncheckedUpdateManyWithoutShareNestedInput
    images?: ShareImageUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateManyWithoutRecipientInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareItemId?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ShareChatMessageUpdateWithoutSenderInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareChat?: ShareChatUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ShareChatMessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareChatId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatMessageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareChatId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatParticipantUpdateWithoutUserInput = {
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareChat?: ShareChatUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ShareChatParticipantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    shareChatId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatParticipantUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    shareChatId?: IntFieldUpdateOperationsInput | number
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatCreateManyGroupBuyInput = {
    id?: number
    createdAt?: Date | string
  }

  export type GroupBuyImageCreateManyGroupBuyInput = {
    id?: number
    url: string
  }

  export type GroupBuyParticipantCreateManyGroupBuyInput = {
    id?: number
    userId: string
    createdAt?: Date | string
  }

  export type GroupBuyChatUpdateWithoutGroupBuyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: GroupBuyChatMessageUpdateManyWithoutGroupBuyChatNestedInput
    participants?: GroupBuyChatParticipantUpdateManyWithoutGroupBuyChatNestedInput
  }

  export type GroupBuyChatUncheckedUpdateWithoutGroupBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: GroupBuyChatMessageUncheckedUpdateManyWithoutGroupBuyChatNestedInput
    participants?: GroupBuyChatParticipantUncheckedUpdateManyWithoutGroupBuyChatNestedInput
  }

  export type GroupBuyChatUncheckedUpdateManyWithoutGroupBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyImageUpdateWithoutGroupBuyInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GroupBuyImageUncheckedUpdateWithoutGroupBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GroupBuyImageUncheckedUpdateManyWithoutGroupBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type GroupBuyParticipantUpdateWithoutGroupBuyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGroupBuyParticipantsNestedInput
  }

  export type GroupBuyParticipantUncheckedUpdateWithoutGroupBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyParticipantUncheckedUpdateManyWithoutGroupBuyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReviewCreateManyShareInput = {
    id?: number
    writerId: string
    recipientId: string
    grade: number
    content?: string | null
    createdAt?: Date | string
  }

  export type ShareChatCreateManyShareInput = {
    id?: number
    createdAt?: Date | string
  }

  export type ShareImageCreateManyShareInput = {
    id?: number
    url: string
  }

  export type ReviewUpdateWithoutShareInput = {
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    recipient?: UserUpdateOneRequiredWithoutReceivedReviewsNestedInput
    writer?: UserUpdateOneRequiredWithoutWrittenReviewsNestedInput
    reviews?: ReviewShortReviewUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    writerId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ReviewShortReviewUncheckedUpdateManyWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateManyWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    writerId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    grade?: IntFieldUpdateOperationsInput | number
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatUpdateWithoutShareInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ShareChatMessageUpdateManyWithoutShareChatNestedInput
    participants?: ShareChatParticipantUpdateManyWithoutShareChatNestedInput
  }

  export type ShareChatUncheckedUpdateWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ShareChatMessageUncheckedUpdateManyWithoutShareChatNestedInput
    participants?: ShareChatParticipantUncheckedUpdateManyWithoutShareChatNestedInput
  }

  export type ShareChatUncheckedUpdateManyWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareImageUpdateWithoutShareInput = {
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShareImageUncheckedUpdateWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShareImageUncheckedUpdateManyWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
  }

  export type ShareCreateManyShareItemInput = {
    id?: number
    neighborhoodId: number
    ownerId: string
    recipientId?: string | null
    title: string
    createdAt?: Date | string
    meetingDate?: Date | string | null
    lat: number
    lng: number
    locationAddress: string
    locationNote: string
    description: string
    status: number
  }

  export type ShareUpdateWithoutShareItemInput = {
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutShareNestedInput
    neighborhood?: NeighborhoodUpdateOneRequiredWithoutSharesNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedSharesNestedInput
    recipient?: UserUpdateOneWithoutReceivedSharesNestedInput
    chats?: ShareChatUpdateManyWithoutShareNestedInput
    images?: ShareImageUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateWithoutShareItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutShareNestedInput
    chats?: ShareChatUncheckedUpdateManyWithoutShareNestedInput
    images?: ShareImageUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateManyWithoutShareItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    neighborhoodId?: IntFieldUpdateOperationsInput | number
    ownerId?: StringFieldUpdateOperationsInput | string
    recipientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lat?: FloatFieldUpdateOperationsInput | number
    lng?: FloatFieldUpdateOperationsInput | number
    locationAddress?: StringFieldUpdateOperationsInput | string
    locationNote?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewShortReviewCreateManyReviewInput = {
    id?: number
    shortReviewOptionId: number
  }

  export type ReviewShortReviewUpdateWithoutReviewInput = {
    shortReviewOption?: ShortReviewOptionUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewShortReviewUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    shortReviewOptionId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewShortReviewUncheckedUpdateManyWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    shortReviewOptionId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewShortReviewCreateManyShortReviewOptionInput = {
    id?: number
    reviewId: number
  }

  export type ReviewShortReviewUpdateWithoutShortReviewOptionInput = {
    review?: ReviewUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewShortReviewUncheckedUpdateWithoutShortReviewOptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewShortReviewUncheckedUpdateManyWithoutShortReviewOptionInput = {
    id?: IntFieldUpdateOperationsInput | number
    reviewId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupBuyChatMessageCreateManyGroupBuyChatInput = {
    id?: number
    senderId: string
    content: string
    createdAt?: Date | string
  }

  export type GroupBuyChatParticipantCreateManyGroupBuyChatInput = {
    id?: number
    lastReadItemId?: number | null
    userId: string
    joinedAt?: Date | string
  }

  export type GroupBuyChatMessageUpdateWithoutGroupBuyChatInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutGroupBuyChatMessagesNestedInput
  }

  export type GroupBuyChatMessageUncheckedUpdateWithoutGroupBuyChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatMessageUncheckedUpdateManyWithoutGroupBuyChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatParticipantUpdateWithoutGroupBuyChatInput = {
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutGroupBuyChatParticipantsNestedInput
  }

  export type GroupBuyChatParticipantUncheckedUpdateWithoutGroupBuyChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupBuyChatParticipantUncheckedUpdateManyWithoutGroupBuyChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatMessageCreateManyShareChatInput = {
    id?: number
    senderId: string
    content: string
    createdAt?: Date | string
  }

  export type ShareChatParticipantCreateManyShareChatInput = {
    id?: number
    lastReadItemId?: number | null
    userId: string
    joinedAt?: Date | string
  }

  export type ShareChatMessageUpdateWithoutShareChatInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneRequiredWithoutShareChatMessagesNestedInput
  }

  export type ShareChatMessageUncheckedUpdateWithoutShareChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatMessageUncheckedUpdateManyWithoutShareChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatParticipantUpdateWithoutShareChatInput = {
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutShareChatParticipantsNestedInput
  }

  export type ShareChatParticipantUncheckedUpdateWithoutShareChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareChatParticipantUncheckedUpdateManyWithoutShareChatInput = {
    id?: IntFieldUpdateOperationsInput | number
    lastReadItemId?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}